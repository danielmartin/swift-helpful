* swift-helpful - A Self-Documenting Programming Environment for Swift

** Overview
   Emacs is described as "the extensible, customizable, self-documenting, real-time display editor". Wouldn't you like
   the same self-documenting capabilities when you are writing Swift code in Emacs? ~swift-helpful~ is a package that,
   using information from ~swift-mode~, ~lsp-mode~ and ~swift-info~, is able to answer questions about anything you see
   in a Swift program.

   While developer tools are typically identifier-centric in the sense that they only show documentation about API,
   ~swift-helpful~ also shows official Apple information about keywords, attributes, etc. It's the perfect companion for
   experimenting with a Swift playground in Emacs.

** Install and Configuration

   Simply download ~swift-helpful~ and load it when you deem appropriate:

#+BEGIN_SRC emacs-lisp
   (require 'swift-helpful)
#+END_SRC

** Features

*** Contextual information about Swift keywords and attributes

If you have installed the Swift manuals in GNU Info format that are included in ~swift-helpful~ under the ~swift-info~
folder, it will show you information about any Swift keyword or attribute. Let's say you see ~import~ in a Swift program
and you want to know more about importing modules in Swift (what's the default visibility, etc.). Simply place the point
on top of "import" and invoke ~swift-helpful~ with ~M-x swift-helpful~. The tool will show you a
brief snippet of information about Swift modules. Pressing the "Read more in manual" button opens the Swift manual in
GNU Info format so that you can read the definitive discussion about that topic.

[[file:screenshots/import.png]]

Information is not only limited to keywords. The Swift programming language is making use of attributes more and more,
so swift-helpful will also show information about attributes too. Let's say you don't know what ~@dynamicCallable~
means. Simply place the point in one occurrance of that attribute and invoke swift-helpful to show you an explanation,
this time coming from the official Swift Reference manual:

[[file:screenshots/dynamicCallable.png]]

*** API documentation coming from Language Server Protocol

~swift-helpful~ also shows documentation about API in the same way your favorite IDE does. It uses ~lsp-mode~, if
configured with my specific extension for Swift, ~lsp-sourcekit~ (https://github.com/emacs-lsp/lsp-sourcekit).

Let's say you want to know more about the ~isExecutable~ method that is called from a ~SourceKit-LSP~ source file. If we
invoke ~swift-helpful~ on that symbol, we see information coming from Language Server Protocol, including the method
type signature, its header documentation, and two convenient buttons to search for its definition or references in the
codebase.

[[file:screenshots/isExecutableFile.png]]

*** Swift standard library source code

If you have a local checkout of the Swift standard library, ~swift-helpful~ is able to search it and present you with
the implementation with almost zero configuration.

Let's say you want to know more about the ~dropFirst~ collection function in Swift. If you ask ~swift-helpful~ about that
you will be presented with the function implementation from ~Collection.swift~. All file paths are links, so if you click
on them you will open the standard library source file in case you want to investigate further.

[[file:screenshots/dropFirst.png]]
** Development

Development is automated by means of Make (https://www.gnu.org/software/make/) and Cask (https://cask.readthedocs.io), so installing those programs is encouraged before developing on ~swift-helpful~.

*** Byte-compilation

#+BEGIN_SRC sh
   make compile
#+END_SRC

*** Testing

To minimize the chance of regressions, you can run ~swift-helpful~ regression test suite after introducing a change:

#+BEGIN_SRC sh
   make test
#+END_SRC

If you want to use ert-runner:

#+BEGIN_SRC sh
   make test-ert-runner
#+END_SRC

*** Lint Function Documentation

Any good Emacs package should follow some basic style rules regarding its function documentation. To check that:

#+BEGIN_SRC sh
   make checkdoc
#+END_SRC

See ~README.md~ inside the ~swift-info~ folder to know how to update the documentation after you have modified the documentation source code in Org.
