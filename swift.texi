\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename swift.info
@settitle The Swift Programming Language Guide (Swift 5)
@documentencoding UTF-8
@documentlanguage en
@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex ky cp
@c %**end of header

@dircategory Emacs
@direntry
* Swift: (swift).       The Swift programming language.
@end direntry

@finalout
@titlepage
@title The Swift Programming Language Guide (Swift 5)
@author Apple Inc.
@end titlepage

@contents

@ifnottex
@node Top
@top The Swift Programming Language Guide (Swift 5)
@end ifnottex

@menu
* Welcome to Swift::
* About Swift::
* Version Compatibility::
* A Swift Tour::
* Language Guide::
* The Basics::
* Basic Operators::
* Strings and Characters::
* Collection Types::
* Control Flow: Control Flow 1.
* Functions::
* Closures::
* Enumeration::
* Structures and Classes::
* Properties::
* Methods::
* Subscripts::
* Inheritance::
* Initialization::
* Deinitialization::
* Optional Chaining::
* Error Handling: Error Handling 2.
* Type Casting::
* Nested Types::
* Extensions::
* Protocols::
* Generics: Generics 1.
* Automatic Reference Counting::
* Memory Safety::
* Access Control::
* Advanced Operators::
* Index::

@detailmenu
--- The Detailed Node Listing ---

A Swift Tour

* Simple Values::
* Control Flow::
* Functions and Closures::
* Objects and Classes::
* Enumerations and Structures::
* Protocols and Extensions::
* Error Handling::
* Generics::

The Basics

* Constants and Variables::
* Comments::
* Semicolons::
* Integers::
* Floating-Point Numbers::
* Type Safety and Type Inference::
* Numeric Literals::
* Numeric Type Conversion::
* Type Aliases::
* Booleans::
* Tuples::
* Optionals::
* Error Handling: Error Handling 1.
* Assertions and Preconditions::

Constants and Variables

* Declaring Constants and Variables::
* Type Annotations::
* Naming Constants and Variables::
* Printing Constants and Variables::

Integers

* Integer Bounds::
* Int::
* UInt::

Numeric Type Conversion

* Integer Conversion::
* Integer and Floating-Point Conversion::

Optionals

* nil::
* If Statements and Forced Unwrapping::
* Optional Binding::
* Implicitly Unwrapped Optionals::

Assertions and Preconditions

* Debugging with Assertions::
* Enforcing Preconditions::

Basic Operators

* Terminology::
* Assignment Operator::
* Arithmetic Operators::
* Compound Assignment Operators::
* Comparison Operators::
* Ternary Conditional Operator::
* Nil-Coalescing Operator::
* Range Operators::
* Logical Operators::

Arithmetic Operators

* Remainder Operator::
* Unary Minus Operator::
* Unary Plus Operator::

Range Operators

* Closed Range Operator::
* Half-Open Range Operator::
* One-Sided Ranges::

Logical Operators

* Logical NOT Operator::
* Logical AND Operator::
* Logical OR Operator::
* Combining Logical Operators::
* Explicit Parentheses::

Strings and Characters

* String Literals::
* Initializing an Empty String::
* String Mutability::
* Strings Are Value Types::
* Working with Characters::
* Concatenating Strings and Characters::
* String Interpolation::
* Unicode::
* Counting Characters::
* Accessing and Modifying a String::
* Substrings::
* Comparing Strings::
* Unicode Representations of Strings::

String Literals

* Multiline String Literals::
* Special Characters in String Literals::
* Extended String Delimiters::

Unicode

* Unicode Scalar Values::
* Extended Grapheme Clusters::

Accessing and Modifying a String

* String Indices::
* Inserting and Removing::

Comparing Strings

* String and Character Equality::
* Prefix and Suffix Equality::

Unicode Representations of Strings

* UTF-8 Representation::
* UTF-16 Representation::
* Unicode Scalar Representation::

Collection Types

* Mutability of Collections::
* Arrays::
* Sets::
* Performing Set Operations::
* Dictionaries::

Arrays

* Array Type Shorthand Syntax::
* Creating an Empty Array::
* Creating an Array with a Default Value::
* Creating an Array by Adding Two Arrays Together::
* Creating an Array with an Array Literal::
* Accessing and Modifying an Array::
* Iterating Over an Array::

Sets

* Hash Values for Set Types::
* Set Type Syntax::
* Creating and Initializing an Empty Set::
* Creating a Set with an Array Literal::
* Accessing and Modifying a Set::
* Iterating Over a Set::

Performing Set Operations

* Fundamental Set Operations::
* Set Membership and Equality::

Dictionaries

* Dictionary Type Shorthand Syntax::
* Creating an Empty Dictionary::
* Creating a Dictionary with a Dictionary Literal::
* Accessing and Modifying a Dictionary::
* Iterating Over a Dictionary::

Control Flow

* For-In Loops::
* While Loops::
* Conditional Statements::
* Control Transfer Statements::
* Early Exit::
* Checking API Availability::

While Loops

* While::
* Repeat-While::

Conditional Statements

* If::
* Switch::

Control Transfer Statements

* Continue::
* Break::
* Fallthrough::
* Labeled Statements::

Functions

* Defining and Calling Functions::
* Function Parameters and Return Values::
* Function Argument Labels and Parameter Names::
* Function Types::
* Nested Functions::

Function Parameters and Return Values

* Functions Without Parameters::
* Functions With Multiple Parameters::
* Functions Without Return Values::
* Functions with Multiple Return Values::

Function Argument Labels and Parameter Names

* Specifying Argument Labels::
* Omitting Argument Labels::
* Default Parameter Values::
* Variadic Parameters::
* In-Out Parameters::

Function Types

* Using Function Types::
* Function Types as Parameter Types::
* Function Types as Return Types::

Closures

* Closure Expressions::
* Trailing Closures::
* Capturing Values::
* Closures Are Reference Types::
* Escaping Closures::
* Autoclosures::

Closure Expressions

* The Sorted Method::
* Closure Expression Syntax::
* Inferring Type From Context::
* Implicit Returns from Single-Expression Closures::
* Shorthand Argument Names::
* Operator Methods::

Enumeration

* Enumeration Syntax::
* Matching Enumeration Values with a Switch Statement::
* Iterating over Enumeration Cases::
* Associated Values::
* Raw Values::
* Recursive Enumerations::

Raw Values

* Implicitly Assigned Raw Values::
* Initializing from a Raw Value::

Structures and Classes

* Comparing Structures and Classes::
* Structures and Enumerations Are Value Types::
* Classes Are Reference Types::

Comparing Structures and Classes

* Definition Syntax::
* Structure and Class Instances::
* Accessing Properties::
* Memberwise Initializers for Structure Types::

Classes Are Reference Types

* Identity Operators::
* Pointers::

Properties

* Stored Properties::
* Computed Properties::
* Property Observers::
* Global and Local Variables::
* Type Properties::

Stored Properties

* Stored Properties of Constant Structure Instances::
* Lazy Stored Properties::
* Stored Properties and Instance Variables::

Computed Properties

* Shorthand Setter Declaration::
* Read-Only Computed Properties::

Type Properties

* Type Property Syntax::
* Querying and Setting Type Properties::

Methods

* Instance Methods::
* Type Methods::

Instance Methods

* The self Property::
* Modifying Value Types from Within Instance Methods::
* Assigning to self Within a Mutating Method::

Subscripts

* Subscript Syntax::
* Subscript Usage::
* Subscript Options::

Inheritance

* Defining a Base Class::
* Subclassing::
* Overriding::
* Preventing Overrides::

Overriding

* Accessing Superclass Methods, Properties, and Subscripts: Accessing Superclass Methods Properties and Subscripts.
* Overriding Methods::
* Overriding Properties::

Initialization

* Setting Initial Values for Stored Properties::
* Customizing Initialization::
* Default Initializers::
* Initializer Delegation for Value Types::
* Class Inheritance and Initialization::
* Failable Initializers::
* Required Initializers::
* Setting a Default Property Value with a Closure or Function::

Setting Initial Values for Stored Properties

* Initializers::
* Default Property Values::

Customizing Initialization

* Initialization Parameters::
* Parameter Names and Argument Labels::
* Initializer Parameters Without Argument Labels::
* Optional Property Types::
* Assigning Constant Properties During Initialization::

Default Initializers

* Memberwise Initializers for Structure Types: Memberwise Initializers for Structure Types 1.

Class Inheritance and Initialization

* Designated Initializers and Convenience Initializers::
* Syntax for Designated and Convenience Initializers::
* Initializer Delegation for Class Types::
* Two-Phase Initialization::
* Initializer Inheritance and Overriding::
* Automatic Initializer Inheritance::
* Designated and Convenience Initializers in Action::

Failable Initializers

* Failable Initializers for Enumerations::
* Failable Initializers for Enumerations with Raw Values::
* Propagation of Initialization Failure::
* Overriding a Failable Initializer::
* The init! Failable Initializer::

Deinitialization

* How Deinitialization Works::
* Deinitializers in Action::

Optional Chaining

* Optional Chaining as an Alternative to Forced Unwrapping::
* Defining Model Classes for Optional Chaining::
* Accessing Properties Through Optional Chaining::
* Calling Methods Through Optional Chaining::
* Accessing Subscripts Through Optional Chaining::
* Linking Multiple Levels of Chaining::
* Chaining on Methods with Optional Return Values::

Accessing Subscripts Through Optional Chaining

* Accessing Subscripts of Optional Type::

Error Handling

* Representing and Throwing Errors::
* Handling Errors::
* Specifying Cleanup Actions::

Handling Errors

* Propagating Errors Using Throwing Functions::
* Handling Errors Using Do-Catch::
* Converting Errors to Optional Values::
* Disabling Error Propagation::

Type Casting

* Defining a Class Hierarchy for Type Casting::
* Checking Type::
* Downcasting::
* Type Casting for Any and AnyObject::

Nested Types

* Nested Types in Action::
* Referring to Nested Types::

Extensions

* Extension Syntax::
* Computed Properties: Computed Properties 1.
* Initializers: Initializers 1.
* Methods: Methods 1.
* Subscripts: Subscripts 1.
* Nested Types: Nested Types 1.

Methods

* Mutating Instance Methods::

Protocols

* Protocol Syntax::
* Property Requirements::
* Method Requirements::
* Mutating Method Requirements::
* Initializer Requirements::
* Protocols as Types::
* Delegation::
* Adding Protocol Conformance with an Extension::
* Collections of Protocol Types::
* Protocol Inheritance::
* Class-Only Protocols::
* Protocol Composition::
* Checking for Protocol Conformance::
* Optional Protocol Requirements::
* Protocol Extensions::

Initializer Requirements

* Class Implementations of Protocol Initializer Requirements::
* Failable Initializer Requirements::

Adding Protocol Conformance with an Extension

* Conditionally Conforming to a Protocol::
* Declaring Protocol Adoption with an Extension::

Protocol Extensions

* Providing Default Implementations::
* Adding Constraints to Protocol Extensions::

Generics

* The Problem That Generics Solve::
* Generic Functions::
* Type Parameters::
* Naming Type Parameters::
* Generic Types::
* Extending a Generic Type::
* Type Constraints::
* Associated Types::
* Generic Where Clauses::
* Extensions with a Generic Where Clause::
* Associated Types with a Generic Where Clause::
* Generic Subscripts::

Type Constraints

* Type Constraint Syntax::
* Type Constraints in Action::

Associated Types

* Associated Types in Action::
* Extending an Existing Type to Specify an Associated Type::
* Adding Constraints to an Associated Type::
* Using a Protocol in Its Associated Type's Constraints::

Automatic Reference Counting

* How ARC Works::
* ARC in Action::
* Strong Reference Cycles Between Class Instances::
* Resolving Strong Reference Cycles Between Class Instances::
* Strong Reference Cycles for Closures::
* Resolving Strong Reference Cycles for Closures::

Resolving Strong Reference Cycles Between Class Instances

* Weak References::
* Unowned References::
* Unowned References and Implicitly Unwrapped Optional Properties::

Resolving Strong Reference Cycles for Closures

* Defining a Capture List::
* Weak and Unowned References::

Memory Safety

* Understanding Conflicting Access to Memory::
* Conflicting Access to In-Out Parameters::
* Conflicting Access to self in Methods::
* Conflicting Access to Properties::

Understanding Conflicting Access to Memory

* Characteristics of Memory Access::

Access Control

* Modules and Source Files::
* Access Levels::
* Access Control Syntax::
* Custom Types::
* Subclassing: Subclassing 1.
* Constants, Variables, Properties, and Subscripts: Constants Variables Properties and Subscripts.
* Initializers: Initializers 2.
* Protocols: Protocols 1.
* Extensions: Extensions 1.
* Generics: Generics 2.
* Type Aliases: Type Aliases 1.

Access Levels

* Guiding Principle of Access Levels::
* Default Access Levels::
* Access Levels for Single-Target Apps::
* Access Levels for Frameworks::
* Access Levels for Unit Test Targets::

Custom Types

* Tuple Types::
* Function Types: Function Types 1.
* Enumeration Types::
* Nested Types: Nested Types 2.

Constants, Variables, Properties, and Subscripts

* Getters and Setters::

Initializers

* Default Initializers: Default Initializers 1.
* Default Memberwise Initializers for Structure Types::

Protocols

* Protocol Inheritance: Protocol Inheritance 1.
* Protocol Conformance::

Extensions

* Private Members in Extensions::

Advanced Operators

* Bitwise Operators::
* Overflow Operators::
* Precedence and Associativity::
* Operator Methods: Operator Methods 1.
* Custom Operators::

Bitwise Operators

* Bitwise NOT Operator::
* Bitwise AND Operator::
* Bitwise OR Operator::
* Bitwise XOR Operator::
* Bitwise Left and Right Shift Operators::

Overflow Operators

* Value Overflow::

Operator Methods

* Prefix and Postfix Operators::
* Compound Assignment Operators: Compound Assignment Operators 1.
* Equivalence Operators::

Custom Operators

* Precedence for Custom Infix Operators::

@end detailmenu
@end menu

@node Welcome to Swift
@chapter Welcome to Swift

@itemize
@item
@ref{About Swift}
@item
@ref{Version Compatibility}
@item
@ref{A Swift Tour}
@end itemize

@node About Swift
@chapter About Swift

Swift is a fantastic way to write software, whether it's for phones,
desktops, servers, or anything else that runs code. It's a safe, fast,
and interactive programming language that combines the best in modern
language thinking with wisdom from the wider Apple engineering culture
and the diverse contributions from its open-source community. The
compiler is optimized for performance and the language is optimized for
development, without compromising on either.

Swift is friendly to new programmers. It's an industrial-quality
programming language that's as expressive and enjoyable as a scripting
language. Writing Swift code in a playground lets you experiment with
code and see the results immediately, without the overhead of building
and running an app.

Swift defines away large classes of common programming errors by
adopting modern programming patterns:

@itemize
@item
Variables are always initialized before use.

@item
Array indices are checked for out-of-bounds errors.

@item
Integers are checked for overflow.

@item
Optionals ensure that @samp{nil} values are handled explicitly.

@item
Memory is managed automatically.

@item
Error handling allows controlled recovery from unexpected failures.
@end itemize

Swift code is compiled and optimized to get the most out of modern
hardware. The syntax and standard library have been designed based on
the guiding principle that the obvious way to write your code should
also perform the best. Its combination of safety and speed make Swift an
excellent choice for everything from “Hello, world!” to an entire
operating system.

Swift combines powerful type inference and pattern matching with a
modern, lightweight syntax, allowing complex ideas to be expressed in a
clear and concise manner. As a result, code is not just easier to write,
but easier to read and maintain as well.

Swift has been years in the making, and it continues to evolve with new
features and capabilities. Our goals for Swift are ambitious. We can't
wait to see what you create with it.

@node Version Compatibility
@chapter Version Compatibility

This book describes Swift 5, the default version of Swift that's
included in Xcode 10.2. You can use Xcode 10.2 to build targets that are
written in either Swift 5, Swift 4.2, or Swift 4.

When you use Xcode 10.2 to build Swift 4 and Swift 4.2 code, most Swift
5 functionality is available. That said, the following changes are
available only to Swift 5 code:

@itemize
@item
The @samp{try?} expression doesn't introduce an extra level of optionality
to expressions that already return optionals.

@item
Large integer literal initialization expressions are inferred to be of
the correct integer type. For example, @samp{UInt64(0xffff_ffff_ffff_ffff)}
evaluates to the correct value rather than overflowing.
@end itemize

A target written in Swift 5 can depend on a target that's written in
Swift 4.2 or Swift 4, and vice versa. This means, if you have a large
project that's divided into multiple frameworks, you can migrate your
code from Swift 4 to Swift 5 one framework at a time.

@node A Swift Tour
@chapter A Swift Tour

Tradition suggests that the first program in a new language should print
the words “Hello, world!” on the screen. In Swift, this can be done in a
single line:

@example
print("Hello, world!")
// Prints "Hello, world!"
@end example

If you have written code in C or Objective-C, this syntax looks familiar
to you---in Swift, this line of code is a complete program. You don't
need to import a separate library for functionality like input/output or
string handling. Code written at global scope is used as the entry point
for the program, so you don't need a @samp{main()} function. You also don't
need to write semicolons at the end of every statement.

This tour gives you enough information to start writing code in Swift by
showing you how to accomplish a variety of programming tasks. Don't
worry if you don't understand something---everything introduced in this
tour is explained in detail in the rest of this book.

Note

On a Mac with Xcode installed, or on an iPad with Swift Playgrounds, you
can open this chapter as a playground. Playgrounds allow you to edit the
code listings and see the result immediately.

@uref{https://docs.swift.org/swift-book/GuidedTour/GuidedTour.playground.zip, Download
Playground}
[@uref{https://docs.swift.org/swift-book/GuidedTour/GuidedTour.playground.zip}]

@menu
* Simple Values::
* Control Flow::
* Functions and Closures::
* Objects and Classes::
* Enumerations and Structures::
* Protocols and Extensions::
* Error Handling::
* Generics::
@end menu

@node Simple Values
@section Simple Values

Use @samp{let} to make a constant and @samp{var} to make a variable. The value of
a constant doesn't need to be known at compile time, but you must assign
it a value exactly once. This means you can use constants to name a
value that you determine once but use in many places.

@example
var myVariable = 42
myVariable = 50
let myConstant = 42
@end example

A constant or variable must have the same type as the value you want to
assign to it. However, you don't always have to write the type
explicitly. Providing a value when you create a constant or variable
lets the compiler infer its type. In the example above, the compiler
infers that @samp{myVariable} is an integer because its initial value is an
integer.

If the initial value doesn't provide enough information (or if there is
no initial value), specify the type by writing it after the variable,
separated by a colon.

@example
let implicitInteger = 70
let implicitDouble = 70.0
let explicitDouble: Double = 70
@end example

Experiment

Create a constant with an explicit type of @samp{Float} and a value of @samp{4}.

Values are never implicitly converted to another type. If you need to
convert a value to a different type, explicitly make an instance of the
desired type.

@example
let label = "The width is "
let width = 94
let widthLabel = label + String(width)
@end example

Experiment

Try removing the conversion to @samp{String} from the last line. What error
do you get?

There's an even simpler way to include values in strings: Write the
value in parentheses, and write a backslash (@samp{\}) before the
parentheses. For example:

@example
let apples = 3
let oranges = 5
let appleSummary = "I have \(apples) apples."
let fruitSummary = "I have \(apples + oranges) pieces of fruit."
@end example

Experiment

Use @samp{\()} to include a floating-point calculation in a string and to
include someone's name in a greeting.

Use three double quotation marks (@samp{"""}) for strings that take up
multiple lines. Indentation at the start of each quoted line is removed,
as long as it matches the indentation of the closing quotation marks.
For example:

@example
let quotation = """
I said "I have \(apples) apples."
And then I said "I have \(apples + oranges) pieces of fruit."
"""
@end example

Create arrays and dictionaries using brackets (@samp{[]}), and access their
elements by writing the index or key in brackets. A comma is allowed
after the last element.

@example
var shoppingList = ["catfish", "water", "tulips"]
shoppingList[1] = "bottle of water"

var occupations = [
  "Malcolm": "Captain",
  "Kaylee": "Mechanic",
]
occupations["Jayne"] = "Public Relations"
@end example

Arrays automatically grow as you add elements.

@example
shoppingList.append("blue paint")
print(shoppingList)
@end example

To create an empty array or dictionary, use the initializer syntax.

@example
let emptyArray = [String]()
let emptyDictionary = [String: Float]()
@end example

If type information can be inferred, you can write an empty array as
@samp{[]} and an empty dictionary as @samp{[:]}---for example, when you set a new
value for a variable or pass an argument to a function.

@example
shoppingList = []
occupations = [:]
@end example

@node Control Flow
@section Control Flow

Use @samp{if} and @samp{switch} to make conditionals, and use @samp{for}-@samp{in}, @samp{while},
and @samp{repeat}-@samp{while} to make loops. Parentheses around the condition or
loop variable are optional. Braces around the body are required.

@example
let individualScores = [75, 43, 103, 87, 12]
var teamScore = 0
for score in individualScores @{
    if score > 50 @{
        teamScore += 3
    @} else @{
        teamScore += 1
    @}
@}
print(teamScore)
// Prints "11"
@end example

In an @samp{if} statement, the conditional must be a Boolean
expression---this means that code such as @samp{if score @{ ... @}} is an
error, not an implicit comparison to zero.

You can use @samp{if} and @samp{let} together to work with values that might be
missing. These values are represented as optionals. An optional value
either contains a value or contains @samp{nil} to indicate that a value is
missing. Write a question mark (@samp{?}) after the type of a value to mark
the value as optional.

@example
var optionalString: String? = "Hello"
print(optionalString == nil)
// Prints "false"

var optionalName: String? = "John Appleseed"
var greeting = "Hello!"
if let name = optionalName @{
    greeting = "Hello, \(name)"
@}
@end example

Experiment

Change @samp{optionalName} to @samp{nil}. What greeting do you get? Add an @samp{else}
clause that sets a different greeting if @samp{optionalName} is @samp{nil}.

If the optional value is @samp{nil}, the conditional is @samp{false} and the code
in braces is skipped. Otherwise, the optional value is unwrapped and
assigned to the constant after @samp{let}, which makes the unwrapped value
available inside the block of code.

Another way to handle optional values is to provide a default value
using the @samp{??} operator. If the optional value is missing, the default
value is used instead.

@example
let nickName: String? = nil
let fullName: String = "John Appleseed"
let informalGreeting = "Hi \(nickName ?? fullName)"
@end example

Switches support any kind of data and a wide variety of comparison
operations---they aren't limited to integers and tests for equality.

@example
let vegetable = "red pepper"
switch vegetable @{
case "celery":
    print("Add some raisins and make ants on a log.")
case "cucumber", "watercress":
    print("That would make a good tea sandwich.")
case let x where x.hasSuffix("pepper"):
    print("Is it a spicy \(x)?")
default:
    print("Everything tastes good in soup.")
@}
// Prints "Is it a spicy red pepper?"
@end example

Experiment

Try removing the default case. What error do you get?

Notice how @samp{let} can be used in a pattern to assign the value that
matched the pattern to a constant.

After executing the code inside the switch case that matched, the
program exits from the switch statement. Execution doesn't continue to
the next case, so there is no need to explicitly break out of the switch
at the end of each case's code.

You use @samp{for}-@samp{in} to iterate over items in a dictionary by providing a
pair of names to use for each key-value pair. Dictionaries are an
unordered collection, so their keys and values are iterated over in an
arbitrary order.

@example
let interestingNumbers = [
  "Prime": [2, 3, 5, 7, 11, 13],
  "Fibonacci": [1, 1, 2, 3, 5, 8],
  "Square": [1, 4, 9, 16, 25],
]
var largest = 0
for (kind, numbers) in interestingNumbers @{
    for number in numbers @{
        if number > largest @{
            largest = number
        @}
    @}
@}
print(largest)
// Prints "25"
@end example

Experiment

Add another variable to keep track of which kind of number was the
largest, as well as what that largest number was.

Use @samp{while} to repeat a block of code until a condition changes. The
condition of a loop can be at the end instead, ensuring that the loop is
run at least once.

@example
var n = 2
while n < 100 @{
    n *= 2
@}
print(n)
// Prints "128"

var m = 2
repeat @{
    m *= 2
@} while m < 100
print(m)
// Prints "128"
@end example

You can keep an index in a loop by using @samp{..<} to make a range of
indexes.

@example
var total = 0
for i in 0..<4 @{
    total += i
@}
print(total)
// Prints "6"
@end example

Use @samp{..<} to make a range that omits its upper value, and use @samp{...} to
make a range that includes both values.

@node Functions and Closures
@section Functions and Closures

Use @samp{func} to declare a function. Call a function by following its name
with a list of arguments in parentheses. Use @samp{->} to separate the
parameter names and types from the function's return type.

@example
func greet(person: String, day: String) -> String @{
    return "Hello \(person), today is \(day)."
@}
greet(person: "Bob", day: "Tuesday")
@end example

Experiment

Remove the @samp{day} parameter. Add a parameter to include today's lunch
special in the greeting.

By default, functions use their parameter names as labels for their
arguments. Write a custom argument label before the parameter name, or
write @samp{_} to use no argument label.

@example
func greet(_ person: String, on day: String) -> String @{
    return "Hello \(person), today is \(day)."
@}
greet("John", on: "Wednesday")
@end example

Use a tuple to make a compound value---for example, to return multiple
values from a function. The elements of a tuple can be referred to
either by name or by number.

@example
func calculateStatistics(scores: [Int]) -> (min: Int, max: Int, sum: Int) @{
    var min = scores[0]
    var max = scores[0]
    var sum = 0

    for score in scores @{
        if score > max @{
            max = score
        @} else if score < min @{
            min = score
        @}
        sum += score
    @}

    return (min, max, sum)
@}
let statistics = calculateStatistics(scores: [5, 3, 100, 3, 9])
print(statistics.sum)
// Prints "120"
print(statistics.2)
// Prints "120"
@end example

Functions can be nested. Nested functions have access to variables that
were declared in the outer function. You can use nested functions to
organize the code in a function that is long or complex.

@example
func returnFifteen() -> Int @{
    var y = 10
    func add() @{
        y += 5
    @}
    add()
    return y
@}
returnFifteen()
@end example

Functions are a first-class type. This means that a function can return
another function as its value.

@example
func makeIncrementer() -> ((Int) -> Int) @{
    func addOne(number: Int) -> Int @{
        return 1 + number
    @}
    return addOne
@}
var increment = makeIncrementer()
increment(7)
@end example

A function can take another function as one of its arguments.

@example
func hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool @{
    for item in list @{
        if condition(item) @{
            return true
        @}
    @}
    return false
@}
func lessThanTen(number: Int) -> Bool @{
    return number < 10
@}
var numbers = [20, 19, 7, 12]
hasAnyMatches(list: numbers, condition: lessThanTen)
@end example

Functions are actually a special case of closures: blocks of code that
can be called later. The code in a closure has access to things like
variables and functions that were available in the scope where the
closure was created, even if the closure is in a different scope when it
is executed---you saw an example of this already with nested functions.
You can write a closure without a name by surrounding code with braces
(@samp{@{@}}). Use @samp{in} to separate the arguments and return type from the
body.

@example
numbers.map(@{ (number: Int) -> Int in
                let result = 3 * number
                return result
            @})
@end example

Experiment

Rewrite the closure to return zero for all odd numbers.

You have several options for writing closures more concisely. When a
closure's type is already known, such as the callback for a delegate,
you can omit the type of its parameters, its return type, or both.
Single statement closures implicitly return the value of their only
statement.

@example
let mappedNumbers = numbers.map(@{ number in 3 * number @})
print(mappedNumbers)
// Prints "[60, 57, 21, 36]"
@end example

You can refer to parameters by number instead of by name---this approach
is especially useful in very short closures. A closure passed as the
last argument to a function can appear immediately after the
parentheses. When a closure is the only argument to a function, you can
omit the parentheses entirely.

@example
let sortedNumbers = numbers.sorted @{ $0 > $1 @}
print(sortedNumbers)
// Prints "[20, 19, 12, 7]"
@end example

@node Objects and Classes
@section Objects and Classes

@findex class

Use @samp{class} followed by the class's name to create a class. A property
declaration in a class is written the same way as a constant or variable
declaration, except that it is in the context of a class. Likewise,
method and function declarations are written the same way.

@example
class Shape @{
    var numberOfSides = 0
    func simpleDescription() -> String @{
        return "A shape with \(numberOfSides) sides."
    @}
@}
@end example

Experiment

Add a constant property with @samp{let}, and add another method that takes an
argument.

Create an instance of a class by putting parentheses after the class
name. Use dot syntax to access the properties and methods of the
instance.

@example
var shape = Shape()
shape.numberOfSides = 7
var shapeDescription = shape.simpleDescription()
@end example

This version of the @samp{Shape} class is missing something important: an
initializer to set up the class when an instance is created. Use @samp{init}
to create one.

@example
class NamedShape @{
    var numberOfSides: Int = 0
    var name: String

    init(name: String) @{
        self.name = name
    @}

    func simpleDescription() -> String @{
        return "A shape with \(numberOfSides) sides."
    @}
@}
@end example

Notice how @samp{self} is used to distinguish the @samp{name} property from the
@samp{name} argument to the initializer. The arguments to the initializer are
passed like a function call when you create an instance of the class.
Every property needs a value assigned---either in its declaration (as
with @samp{numberOfSides}) or in the initializer (as with @samp{name}).

Use @samp{deinit} to create a deinitializer if you need to perform some
cleanup before the object is deallocated.

Subclasses include their superclass name after their class name,
separated by a colon. There is no requirement for classes to subclass
any standard root class, so you can include or omit a superclass as
needed.

Methods on a subclass that override the superclass's implementation are
marked with @samp{override}---overriding a method by accident, without
@samp{override}, is detected by the compiler as an error. The compiler also
detects methods with @samp{override} that don't actually override any method
in the superclass.

@example
class Square: NamedShape @{
    var sideLength: Double

    init(sideLength: Double, name: String) @{
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 4
    @}

    func area() -> Double @{
        return sideLength * sideLength
    @}

    override func simpleDescription() -> String @{
        return "A square with sides of length \(sideLength)."
    @}
@}
let test = Square(sideLength: 5.2, name: "my test square")
test.area()
test.simpleDescription()
@end example

Experiment

Make another subclass of @samp{NamedShape} called @samp{Circle} that takes a
radius and a name as arguments to its initializer. Implement an @samp{area()}
and a @samp{simpleDescription()} method on the @samp{Circle} class.

In addition to simple properties that are stored, properties can have a
getter and a setter.

@example
class EquilateralTriangle: NamedShape @{
    var sideLength: Double = 0.0

    init(sideLength: Double, name: String) @{
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 3
    @}
    var perimeter: Double @{
        get @{
            return 3.0 * sideLength
        @}
        set @{
            sideLength = newValue / 3.0
        @}
    @}

    override func simpleDescription() -> String @{
        return "An equilateral triangle with sides of length \(sideLength)."
    @}
@}
var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")
print(triangle.perimeter)
// Prints "9.3"
triangle.perimeter = 9.9
print(triangle.sideLength)
// Prints "3.3000000000000003"
@end example

In the setter for @samp{perimeter}, the new value has the implicit name
@samp{newValue}. You can provide an explicit name in parentheses after @samp{set}.

Notice that the initializer for the @samp{EquilateralTriangle} class has
three different steps:

@enumerate
@item
Setting the value of properties that the subclass declares.

@item
Calling the superclass's initializer.

@item
Changing the value of properties defined by the superclass. Any
additional setup work that uses methods, getters, or setters can also
be done at this point.
@end enumerate

If you don't need to compute the property but still need to provide code
that is run before and after setting a new value, use @samp{willSet} and
@samp{didSet}. The code you provide is run any time the value changes outside
of an initializer. For example, the class below ensures that the side
length of its triangle is always the same as the side length of its
square.

@example
class TriangleAndSquare @{
    var triangle: EquilateralTriangle @{
        willSet @{
            square.sideLength = newValue.sideLength
        @}
    @}
    var square: Square @{
        willSet @{
            triangle.sideLength = newValue.sideLength
        @}
    @}
    init(size: Double, name: String) @{
        square = Square(sideLength: size, name: name)
        triangle = EquilateralTriangle(sideLength: size, name: name)
    @}
@}
var triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")
print(triangleAndSquare.square.sideLength)
// Prints "10.0"
print(triangleAndSquare.triangle.sideLength)
// Prints "10.0"
triangleAndSquare.square = Square(sideLength: 50, name: "larger square")
print(triangleAndSquare.triangle.sideLength)
// Prints "50.0"
@end example

When working with optional values, you can write @samp{?} before operations
like methods, properties, and subscripting. If the value before the @samp{?}
is @samp{nil}, everything after the @samp{?} is ignored and the value of the whole
expression is @samp{nil}. Otherwise, the optional value is unwrapped, and
everything after the @samp{?} acts on the unwrapped value. In both cases, the
value of the whole expression is an optional value.

@example
let optionalSquare: Square? = Square(sideLength: 2.5, name: "optional square")
let sideLength = optionalSquare?.sideLength
@end example

@node Enumerations and Structures
@section Enumerations and Structures

@findex enum

Use @samp{enum} to create an enumeration. Like classes and all other named
types, enumerations can have methods associated with them.

@example
enum Rank: Int @{
    case ace = 1
    case two, three, four, five, six, seven, eight, nine, ten
    case jack, queen, king

    func simpleDescription() -> String @{
        switch self @{
        case .ace:
            return "ace"
        case .jack:
            return "jack"
        case .queen:
            return "queen"
        case .king:
            return "king"
        default:
            return String(self.rawValue)
        @}
    @}
@}
let ace = Rank.ace
let aceRawValue = ace.rawValue
@end example

Experiment

Write a function that compares two @samp{Rank} values by comparing their raw
values.

By default, Swift assigns the raw values starting at zero and
incrementing by one each time, but you can change this behavior by
explicitly specifying values. In the example above, @samp{Ace} is explicitly
given a raw value of @samp{1}, and the rest of the raw values are assigned in
order. You can also use strings or floating-point numbers as the raw
type of an enumeration. Use the @samp{rawValue} property to access the raw
value of an enumeration case.

Use the @samp{init?(rawValue:)} initializer to make an instance of an
enumeration from a raw value. It returns either the enumeration case
matching the raw value or @samp{nil} if there is no matching @samp{Rank}.

@example
if let convertedRank = Rank(rawValue: 3) @{
    let threeDescription = convertedRank.simpleDescription()
@}
@end example

The case values of an enumeration are actual values, not just another
way of writing their raw values. In fact, in cases where there isn't a
meaningful raw value, you don't have to provide one.

@example
enum Suit @{
    case spades, hearts, diamonds, clubs

    func simpleDescription() -> String @{
        switch self @{
        case .spades:
            return "spades"
        case .hearts:
            return "hearts"
        case .diamonds:
            return "diamonds"
        case .clubs:
            return "clubs"
        @}
    @}
@}
let hearts = Suit.hearts
let heartsDescription = hearts.simpleDescription()
@end example

Experiment

Add a @samp{color()} method to @samp{Suit} that returns “black” for spades and
clubs, and returns “red” for hearts and diamonds.

Notice the two ways that the @samp{hearts} case of the enumeration is
referred to above: When assigning a value to the @samp{hearts} constant, the
enumeration case @samp{Suit.hearts} is referred to by its full name because
the constant doesn't have an explicit type specified. Inside the switch,
the enumeration case is referred to by the abbreviated form @samp{.hearts}
because the value of @samp{self} is already known to be a suit. You can use
the abbreviated form anytime the value's type is already known.

If an enumeration has raw values, those values are determined as part of
the declaration, which means every instance of a particular enumeration
case always has the same raw value. Another choice for enumeration cases
is to have values associated with the case---these values are determined
when you make the instance, and they can be different for each instance
of an enumeration case. You can think of the associated values as
behaving like stored properties of the enumeration case instance. For
example, consider the case of requesting the sunrise and sunset times
from a server. The server either responds with the requested
information, or it responds with a description of what went wrong.

@example
enum ServerResponse @{
    case result(String, String)
    case failure(String)
@}

let success = ServerResponse.result("6:00 am", "8:09 pm")
let failure = ServerResponse.failure("Out of cheese.")

switch success @{
case let .result(sunrise, sunset):
    print("Sunrise is at \(sunrise) and sunset is at \(sunset).")
case let .failure(message):
    print("Failure... \(message)")
@}
// Prints "Sunrise is at 6:00 am and sunset is at 8:09 pm."
@end example

Experiment

Add a third case to @samp{ServerResponse} and to the switch.

Notice how the sunrise and sunset times are extracted from the
@samp{ServerResponse} value as part of matching the value against the switch
cases.

Use @samp{struct} to create a structure. Structures support many of the same
behaviors as classes, including methods and initializers. One of the
most important differences between structures and classes is that
structures are always copied when they are passed around in your code,
but classes are passed by reference.

@example
struct Card @{
    var rank: Rank
    var suit: Suit
    func simpleDescription() -> String @{
        return "The \(rank.simpleDescription()) of
          \(suit.simpleDescription())"
    @}
@}
let threeOfSpades = Card(rank: .three, suit: .spades)
let threeOfSpadesDescription = threeOfSpades.simpleDescription()
@end example

Experiment

Write a function that returns an array containing a full deck of cards,
with one card of each combination of rank and suit.

@node Protocols and Extensions
@section Protocols and Extensions

Use @samp{protocol} to declare a protocol.

@example
protocol ExampleProtocol @{
    var simpleDescription: String @{ get @}
    mutating func adjust()
@}
@end example

Classes, enumerations, and structs can all adopt protocols.

@example
class SimpleClass: ExampleProtocol @{
    var simpleDescription: String = "A very simple class."
    var anotherProperty: Int = 69105
    func adjust() @{
        simpleDescription += " Now 100% adjusted."
    @}
@}
var a = SimpleClass()
a.adjust()
let aDescription = a.simpleDescription

struct SimpleStructure: ExampleProtocol @{
    var simpleDescription: String = "A simple structure"
    mutating func adjust() @{
        simpleDescription += " (adjusted)"
    @}
@}
var b = SimpleStructure()
b.adjust()
let bDescription = b.simpleDescription
@end example

Experiment

Add another requirement to @samp{ExampleProtocol}. What changes do you need
to make to @samp{SimpleClass} and @samp{SimpleStructure} so that they still
conform to the protocol?

Notice the use of the @samp{mutating} keyword in the declaration of
@samp{SimpleStructure} to mark a method that modifies the structure. The
declaration of @samp{SimpleClass} doesn't need any of its methods marked as
mutating because methods on a class can always modify the class.

@findex extension

Use @samp{extension} to add functionality to an existing type, such as new
methods and computed properties. You can use an extension to add
protocol conformance to a type that is declared elsewhere, or even to a
type that you imported from a library or framework.

@example
extension Int: ExampleProtocol @{
    var simpleDescription: String @{
        return "The number \(self)"
    @}
    mutating func adjust() @{
        self += 42
    @}
@}
print(7.simpleDescription)
// Prints "The number 7"
@end example

Experiment

Write an extension for the @samp{Double} type that adds an @samp{absoluteValue}
property.

You can use a protocol name just like any other named type---for
example, to create a collection of objects that have different types but
that all conform to a single protocol. When you work with values whose
type is a protocol type, methods outside the protocol definition are not
available.

@example
let protocolValue: ExampleProtocol = a
print(protocolValue.simpleDescription)
// Prints "A very simple class. Now 100% adjusted."
// print(protocolValue.anotherProperty) // Uncomment to see the error
@end example

Even though the variable @samp{protocolValue} has a runtime type of
@samp{SimpleClass}, the compiler treats it as the given type of
@samp{ExampleProtocol}. This means that you can't accidentally access methods
or properties that the class implements in addition to its protocol
conformance.

@node Error Handling
@section Error Handling

You represent errors using any type that adopts the @samp{Error} protocol.

@example
enum PrinterError: Error @{
    case outOfPaper
    case noToner
    case onFire
@}
@end example

Use @samp{throw} to throw an error and @samp{throws} to mark a function that can
throw an error. If you throw an error in a function, the function
returns immediately and the code that called the function handles the
error.

@example
func send(job: Int, toPrinter printerName: String) throws -> String @{
    if printerName == "Never Has Toner" @{
        throw PrinterError.noToner
    @}
    return "Job sent"
@}
@end example

There are several ways to handle errors. One way is to use @samp{do}-@samp{catch}.
Inside the @samp{do} block, you mark code that can throw an error by writing
@samp{try} in front of it. Inside the @samp{catch} block, the error is
automatically given the name @samp{error} unless you give it a different
name.

@example
do @{
    let printerResponse = try send(job: 1040, toPrinter: "Bi Sheng")
    print(printerResponse)
@} catch @{
    print(error)
@}
// Prints "Job sent"
@end example

Experiment

Change the printer name to @samp{"Never Has Toner"}, so that the
@samp{send(job:toPrinter:)} function throws an error.

You can provide multiple @samp{catch} blocks that handle specific errors. You
write a pattern after @samp{catch} just as you do after @samp{case} in a switch.

@example
do @{
    let printerResponse = try send(job: 1440, toPrinter: "Gutenberg")
    print(printerResponse)
@} catch PrinterError.onFire @{
    print("I'll just put this over here, with the rest of the fire.")
@} catch let printerError as PrinterError @{
    print("Printer error: \(printerError).")
@} catch @{
    print(error)
@}
// Prints "Job sent"
@end example

Experiment

Add code to throw an error inside the @samp{do} block. What kind of error do
you need to throw so that the error is handled by the first @samp{catch}
block? What about the second and third blocks?

Another way to handle errors is to use @samp{try?} to convert the result to
an optional. If the function throws an error, the specific error is
discarded and the result is @samp{nil}. Otherwise, the result is an optional
containing the value that the function returned.

@example
let printerSuccess = try? send(job: 1884, toPrinter: "Mergenthaler")
let printerFailure = try? send(job: 1885, toPrinter: "Never Has Toner")
@end example

Use @samp{defer} to write a block of code that is executed after all other
code in the function, just before the function returns. The code is
executed regardless of whether the function throws an error. You can use
@samp{defer} to write setup and cleanup code next to each other, even though
they need to be executed at different times.

@example
var fridgeIsOpen = false
let fridgeContent = ["milk", "eggs", "leftovers"]

func fridgeContains(_ food: String) -> Bool @{
    fridgeIsOpen = true
    defer @{
        fridgeIsOpen = false
    @}

    let result = fridgeContent.contains(food)
    return result
@}
fridgeContains("banana")
print(fridgeIsOpen)
// Prints "false"
@end example

@node Generics
@section Generics

Write a name inside angle brackets to make a generic function or type.

@example
func makeArray<Item>(repeating item: Item, numberOfTimes: Int) -> [Item] @{
    var result = [Item]()
    for _ in 0..<numberOfTimes @{
        result.append(item)
    @}
    return result
@}
makeArray(repeating: "knock", numberOfTimes: 4)
@end example

You can make generic forms of functions and methods, as well as classes,
enumerations, and structures.

@example
// Reimplement the Swift standard library's optional type
enum OptionalValue<Wrapped> @{
    case none
    case some(Wrapped)
@}
var possibleInteger: OptionalValue<Int> = .none
possibleInteger = .some(100)
@end example

Use @samp{where} right before the body to specify a list of
requirements---for example, to require the type to implement a protocol,
to require two types to be the same, or to require a class to have a
particular superclass.

@example
func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> Bool where T.Element: Equatable, T.Element == U.Element
@{
    for lhsItem in lhs @{
        for rhsItem in rhs @{
            if lhsItem == rhsItem @{
                return true
            @}
        @}
    @}
    return false
@}
anyCommonElements([1, 2, 3], [3])
@end example

Experiment

Modify the @samp{anyCommonElements(_:_:)} function to make a function that
returns an array of the elements that any two sequences have in common.

Writing @samp{<T: Equatable>} is the same as writing
@samp{<T> ... where T: Equatable}.

@node Language Guide
@chapter Language Guide

@itemize
@item
@ref{The Basics}
@item
@ref{Basic Operators}
@item
@ref{Strings and Characters}
@item
@ref{Collection Types}
@item
@ref{Control Flow}
@item
@ref{Functions}
@item
@ref{Closures}
@item
@ref{Enumeration}
@item
@ref{Structures and Classes}
@item
@ref{Properties}
@item
@ref{Methods}
@item
@ref{Subscripts}
@item
@ref{Inheritance}
@item
@ref{Initialization}
@item
@ref{Deinitialization}
@item
@ref{Optional Chaining}
@item
@ref{Error Handling}
@item
@ref{Type Casting}
@item
@ref{Nested Types}
@item
@ref{Extensions}
@item
@ref{Protocols}
@item
@ref{Generics}
@item
@ref{Automatic Reference Counting}
@item
@ref{Memory Safety}
@item
@ref{Access Control}
@item
@ref{Advanced Operators}
@end itemize

@node The Basics
@chapter The Basics

Swift is a new programming language for iOS, macOS, watchOS, and tvOS
app development. Nonetheless, many parts of Swift will be familiar from
your experience of developing in C and Objective-C.

Swift provides its own versions of all fundamental C and Objective-C
types, including @samp{Int} for integers, @samp{Double} and @samp{Float} for
floating-point values, @samp{Bool} for Boolean values, and @samp{String} for
textual data. Swift also provides powerful versions of the three primary
collection types, @samp{Array}, @samp{Set}, and @samp{Dictionary}, as described in
@ref{Collection Types}.

Like C, Swift uses variables to store and refer to values by an
identifying name. Swift also makes extensive use of variables whose
values can't be changed. These are known as constants, and are much more
powerful than constants in C. Constants are used throughout Swift to
make code safer and clearer in intent when you work with values that
don't need to change.

In addition to familiar types, Swift introduces advanced types not found
in Objective-C, such as tuples. Tuples enable you to create and pass
around groupings of values. You can use a tuple to return multiple
values from a function as a single compound value.

Swift also introduces optional types, which handle the absence of a
value. Optionals say either “there @emph{is} a value, and it equals @emph{x/” or
“there /isn't} a value at all”. Using optionals is similar to using
@samp{nil} with pointers in Objective-C, but they work for any type, not just
classes. Not only are optionals safer and more expressive than @samp{nil}
pointers in Objective-C, they're at the heart of many of Swift's most
powerful features.

Swift is a @emph{type-safe} language, which means the language helps you to
be clear about the types of values your code can work with. If part of
your code requires a @samp{String}, type safety prevents you from passing it
an @samp{Int} by mistake. Likewise, type safety prevents you from
accidentally passing an optional @samp{String} to a piece of code that
requires a non-optional @samp{String}. Type safety helps you catch and fix
errors as early as possible in the development process.

@menu
* Constants and Variables::
* Comments::
* Semicolons::
* Integers::
* Floating-Point Numbers::
* Type Safety and Type Inference::
* Numeric Literals::
* Numeric Type Conversion::
* Type Aliases::
* Booleans::
* Tuples::
* Optionals::
* Error Handling: Error Handling 1.
* Assertions and Preconditions::
@end menu

@node Constants and Variables
@section Constants and Variables

@findex let
Constants and variables associate a name (such as
@samp{maximumNumberOfLoginAttempts} or @samp{welcomeMessage}) with a value of a
particular type (such as the number @samp{10} or the string @samp{"Hello"}). The
value of a @emph{constant} can't be changed once it's set, whereas a
@emph{variable} can be set to a different value in the future.

@findex var

@menu
* Declaring Constants and Variables::
* Type Annotations::
* Naming Constants and Variables::
* Printing Constants and Variables::
@end menu

@node Declaring Constants and Variables
@subsection Declaring Constants and Variables

Constants and variables must be declared before they're used. You
declare constants with the @samp{let} keyword and variables with the @samp{var}
keyword. Here's an example of how constants and variables can be used to
track the number of login attempts a user has made:

@example
let maximumNumberOfLoginAttempts = 10
var currentLoginAttempt = 0
@end example

This code can be read as:

“Declare a new constant called @samp{maximumNumberOfLoginAttempts}, and give
it a value of @samp{10}. Then, declare a new variable called
@samp{currentLoginAttempt}, and give it an initial value of @samp{0}.”

In this example, the maximum number of allowed login attempts is
declared as a constant, because the maximum value never changes. The
current login attempt counter is declared as a variable, because this
value must be incremented after each failed login attempt.

You can declare multiple constants or multiple variables on a single
line, separated by commas:

@example
var x = 0.0, y = 0.0, z = 0.0
@end example

Note

If a stored value in your code won't change, always declare it as a
constant with the @samp{let} keyword. Use variables only for storing values
that need to be able to change.

@node Type Annotations
@subsection Type Annotations

You can provide a @emph{type annotation} when you declare a constant or
variable, to be clear about the kind of values the constant or variable
can store. Write a type annotation by placing a colon after the constant
or variable name, followed by a space, followed by the name of the type
to use.

This example provides a type annotation for a variable called
@samp{welcomeMessage}, to indicate that the variable can store @samp{String}
values:

@example
var welcomeMessage: String
@end example

The colon in the declaration means “@dots{}of type@dots{},” so the code above
can be read as:

“Declare a variable called @samp{welcomeMessage} that is of type @samp{String}.”

The phrase “of type @samp{String=” means “can store any =String} value.”
Think of it as meaning “the type of thing” (or “the kind of thing”) that
can be stored.

The @samp{welcomeMessage} variable can now be set to any string value without
error:

@example
welcomeMessage = "Hello"
@end example

You can define multiple related variables of the same type on a single
line, separated by commas, with a single type annotation after the final
variable name:

@example
var red, green, blue: Double
@end example

Note

It's rare that you need to write type annotations in practice. If you
provide an initial value for a constant or variable at the point that
it's defined, Swift can almost always infer the type to be used for that
constant or variable, as described in @ref{Type Safety and Type Inference, , Type
Safety and Type Inference}. In the @samp{welcomeMessage} example above, no
initial value is provided, and so the type of the @samp{welcomeMessage}
variable is specified with a type annotation rather than being inferred
from an initial value.

@node Naming Constants and Variables
@subsection Naming Constants and Variables

Constant and variable names can contain almost any character, including
Unicode characters:

@example
let π = 3.14159
let 你好 = "你好世界"
let 🐶🐮 = "dogcow"
@end example

Constant and variable names can't contain whitespace characters,
mathematical symbols, arrows, private-use Unicode scalar values, or
line- and box-drawing characters. Nor can they begin with a number,
although numbers may be included elsewhere within the name.

Once you've declared a constant or variable of a certain type, you can't
declare it again with the same name, or change it to store values of a
different type. Nor can you change a constant into a variable or a
variable into a constant.

Note

If you need to give a constant or variable the same name as a reserved
Swift keyword, surround the keyword with backticks (@samp{`}) when using it
as a name. However, avoid using keywords as names unless you have
absolutely no choice.

You can change the value of an existing variable to another value of a
compatible type. In this example, the value of @samp{friendlyWelcome} is
changed from @samp{"Hello!"} to @samp{"Bonjour!"}:

@example
var friendlyWelcome = "Hello!"
friendlyWelcome = "Bonjour!"
// friendlyWelcome is now "Bonjour!"
@end example

Unlike a variable, the value of a constant can't be changed after it's
set. Attempting to do so is reported as an error when your code is
compiled:

@example
let languageName = "Swift"
languageName = "Swift++"
// This is a compile-time error: languageName cannot be changed.
@end example

@node Printing Constants and Variables
@subsection Printing Constants and Variables

You can print the current value of a constant or variable with the
@samp{print(_:separator:terminator:)} function:

@example
print(friendlyWelcome)
// Prints "Bonjour!"
@end example

The @samp{print(_:separator:terminator:)} function is a global function that
prints one or more values to an appropriate output. In Xcode, for
example, the @samp{print(_:separator:terminator:)} function prints its output
in Xcode's “console” pane. The @samp{separator} and @samp{terminator} parameter
have default values, so you can omit them when you call this function.
By default, the function terminates the line it prints by adding a line
break. To print a value without a line break after it, pass an empty
string as the terminator---for example,
@samp{print(someValue, terminator: "")}. For information about parameters
with default values, see @ref{Default Parameter Values, , Default Parameter
Values}.

Swift uses @emph{string interpolation} to include the name of a constant or
variable as a placeholder in a longer string, and to prompt Swift to
replace it with the current value of that constant or variable. Wrap the
name in parentheses and escape it with a backslash before the opening
parenthesis:

@example
print("The current value of friendlyWelcome is \(friendlyWelcome)")
// Prints "The current value of friendlyWelcome is Bonjour!"
@end example

Note

All options you can use with string interpolation are described in
@ref{String Interpolation}.

@node Comments
@section Comments

Use comments to include nonexecutable text in your code, as a note or
reminder to yourself. Comments are ignored by the Swift compiler when
your code is compiled.

Comments in Swift are very similar to comments in C. Single-line
comments begin with two forward-slashes (@samp{//}):

@example
// This is a comment.
@end example

Multiline comments start with a forward-slash followed by an asterisk
(@samp{/*}) and end with an asterisk followed by a forward-slash (@samp{*/}):

@example
/* This is also a comment
but is written over multiple lines. */
@end example

Unlike multiline comments in C, multiline comments in Swift can be
nested inside other multiline comments. You write nested comments by
starting a multiline comment block and then starting a second multiline
comment within the first block. The second block is then closed,
followed by the first block:

@example
/* This is the start of the first multiline comment.
/* This is the second, nested multiline comment. */
This is the end of the first multiline comment. */
@end example

Nested multiline comments enable you to comment out large blocks of code
quickly and easily, even if the code already contains multiline
comments.

@node Semicolons
@section Semicolons

Unlike many other languages, Swift doesn't require you to write a
semicolon (@samp{;}) after each statement in your code, although you can do
so if you wish. However, semicolons @emph{are} required if you want to write
multiple separate statements on a single line:

@example
let cat = "🐱"; print(cat)
// Prints "🐱"
@end example

@node Integers
@section Integers

@emph{Integers} are whole numbers with no fractional component, such as @samp{42}
and @samp{-23}. Integers are either @emph{signed} (positive, zero, or negative) or
@emph{unsigned} (positive or zero).

Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit
forms. These integers follow a naming convention similar to C, in that
an 8-bit unsigned integer is of type @samp{UInt8}, and a 32-bit signed
integer is of type @samp{Int32}. Like all types in Swift, these integer types
have capitalized names.

@menu
* Integer Bounds::
* Int::
* UInt::
@end menu

@node Integer Bounds
@subsection Integer Bounds

You can access the minimum and maximum values of each integer type with
its @samp{min} and @samp{max} properties:

@example
let minValue = UInt8.min // minValue is equal to 0, and is of type UInt8
let maxValue = UInt8.max // maxValue is equal to 255, and is of type UInt8
@end example

The values of these properties are of the appropriate-sized number type
(such as @samp{UInt8} in the example above) and can therefore be used in
expressions alongside other values of the same type.

@node Int
@subsection Int

In most cases, you don't need to pick a specific size of integer to use
in your code. Swift provides an additional integer type, @samp{Int}, which
has the same size as the current platform's native word size:

@itemize
@item
On a 32-bit platform, @samp{Int} is the same size as @samp{Int32}.

@item
On a 64-bit platform, @samp{Int} is the same size as @samp{Int64}.
@end itemize

Unless you need to work with a specific size of integer, always use
@samp{Int} for integer values in your code. This aids code consistency and
interoperability. Even on 32-bit platforms, @samp{Int} can store any value
between @samp{-2,147,483,648} and @samp{2,147,483,647}, and is large enough for
many integer ranges.

@node UInt
@subsection UInt

Swift also provides an unsigned integer type, @samp{UInt}, which has the same
size as the current platform's native word size:

@itemize
@item
On a 32-bit platform, @samp{UInt} is the same size as @samp{UInt32}.

@item
On a 64-bit platform, @samp{UInt} is the same size as @samp{UInt64}.
@end itemize

Note

Use @samp{UInt} only when you specifically need an unsigned integer type with
the same size as the platform's native word size. If this isn't the
case, @samp{Int} is preferred, even when the values to be stored are known to
be nonnegative. A consistent use of @samp{Int} for integer values aids code
interoperability, avoids the need to convert between different number
types, and matches integer type inference, as described in
@ref{Type Safety and Type Inference}.

@node Floating-Point Numbers
@section Floating-Point Numbers

@emph{Floating-point numbers} are numbers with a fractional component, such
as @samp{3.14159}, @samp{0.1}, and @samp{-273.15}.

Floating-point types can represent a much wider range of values than
integer types, and can store numbers that are much larger or smaller
than can be stored in an @samp{Int}. Swift provides two signed floating-point
number types:

@itemize
@item
@samp{Double} represents a 64-bit floating-point number.

@item
@samp{Float} represents a 32-bit floating-point number.
@end itemize

Note

@samp{Double} has a precision of at least 15 decimal digits, whereas the
precision of @samp{Float} can be as little as 6 decimal digits. The
appropriate floating-point type to use depends on the nature and range
of values you need to work with in your code. In situations where either
type would be appropriate, @samp{Double} is preferred.

@node Type Safety and Type Inference
@section Type Safety and Type Inference

Swift is a @emph{type-safe} language. A type safe language encourages you to
be clear about the types of values your code can work with. If part of
your code requires a @samp{String}, you can't pass it an @samp{Int} by mistake.

Because Swift is type safe, it performs @emph{type checks} when compiling
your code and flags any mismatched types as errors. This enables you to
catch and fix errors as early as possible in the development process.

Type-checking helps you avoid errors when you're working with different
types of values. However, this doesn't mean that you have to specify the
type of every constant and variable that you declare. If you don't
specify the type of value you need, Swift uses @emph{type inference} to work
out the appropriate type. Type inference enables a compiler to deduce
the type of a particular expression automatically when it compiles your
code, simply by examining the values you provide.

Because of type inference, Swift requires far fewer type declarations
than languages such as C or Objective-C. Constants and variables are
still explicitly typed, but much of the work of specifying their type is
done for you.

Type inference is particularly useful when you declare a constant or
variable with an initial value. This is often done by assigning a
@emph{literal value} (or @emph{literal}) to the constant or variable at the point
that you declare it. (A literal value is a value that appears directly
in your source code, such as @samp{42} and @samp{3.14159} in the examples below.)

For example, if you assign a literal value of @samp{42} to a new constant
without saying what type it is, Swift infers that you want the constant
to be an @samp{Int}, because you have initialized it with a number that looks
like an integer:

@example
let meaningOfLife = 42
// meaningOfLife is inferred to be of type Int
@end example

Likewise, if you don't specify a type for a floating-point literal,
Swift infers that you want to create a @samp{Double}:

@example
let pi = 3.14159
// pi is inferred to be of type Double
@end example

Swift always chooses @samp{Double} (rather than @samp{Float}) when inferring the
type of floating-point numbers.

If you combine integer and floating-point literals in an expression, a
type of @samp{Double} will be inferred from the context:

@example
let anotherPi = 3 + 0.14159
// anotherPi is also inferred to be of type Double
@end example

The literal value of @samp{3} has no explicit type in and of itself, and so
an appropriate output type of @samp{Double} is inferred from the presence of
a floating-point literal as part of the addition.

@node Numeric Literals
@section Numeric Literals

Integer literals can be written as:

@itemize
@item
A @emph{decimal} number, with no prefix

@item
A @emph{binary} number, with a @samp{0b} prefix

@item
An @emph{octal} number, with a @samp{0o} prefix

@item
A @emph{hexadecimal} number, with a @samp{0x} prefix
@end itemize

All of these integer literals have a decimal value of @samp{17}:

@example
let decimalInteger = 17
let binaryInteger = 0b10001 // 17 in binary notation
let octalInteger = 0o21 // 17 in octal notation
let hexadecimalInteger = 0x11 // 17 in hexadecimal notation
@end example

Floating-point literals can be decimal (with no prefix), or hexadecimal
(with a @samp{0x} prefix). They must always have a number (or hexadecimal
number) on both sides of the decimal point. Decimal floats can also have
an optional @emph{exponent}, indicated by an uppercase or lowercase @samp{e};
hexadecimal floats must have an exponent, indicated by an uppercase or
lowercase @samp{p}.

For decimal numbers with an exponent of @samp{exp}, the base number is
multiplied by 10@math{^exp}:

@itemize
@item
@samp{1.25e2} means 1.25 x 10@math{^2}, or @samp{125.0}.

@item
@samp{1.25e-2} means 1.25 x 10@math{^-2}, or @samp{0.0125}.
@end itemize

For hexadecimal numbers with an exponent of @samp{exp}, the base number is
multiplied by 2@math{^exp}:

@itemize
@item
@samp{0xFp2} means 15 x 2@math{^2}, or @samp{60.0}.

@item
@samp{0xFp-2} means 15 x 2@math{^-2}, or @samp{3.75}.
@end itemize

All of these floating-point literals have a decimal value of @samp{12.1875}:

@example
let decimalDouble = 12.1875
let exponentDouble = 1.21875e1
let hexadecimalDouble = 0xC.3p0
@end example

Numeric literals can contain extra formatting to make them easier to
read. Both integers and floats can be padded with extra zeros and can
contain underscores to help with readability. Neither type of formatting
affects the underlying value of the literal:

@example
let paddedDouble = 000123.456
let oneMillion = 1_000_000
let justOverOneMillion = 1_000_000.000_000_1
@end example

@node Numeric Type Conversion
@section Numeric Type Conversion

Use the @samp{Int} type for all general-purpose integer constants and
variables in your code, even if they're known to be nonnegative. Using
the default integer type in everyday situations means that integer
constants and variables are immediately interoperable in your code and
will match the inferred type for integer literal values.

Use other integer types only when they're specifically needed for the
task at hand, because of explicitly sized data from an external source,
or for performance, memory usage, or other necessary optimization. Using
explicitly sized types in these situations helps to catch any accidental
value overflows and implicitly documents the nature of the data being
used.

@menu
* Integer Conversion::
* Integer and Floating-Point Conversion::
@end menu

@node Integer Conversion
@subsection Integer Conversion

The range of numbers that can be stored in an integer constant or
variable is different for each numeric type. An @samp{Int8} constant or
variable can store numbers between @samp{-128} and @samp{127}, whereas a @samp{UInt8}
constant or variable can store numbers between @samp{0} and @samp{255}. A number
that won't fit into a constant or variable of a sized integer type is
reported as an error when your code is compiled:

@example
let cannotBeNegative: UInt8 = -1
// UInt8 cannot store negative numbers, and so this will report an error
let tooBig: Int8 = Int8.max + 1
// Int8 cannot store a number larger than its maximum value,
// and so this will also report an error
@end example

Because each numeric type can store a different range of values, you
must opt in to numeric type conversion on a case-by-case basis. This
opt-in approach prevents hidden conversion errors and helps make type
conversion intentions explicit in your code.

To convert one specific number type to another, you initialize a new
number of the desired type with the existing value. In the example
below, the constant @samp{twoThousand} is of type @samp{UInt16}, whereas the
constant @samp{one} is of type @samp{UInt8}. They can't be added together
directly, because they're not of the same type. Instead, this example
calls @samp{UInt16(one)} to create a new @samp{UInt16} initialized with the value
of @samp{one}, and uses this value in place of the original:

@example
let twoThousand: UInt16 = 2_000
let one: UInt8 = 1
let twoThousandAndOne = twoThousand + UInt16(one)
@end example

Because both sides of the addition are now of type @samp{UInt16}, the
addition is allowed. The output constant (@samp{twoThousandAndOne}) is
inferred to be of type @samp{UInt16}, because it's the sum of two @samp{UInt16}
values.

@samp{SomeType(ofInitialValue)} is the default way to call the initializer of
a Swift type and pass in an initial value. Behind the scenes, @samp{UInt16}
has an initializer that accepts a @samp{UInt8} value, and so this initializer
is used to make a new @samp{UInt16} from an existing @samp{UInt8}. You can't pass
in @emph{any} type here, however---it has to be a type for which @samp{UInt16}
provides an initializer. Extending existing types to provide
initializers that accept new types (including your own type definitions)
is covered in @ref{Extensions}.

@node Integer and Floating-Point Conversion
@subsection Integer and Floating-Point Conversion

Conversions between integer and floating-point numeric types must be
made explicit:

@example
let three = 3
let pointOneFourOneFiveNine = 0.14159
let pi = Double(three) + pointOneFourOneFiveNine
// pi equals 3.14159, and is inferred to be of type Double
@end example

Here, the value of the constant @samp{three} is used to create a new value of
type @samp{Double}, so that both sides of the addition are of the same type.
Without this conversion in place, the addition would not be allowed.

Floating-point to integer conversion must also be made explicit. An
integer type can be initialized with a @samp{Double} or @samp{Float} value:

@example
let integerPi = Int(pi)
// integerPi equals 3, and is inferred to be of type Int
@end example

Floating-point values are always truncated when used to initialize a new
integer value in this way. This means that @samp{4.75} becomes @samp{4}, and
@samp{-3.9} becomes @samp{-3}.

Note

The rules for combining numeric constants and variables are different
from the rules for numeric literals. The literal value @samp{3} can be added
directly to the literal value @samp{0.14159}, because number literals don't
have an explicit type in and of themselves. Their type is inferred only
at the point that they're evaluated by the compiler.

@node Type Aliases
@section Type Aliases

@emph{Type aliases} define an alternative name for an existing type. You
define type aliases with the @samp{typealias} keyword.

Type aliases are useful when you want to refer to an existing type by a
name that is contextually more appropriate, such as when working with
data of a specific size from an external source:

@example
typealias AudioSample = UInt16
@end example

Once you define a type alias, you can use the alias anywhere you might
use the original name:

@example
var maxAmplitudeFound = AudioSample.min
// maxAmplitudeFound is now 0
@end example

Here, @samp{AudioSample} is defined as an alias for @samp{UInt16}. Because it's an
alias, the call to @samp{AudioSample.min} actually calls @samp{UInt16.min}, which
provides an initial value of @samp{0} for the @samp{maxAmplitudeFound} variable.

@node Booleans
@section Booleans

Swift has a basic @emph{Boolean} type, called @samp{Bool}. Boolean values are
referred to as @emph{logical}, because they can only ever be true or false.
Swift provides two Boolean constant values, @samp{true} and @samp{false}:

@example
let orangesAreOrange = true
let turnipsAreDelicious = false
@end example

The types of @samp{orangesAreOrange} and @samp{turnipsAreDelicious} have been
inferred as @samp{Bool} from the fact that they were initialized with Boolean
literal values. As with @samp{Int} and @samp{Double} above, you don't need to
declare constants or variables as @samp{Bool} if you set them to @samp{true} or
@samp{false} as soon as you create them. Type inference helps make Swift code
more concise and readable when it initializes constants or variables
with other values whose type is already known.

Boolean values are particularly useful when you work with conditional
statements such as the @samp{if} statement:

@example
if turnipsAreDelicious @{
    print("Mmm, tasty turnips!")
@} else @{
    print("Eww, turnips are horrible.")
@}
// Prints "Eww, turnips are horrible."
@end example

Conditional statements such as the @samp{if} statement are covered in more
detail in @ref{Control Flow}.

Swift's type safety prevents non-Boolean values from being substituted
for @samp{Bool}. The following example reports a compile-time error:

@example
let i = 1
if i @{
    // this example will not compile, and will report an error
@}
@end example

However, the alternative example below is valid:

@example
let i = 1
if i == 1 @{
    // this example will compile successfully
@}
@end example

The result of the @samp{i =} 1= comparison is of type @samp{Bool}, and so this
second example passes the type-check. Comparisons like @samp{i =} 1= are
discussed in @ref{Basic Operators}.

As with other examples of type safety in Swift, this approach avoids
accidental errors and ensures that the intention of a particular section
of code is always clear.

@node Tuples
@section Tuples

@emph{Tuples} group multiple values into a single compound value. The values
within a tuple can be of any type and don't have to be of the same type
as each other.

In this example, @samp{(404, "Not Found")} is a tuple that describes an @emph{HTTP
status code}. An HTTP status code is a special value returned by a web
server whenever you request a web page. A status code of @samp{404 Not Found}
is returned if you request a webpage that doesn't exist.

@example
let http404Error = (404, "Not Found")
// http404Error is of type (Int, String), and equals (404, "Not Found")
@end example

The @samp{(404, "Not Found")} tuple groups together an @samp{Int} and a @samp{String}
to give the HTTP status code two separate values: a number and a
human-readable description. It can be described as “a tuple of type
=(Int, String)=”.

You can create tuples from any permutation of types, and they can
contain as many different types as you like. There's nothing stopping
you from having a tuple of type @samp{(Int, Int, Int)}, or @samp{(String, Bool)},
or indeed any other permutation you require.

You can @emph{decompose} a tuple's contents into separate constants or
variables, which you then access as usual:

@example
let (statusCode, statusMessage) = http404Error
print("The status code is \(statusCode)")
// Prints "The status code is 404"
print("The status message is \(statusMessage)")
// Prints "The status message is Not Found"
@end example

If you only need some of the tuple's values, ignore parts of the tuple
with an underscore (@samp{_}) when you decompose the tuple:

@example
let (justTheStatusCode, _) = http404Error
print("The status code is \(justTheStatusCode)")
// Prints "The status code is 404"
@end example

Alternatively, access the individual element values in a tuple using
index numbers starting at zero:

@example
print("The status code is \(http404Error.0)")
// Prints "The status code is 404"
print("The status message is \(http404Error.1)")
// Prints "The status message is Not Found"
@end example

You can name the individual elements in a tuple when the tuple is
defined:

@example
let http200Status = (statusCode: 200, description: "OK")
@end example

If you name the elements in a tuple, you can use the element names to
access the values of those elements:

@example
print("The status code is \(http200Status.statusCode)")
// Prints "The status code is 200"
print("The status message is \(http200Status.description)")
// Prints "The status message is OK"
@end example

Tuples are particularly useful as the return values of functions. A
function that tries to retrieve a web page might return the
@samp{(Int, String)} tuple type to describe the success or failure of the
page retrieval. By returning a tuple with two distinct values, each of a
different type, the function provides more useful information about its
outcome than if it could only return a single value of a single type.
For more information, see @ref{Functions with Multiple Return Values, , Functions with
Multiple Return Values}.

Note

Tuples are useful for temporary groups of related values. They're not
suited to the creation of complex data structures. If your data
structure is likely to persist beyond a temporary scope, model it as a
class or structure, rather than as a tuple. For more information, see
@ref{Structures and Classes}.

@node Optionals
@section Optionals

You use @emph{optionals} in situations where a value may be absent. An
optional represents two possibilities: Either there @emph{is} a value, and
you can unwrap the optional to access that value, or there @emph{isn't} a
value at all.

Note

The concept of optionals doesn't exist in C or Objective-C. The nearest
thing in Objective-C is the ability to return @samp{nil} from a method that
would otherwise return an object, with @samp{nil} meaning “the absence of a
valid object.” However, this only works for objects---it doesn't work
for structures, basic C types, or enumeration values. For these types,
Objective-C methods typically return a special value (such as
@samp{NSNotFound}) to indicate the absence of a value. This approach assumes
that the method's caller knows there's a special value to test against
and remembers to check for it. Swift's optionals let you indicate the
absence of a value for @emph{any type at all}, without the need for special
constants.

Here's an example of how optionals can be used to cope with the absence
of a value. Swift's @samp{Int} type has an initializer which tries to convert
a @samp{String} value into an @samp{Int} value. However, not every string can be
converted into an integer. The string @samp{"123"} can be converted into the
numeric value @samp{123}, but the string @samp{"hello, world"} doesn't have an
obvious numeric value to convert to.

The example below uses the initializer to try to convert a @samp{String} into
an @samp{Int}:

@example
let possibleNumber = "123"
let convertedNumber = Int(possibleNumber)
// convertedNumber is inferred to be of type "Int?", or "optional Int"
@end example

Because the initializer might fail, it returns an @emph{optional} @samp{Int},
rather than an @samp{Int}. An optional @samp{Int} is written as @samp{Int?}, not @samp{Int}.
The question mark indicates that the value it contains is optional,
meaning that it might contain @emph{some} @samp{Int} value, or it might contain
@emph{no value at all}. (It can't contain anything else, such as a @samp{Bool}
value or a @samp{String} value. It's either an @samp{Int}, or it's nothing at
all.)

@menu
* nil::
* If Statements and Forced Unwrapping::
* Optional Binding::
* Implicitly Unwrapped Optionals::
@end menu

@node nil
@subsection nil

You set an optional variable to a valueless state by assigning it the
special value @samp{nil}:

@example
var serverResponseCode: Int? = 404
// serverResponseCode contains an actual Int value of 404
serverResponseCode = nil
// serverResponseCode now contains no value
@end example

Note

You can't use @samp{nil} with non-optional constants and variables. If a
constant or variable in your code needs to work with the absence of a
value under certain conditions, always declare it as an optional value
of the appropriate type.

If you define an optional variable without providing a default value,
the variable is automatically set to @samp{nil} for you:

@example
var surveyAnswer: String?
// surveyAnswer is automatically set to nil
@end example

Note

Swift's @samp{nil} isn't the same as @samp{nil} in Objective-C. In Objective-C,
@samp{nil} is a pointer to a nonexistent object. In Swift, @samp{nil} isn't a
pointer---it's the absence of a value of a certain type. Optionals of
@emph{any} type can be set to @samp{nil}, not just object types.

@node If Statements and Forced Unwrapping
@subsection If Statements and Forced Unwrapping

You can use an @samp{if} statement to find out whether an optional contains a
value by comparing the optional against @samp{nil}. You perform this
comparison with the “equal to” operator (@samp{==}) or the “not equal to”
operator (@samp{!=}).

If an optional has a value, it's considered to be “not equal to” @samp{nil}:

@example
if convertedNumber != nil @{
    print("convertedNumber contains some integer value.")
@}
// Prints "convertedNumber contains some integer value."
@end example

Once you're sure that the optional @emph{does} contain a value, you can
access its underlying value by adding an exclamation mark (@samp{!}) to the
end of the optional's name. The exclamation mark effectively says, “I
know that this optional definitely has a value; please use it.” This is
known as @emph{forced unwrapping} of the optional's value:

@example
if convertedNumber != nil @{
    print("convertedNumber has an integer value of \(convertedNumber!).")
@}
// Prints "convertedNumber has an integer value of 123."
@end example

For more about the @samp{if} statement, see @ref{Control Flow, , Control
Flow}.

Note

Trying to use @samp{!} to access a nonexistent optional value triggers a
runtime error. Always make sure that an optional contains a non-@samp{nil}
value before using @samp{!} to force-unwrap its value.

@node Optional Binding
@subsection Optional Binding

You use @emph{optional binding} to find out whether an optional contains a
value, and if so, to make that value available as a temporary constant
or variable. Optional binding can be used with @samp{if} and @samp{while}
statements to check for a value inside an optional, and to extract that
value into a constant or variable, as part of a single action. @samp{if} and
@samp{while} statements are described in more detail in
@ref{Control Flow}.

Write an optional binding for an @samp{if} statement as follows:

@example
if let constantName = someOptional @{
    statements
@}
@end example

You can rewrite the @samp{possibleNumber} example from the
@ref{Optionals} section to use optional binding
rather than forced unwrapping:

@example
if let actualNumber = Int(possibleNumber) @{
    print("The string \"\(possibleNumber)\" has an integer value of \(actualNumber)")
@} else @{
    print("The string \"\(possibleNumber)\" could not be converted to an integer")
@}
// Prints "The string "123" has an integer value of 123"
@end example

This code can be read as:

“If the optional @samp{Int} returned by @samp{Int(possibleNumber)} contains a
value, set a new constant called @samp{actualNumber} to the value contained
in the optional.”

If the conversion is successful, the @samp{actualNumber} constant becomes
available for use within the first branch of the @samp{if} statement. It has
already been initialized with the value contained @emph{within} the optional,
and so there's no need to use the @samp{!} suffix to access its value. In
this example, @samp{actualNumber} is simply used to print the result of the
conversion.

You can use both constants and variables with optional binding. If you
wanted to manipulate the value of @samp{actualNumber} within the first branch
of the @samp{if} statement, you could write @samp{if var actualNumber} instead,
and the value contained within the optional would be made available as a
variable rather than a constant.

You can include as many optional bindings and Boolean conditions in a
single @samp{if} statement as you need to, separated by commas. If any of the
values in the optional bindings are @samp{nil} or any Boolean condition
evaluates to @samp{false}, the whole @samp{if} statement's condition is considered
to be @samp{false}. The following @samp{if} statements are equivalent:

@example
if let firstNumber = Int("4"), let secondNumber = Int("42"),
   firstNumber < secondNumber && secondNumber < 100 @{
    print("\(firstNumber) < \(secondNumber) < 100")
@}
// Prints "4 < 42 < 100"

if let firstNumber = Int("4") @{
    if let secondNumber = Int("42") @{
        if firstNumber < secondNumber && secondNumber < 100 @{
            print("\(firstNumber) < \(secondNumber) < 100")
        @}
    @}
@}
// Prints "4 < 42 < 100"
@end example

Note

Constants and variables created with optional binding in an @samp{if}
statement are available only within the body of the @samp{if} statement. In
contrast, the constants and variables created with a @samp{guard} statement
are available in the lines of code that follow the @samp{guard} statement, as
described in @ref{Early Exit}.

@node Implicitly Unwrapped Optionals
@subsection Implicitly Unwrapped Optionals

As described above, optionals indicate that a constant or variable is
allowed to have “no value”. Optionals can be checked with an @samp{if}
statement to see if a value exists, and can be conditionally unwrapped
with optional binding to access the optional's value if it does exist.

Sometimes it's clear from a program's structure that an optional will
@emph{always} have a value, after that value is first set. In these cases,
it's useful to remove the need to check and unwrap the optional's value
every time it's accessed, because it can be safely assumed to have a
value all of the time.

These kinds of optionals are defined as @emph{implicitly unwrapped
optionals}. You write an implicitly unwrapped optional by placing an
exclamation mark (@samp{String!}) rather than a question mark (@samp{String?})
after the type that you want to make optional.

Implicitly unwrapped optionals are useful when an optional's value is
confirmed to exist immediately after the optional is first defined and
can definitely be assumed to exist at every point thereafter. The
primary use of implicitly unwrapped optionals in Swift is during class
initialization, as described in
@ref{Unowned References and Implicitly Unwrapped Optional Properties, , Unowned References and
Implicitly Unwrapped Optional Properties}.

An implicitly unwrapped optional is a normal optional behind the scenes,
but can also be used like a non-optional value, without the need to
unwrap the optional value each time it's accessed. The following example
shows the difference in behavior between an optional string and an
implicitly unwrapped optional string when accessing their wrapped value
as an explicit @samp{String}:

@example
let possibleString: String? = "An optional string."
let forcedString: String = possibleString! // requires an exclamation mark

let assumedString: String! = "An implicitly unwrapped optional string."
let implicitString: String = assumedString // no need for an exclamation mark
@end example

You can think of an implicitly unwrapped optional as giving permission
for the optional to be unwrapped automatically whenever it's used.
Rather than placing an exclamation mark after the optional's name each
time you use it, you place an exclamation mark after the optional's type
when you declare it.

Note

If an implicitly unwrapped optional is @samp{nil} and you try to access its
wrapped value, you'll trigger a runtime error. The result is exactly the
same as if you place an exclamation mark after a normal optional that
doesn't contain a value.

You can still treat an implicitly unwrapped optional like a normal
optional, to check if it contains a value:

@example
if assumedString != nil @{
    print(assumedString!)
@}
// Prints "An implicitly unwrapped optional string."
@end example

You can also use an implicitly unwrapped optional with optional binding,
to check and unwrap its value in a single statement:

@example
if let definiteString = assumedString @{
    print(definiteString)
@}
// Prints "An implicitly unwrapped optional string."
@end example

Note

Don't use an implicitly unwrapped optional when there's a possibility of
a variable becoming @samp{nil} at a later point. Always use a normal optional
type if you need to check for a @samp{nil} value during the lifetime of a
variable.

@node Error Handling 1
@section Error Handling

You use @emph{error handling} to respond to error conditions your program may
encounter during execution.

In contrast to optionals, which can use the presence or absence of a
value to communicate success or failure of a function, error handling
allows you to determine the underlying cause of failure, and, if
necessary, propagate the error to another part of your program.

When a function encounters an error condition, it @emph{throws} an error.
That function's caller can then @emph{catch} the error and respond
appropriately.

@example
func canThrowAnError() throws @{
    // this function may or may not throw an error
@}
@end example

@findex throws
A function indicates that it can throw an error by including the
@samp{throws} keyword in its declaration. When you call a function that can
throw an error, you prepend the @samp{try} keyword to the expression.

Swift automatically propagates errors out of their current scope until
they're handled by a @samp{catch} clause.

@example
do @{
    try canThrowAnError()
    // no error was thrown
@} catch @{
    // an error was thrown
@}
@end example

A @samp{do} statement creates a new containing scope, which allows errors to
be propagated to one or more @samp{catch} clauses.

Here's an example of how error handling can be used to respond to
different error conditions:

@example
func makeASandwich() throws @{
    // ...
@}

do @{
    try makeASandwich()
    eatASandwich()
@} catch SandwichError.outOfCleanDishes @{
    washDishes()
@} catch SandwichError.missingIngredients(let ingredients) @{
    buyGroceries(ingredients)
@}
@end example

In this example, the @samp{makeASandwich()} function will throw an error if
no clean dishes are available or if any ingredients are missing. Because
@samp{makeASandwich()} can throw an error, the function call is wrapped in a
@samp{try} expression. By wrapping the function call in a @samp{do} statement, any
errors that are thrown will be propagated to the provided @samp{catch}
clauses.

If no error is thrown, the @samp{eatASandwich()} function is called. If an
error is thrown and it matches the @samp{SandwichError.outOfCleanDishes}
case, then the @samp{washDishes()} function will be called. If an error is
thrown and it matches the @samp{SandwichError.missingIngredients} case, then
the @samp{buyGroceries(_:)} function is called with the associated @samp{[String]}
value captured by the @samp{catch} pattern.

Throwing, catching, and propagating errors is covered in greater detail
in @ref{Error Handling}.

@node Assertions and Preconditions
@section Assertions and Preconditions

@emph{Assertions} and @emph{preconditions} are checks that happen at runtime. You
use them to make sure an essential condition is satisfied before
executing any further code. If the Boolean condition in the assertion or
precondition evaluates to @samp{true}, code execution continues as usual. If
the condition evaluates to @samp{false}, the current state of the program is
invalid; code execution ends, and your app is terminated.

You use assertions and preconditions to express the assumptions you make
and the expectations you have while coding, so you can include them as
part of your code. Assertions help you find mistakes and incorrect
assumptions during development, and preconditions help you detect issues
in production.

In addition to verifying your expectations at runtime, assertions and
preconditions also become a useful form of documentation within the
code. Unlike the error conditions discussed in
@ref{Error Handling} above, assertions and
preconditions aren't used for recoverable or expected errors. Because a
failed assertion or precondition indicates an invalid program state,
there's no way to catch a failed assertion.

Using assertions and preconditions isn't a substitute for designing your
code in such a way that invalid conditions are unlikely to arise.
However, using them to enforce valid data and state causes your app to
terminate more predictably if an invalid state occurs, and helps make
the problem easier to debug. Stopping execution as soon as an invalid
state is detected also helps limit the damage caused by that invalid
state.

The difference between assertions and preconditions is in when they're
checked: Assertions are checked only in debug builds, but preconditions
are checked in both debug and production builds. In production builds,
the condition inside an assertion isn't evaluated. This means you can
use as many assertions as you want during your development process,
without impacting performance in production.

@menu
* Debugging with Assertions::
* Enforcing Preconditions::
@end menu

@node Debugging with Assertions
@subsection Debugging with Assertions

You write an assertion by calling the
@uref{https://developer.apple.com/documentation/swift/1541112-assert, @samp{assert(_:_:file:line:)}}
[@uref{https://developer.apple.com/documentation/swift/1541112-assert}]
function from the Swift standard library. You pass this function an
expression that evaluates to @samp{true} or @samp{false} and a message to display
if the result of the condition is @samp{false}. For example:

@example
let age = -3
assert(age >= 0, "A person's age can't be less than zero.")
// This assertion fails because -3 is not >= 0.
@end example

In this example, code execution continues if @samp{age >} 0= evaluates to
@samp{true}, that is, if the value of @samp{age} is nonnegative. If the value of
@samp{age} is negative, as in the code above, then @samp{age >} 0= evaluates to
@samp{false}, and the assertion fails, terminating the application.

You can omit the assertion message---for example, when it would just
repeat the condition as prose.

@example
assert(age >= 0)
@end example

If the code already checks the condition, you use the
@uref{https://developer.apple.com/documentation/swift/1539616-assertionfailure, @samp{assertionFailure(_:file:line:)}}
[@uref{https://developer.apple.com/documentation/swift/1539616-assertionfailure}]
function to indicate that an assertion has failed. For example:

@example
if age > 10 @{
    print("You can ride the roller-coaster or the ferris wheel.")
@} else if age >= 0 @{
    print("You can ride the ferris wheel.")
@} else @{
    assertionFailure("A person's age can't be less than zero.")
@}
@end example

@node Enforcing Preconditions
@subsection Enforcing Preconditions

Use a precondition whenever a condition has the potential to be false,
but must @emph{definitely} be true for your code to continue execution. For
example, use a precondition to check that a subscript is not out of
bounds, or to check that a function has been passed a valid value.

You write a precondition by calling the
@uref{https://developer.apple.com/documentation/swift/1540960-precondition, @samp{precondition(_:_:file:line:)}}
[@uref{https://developer.apple.com/documentation/swift/1540960-precondition}]
function. You pass this function an expression that evaluates to @samp{true}
or @samp{false} and a message to display if the result of the condition is
@samp{false}. For example:

@example
// In the implementation of a subscript...
precondition(index > 0, "Index must be greater than zero.")
@end example

You can also call the
@uref{https://developer.apple.com/documentation/swift/1539374-preconditionfailure, @samp{preconditionFailure(_:file:line:)}}
[@uref{https://developer.apple.com/documentation/swift/1539374-preconditionfailure}]
function to indicate that a failure has occurred---for example, if the
default case of a switch was taken, but all valid input data should have
been handled by one of the switch's other cases.

Note

If you compile in unchecked mode (@samp{-Ounchecked}), preconditions aren't
checked. The compiler assumes that preconditions are always true, and it
optimizes your code accordingly. However, the @samp{fatalError(_:file:line:)}
function always halts execution, regardless of optimization settings.

You can use the @samp{fatalError(_:file:line:)} function during prototyping
and early development to create stubs for functionality that hasn't been
implemented yet, by writing @samp{fatalError("Unimplemented")} as the stub
implementation. Because fatal errors are never optimized out, unlike
assertions or preconditions, you can be sure that execution always halts
if it encounters a stub implementation.

@node Basic Operators
@chapter Basic Operators

An @emph{operator} is a special symbol or phrase that you use to check,
change, or combine values. For example, the addition operator (@samp{+}) adds
two numbers, as in @samp{let i = 1 + 2}, and the logical AND operator (@samp{&&})
combines two Boolean values, as in
@samp{if enteredDoorCode && passedRetinaScan}.

Swift supports most standard C operators and improves several
capabilities to eliminate common coding errors. The assignment operator
(@samp{=}) doesn't return a value, to prevent it from being mistakenly used
when the equal to operator (@samp{==}) is intended. Arithmetic operators
(@samp{+}, @samp{-}, @samp{*}, @samp{/}, @samp{%} and so forth) detect and disallow value
overflow, to avoid unexpected results when working with numbers that
become larger or smaller than the allowed value range of the type that
stores them. You can opt in to value overflow behavior by using Swift's
overflow operators, as described in
@ref{Overflow Operators}.

Swift also provides range operators that aren't found in C, such as
@samp{a..<b} and @samp{a...b}, as a shortcut for expressing a range of values.

This chapter describes the common operators in Swift.
@ref{Advanced Operators} covers Swift's advanced
operators, and describes how to define your own custom operators and
implement the standard operators for your own custom types.

@menu
* Terminology::
* Assignment Operator::
* Arithmetic Operators::
* Compound Assignment Operators::
* Comparison Operators::
* Ternary Conditional Operator::
* Nil-Coalescing Operator::
* Range Operators::
* Logical Operators::
@end menu

@node Terminology
@section Terminology

Operators are unary, binary, or ternary:

@itemize
@item
@emph{Unary} operators operate on a single target (such as @samp{-a}). Unary
@emph{prefix} operators appear immediately before their target (such as
@samp{!b}), and unary @emph{postfix} operators appear immediately after their
target (such as @samp{c!}).

@item
@emph{Binary} operators operate on two targets (such as @samp{2 + 3}) and are
@emph{infix} because they appear in between their two targets.

@item
@emph{Ternary} operators operate on three targets. Like C, Swift has only
one ternary operator, the ternary conditional operator (@samp{a ? b : c}).
@end itemize

The values that operators affect are @emph{operands}. In the expression
@samp{1 + 2}, the @samp{+} symbol is a binary operator and its two operands are
the values @samp{1} and @samp{2}.

@node Assignment Operator
@section Assignment Operator

The @emph{assignment operator} (@samp{a = b}) initializes or updates the value of
@samp{a} with the value of @samp{b}:

@example
let b = 10
var a = 5
a = b
// a is now equal to 10
@end example

If the right side of the assignment is a tuple with multiple values, its
elements can be decomposed into multiple constants or variables at once:

@example
let (x, y) = (1, 2)
// x is equal to 1, and y is equal to 2
@end example

Unlike the assignment operator in C and Objective-C, the assignment
operator in Swift does not itself return a value. The following
statement is not valid:

@example
if x = y @{
    // This is not valid, because x = y does not return a value.
@}
@end example

This feature prevents the assignment operator (@samp{=}) from being used by
accident when the equal to operator (@samp{==}) is actually intended. By
making @samp{if x = y} invalid, Swift helps you to avoid these kinds of
errors in your code.

@node Arithmetic Operators
@section Arithmetic Operators

Swift supports the four standard @emph{arithmetic operators} for all number
types:

@itemize
@item
Addition (@samp{+})

@item
Subtraction (@samp{-})

@item
Multiplication (@samp{*})

@item
Division (@samp{/})
@end itemize

@example
1 + 2 // equals 3
5 - 3 // equals 2
2 * 3 // equals 6
10.0 / 2.5 // equals 4.0
@end example

Unlike the arithmetic operators in C and Objective-C, the Swift
arithmetic operators don't allow values to overflow by default. You can
opt in to value overflow behavior by using Swift's overflow operators
(such as @samp{a &+ b}). See @ref{Overflow Operators}.

The addition operator is also supported for @samp{String} concatenation:

@example
"hello, " + "world" // equals "hello, world"
@end example

@menu
* Remainder Operator::
* Unary Minus Operator::
* Unary Plus Operator::
@end menu

@node Remainder Operator
@subsection Remainder Operator

The @emph{remainder operator} (@samp{a % b}) works out how many multiples of @samp{b}
will fit inside @samp{a} and returns the value that is left over (known as
the @emph{remainder}).

Note

The remainder operator (@samp{%}) is also known as a @emph{modulo operator} in
other languages. However, its behavior in Swift for negative numbers
means that, strictly speaking, it's a remainder rather than a modulo
operation.

Here's how the remainder operator works. To calculate @samp{9 % 4}, you first
work out how many @samp{4=s will fit inside =9}:

@image{_images/remainderInteger_2x,,,,png}
You can fit two @samp{4=s inside =9}, and the remainder is @samp{1} (shown in
orange).

In Swift, this would be written as:

@example
9 % 4 // equals 1
@end example

To determine the answer for @samp{a % b}, the @samp{%} operator calculates the
following equation and returns @samp{remainder} as its output:

@samp{a} = (@samp{b} x @samp{some multiplier}) + @samp{remainder}

where @samp{some multiplier} is the largest number of multiples of @samp{b} that
will fit inside @samp{a}.

Inserting @samp{9} and @samp{4} into this equation yields:

@samp{9} = (@samp{4} x @samp{2}) + @samp{1}

The same method is applied when calculating the remainder for a negative
value of @samp{a}:

@example
-9 % 4 // equals -1
@end example

Inserting @samp{-9} and @samp{4} into the equation yields:

@samp{-9} = (@samp{4} x @samp{-2}) + @samp{-1}

giving a remainder value of @samp{-1}.

The sign of @samp{b} is ignored for negative values of @samp{b}. This means that
@samp{a % b} and @samp{a % -b} always give the same answer.

@node Unary Minus Operator
@subsection Unary Minus Operator

The sign of a numeric value can be toggled using a prefixed @samp{-}, known
as the @emph{unary minus operator}:

@example
let three = 3
let minusThree = -three // minusThree equals -3
let plusThree = -minusThree // plusThree equals 3, or "minus minus three"
@end example

The unary minus operator (@samp{-}) is prepended directly before the value it
operates on, without any white space.

@node Unary Plus Operator
@subsection Unary Plus Operator

The @emph{unary plus operator} (@samp{+}) simply returns the value it operates on,
without any change:

@example
let minusSix = -6
let alsoMinusSix = +minusSix // alsoMinusSix equals -6
@end example

Although the unary plus operator doesn't actually do anything, you can
use it to provide symmetry in your code for positive numbers when also
using the unary minus operator for negative numbers.

@node Compound Assignment Operators
@section Compound Assignment Operators

Like C, Swift provides @emph{compound assignment operators} that combine
assignment (@samp{=}) with another operation. One example is the @emph{addition
assignment operator} (@samp{+=}):

@example
var a = 1
a += 2
// a is now equal to 3
@end example

The expression @samp{a +} 2= is shorthand for @samp{a = a + 2}. Effectively, the
addition and the assignment are combined into one operator that performs
both tasks at the same time.

Note

The compound assignment operators don't return a value. For example, you
can't write @samp{let b = a +} 2=.

For information about the operators provided by the Swift standard
library, see
@uref{https://developer.apple.com/documentation/swift/operator_declarations, Operator
Declarations}
[@uref{https://developer.apple.com/documentation/swift/operator_declarations}].

@node Comparison Operators
@section Comparison Operators

Swift supports all standard C @emph{comparison operators}:

@itemize
@item
Equal to (@samp{a =} b=)

@item
Not equal to (@samp{a !} b=)

@item
Greater than (@samp{a > b})

@item
Less than (@samp{a < b})

@item
Greater than or equal to (@samp{a >} b=)

@item
Less than or equal to (@samp{a <} b=)
@end itemize

Note

Swift also provides two @emph{identity operators} (@samp{===} and @samp{!==}), which
you use to test whether two object references both refer to the same
object instance. For more information, see
@ref{Identity Operators}.

Each of the comparison operators returns a @samp{Bool} value to indicate
whether or not the statement is true:

@example
1 == 1 // true because 1 is equal to 1
2 != 1 // true because 2 is not equal to 1
2 > 1 // true because 2 is greater than 1
1 < 2 // true because 1 is less than 2
1 >= 1 // true because 1 is greater than or equal to 1
2 <= 1 // false because 2 is not less than or equal to 1
@end example

Comparison operators are often used in conditional statements, such as
the @samp{if} statement:

@example
let name = "world"
if name == "world" @{
    print("hello, world")
@} else @{
    print("I'm sorry \(name), but I don't recognize you")
@}
// Prints "hello, world", because name is indeed equal to "world".
@end example

For more about the @samp{if} statement, see @ref{Control Flow, , Control
Flow}.

You can compare two tuples if they have the same type and the same
number of values. Tuples are compared from left to right, one value at a
time, until the comparison finds two values that aren't equal. Those two
values are compared, and the result of that comparison determines the
overall result of the tuple comparison. If all the elements are equal,
then the tuples themselves are equal. For example:

@example
(1, "zebra") < (2, "apple") // true because 1 is less than 2; "zebra" and "apple" are not compared
(3, "apple") < (3, "bird") // true because 3 is equal to 3, and "apple" is less than "bird"
(4, "dog") == (4, "dog") // true because 4 is equal to 4, and "dog" is equal to "dog"
@end example

In the example above, you can see the left-to-right comparison behavior
on the first line. Because @samp{1} is less than @samp{2}, @samp{(1, "zebra")} is
considered less than @samp{(2, "apple")}, regardless of any other values in
the tuples. It doesn't matter that @samp{"zebra"} isn't less than @samp{"apple"},
because the comparison is already determined by the tuples' first
elements. However, when the tuples' first elements are the same, their
second elements @emph{are} compared---this is what happens on the second and
third line.

Tuples can be compared with a given operator only if the operator can be
applied to each value in the respective tuples. For example, as
demonstrated in the code below, you can compare two tuples of type
@samp{(String, Int)} because both @samp{String} and @samp{Int} values can be compared
using the @samp{<} operator. In contrast, two tuples of type @samp{(String, Bool)}
can't be compared with the @samp{<} operator because the @samp{<} operator can't
be applied to @samp{Bool} values.

@example
("blue", -1) < ("purple", 1) // OK, evaluates to true
("blue", false) < ("purple", true) // Error because < can't compare Boolean values
@end example

Note

The Swift standard library includes tuple comparison operators for
tuples with fewer than seven elements. To compare tuples with seven or
more elements, you must implement the comparison operators yourself.

@node Ternary Conditional Operator
@section Ternary Conditional Operator

The @emph{ternary conditional operator} is a special operator with three
parts, which takes the form @samp{question ? answer1 : answer2}. It's a
shortcut for evaluating one of two expressions based on whether
@samp{question} is true or false. If @samp{question} is true, it evaluates
@samp{answer1} and returns its value; otherwise, it evaluates @samp{answer2} and
returns its value.

The ternary conditional operator is shorthand for the code below:

@example
if question @{
    answer1
@} else @{
    answer2
@}
@end example

Here's an example, which calculates the height for a table row. The row
height should be 50 points taller than the content height if the row has
a header, and 20 points taller if the row doesn't have a header:

@example
let contentHeight = 40
let hasHeader = true
let rowHeight = contentHeight + (hasHeader ? 50 : 20)
// rowHeight is equal to 90
@end example

The example above is shorthand for the code below:

@example
let contentHeight = 40
let hasHeader = true
let rowHeight: Int
if hasHeader @{
    rowHeight = contentHeight + 50
@} else @{
    rowHeight = contentHeight + 20
@}
// rowHeight is equal to 90
@end example

The first example's use of the ternary conditional operator means that
@samp{rowHeight} can be set to the correct value on a single line of code,
which is more concise than the code used in the second example.

The ternary conditional operator provides an efficient shorthand for
deciding which of two expressions to consider. Use the ternary
conditional operator with care, however. Its conciseness can lead to
hard-to-read code if overused. Avoid combining multiple instances of the
ternary conditional operator into one compound statement.

@node Nil-Coalescing Operator
@section Nil-Coalescing Operator

The @emph{nil-coalescing operator} (@samp{a ?? b}) unwraps an optional @samp{a} if it
contains a value, or returns a default value @samp{b} if @samp{a} is @samp{nil}. The
expression @samp{a} is always of an optional type. The expression @samp{b} must
match the type that is stored inside @samp{a}.

The nil-coalescing operator is shorthand for the code below:

@example
a != nil ? a! : b
@end example

The code above uses the ternary conditional operator and forced
unwrapping (@samp{a!}) to access the value wrapped inside @samp{a} when @samp{a} is not
@samp{nil}, and to return @samp{b} otherwise. The nil-coalescing operator provides
a more elegant way to encapsulate this conditional checking and
unwrapping in a concise and readable form.

Note

If the value of @samp{a} is non-@samp{nil}, the value of @samp{b} is not evaluated.
This is known as @emph{short-circuit evaluation}.

The example below uses the nil-coalescing operator to choose between a
default color name and an optional user-defined color name:

@example
let defaultColorName = "red"
var userDefinedColorName: String? // defaults to nil

var colorNameToUse = userDefinedColorName ?? defaultColorName
// userDefinedColorName is nil, so colorNameToUse is set to the default of "red"
@end example

The @samp{userDefinedColorName} variable is defined as an optional @samp{String},
with a default value of @samp{nil}. Because @samp{userDefinedColorName} is of an
optional type, you can use the nil-coalescing operator to consider its
value. In the example above, the operator is used to determine an
initial value for a @samp{String} variable called @samp{colorNameToUse}. Because
@samp{userDefinedColorName} is @samp{nil}, the expression
@samp{userDefinedColorName ?? defaultColorName} returns the value of
@samp{defaultColorName}, or @samp{"red"}.

If you assign a non-@samp{nil} value to @samp{userDefinedColorName} and perform
the nil-coalescing operator check again, the value wrapped inside
@samp{userDefinedColorName} is used instead of the default:

@example
userDefinedColorName = "green"
colorNameToUse = userDefinedColorName ?? defaultColorName
// userDefinedColorName is not nil, so colorNameToUse is set to "green"
@end example

@node Range Operators
@section Range Operators

Swift includes several @emph{range operators}, which are shortcuts for
expressing a range of values.

@menu
* Closed Range Operator::
* Half-Open Range Operator::
* One-Sided Ranges::
@end menu

@node Closed Range Operator
@subsection Closed Range Operator

The @emph{closed range operator} (@samp{a...b}) defines a range that runs from @samp{a}
to @samp{b}, and includes the values @samp{a} and @samp{b}. The value of @samp{a} must not
be greater than @samp{b}.

The closed range operator is useful when iterating over a range in which
you want all of the values to be used, such as with a @samp{for}-@samp{in} loop:

@example
for index in 1...5 @{
    print("\(index) times 5 is \(index * 5)")
@}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25
@end example

For more about @samp{for}-@samp{in} loops, see @ref{Control Flow, , Control
Flow}.

@node Half-Open Range Operator
@subsection Half-Open Range Operator

The @emph{half-open range operator} (@samp{a..<b}) defines a range that runs from
@samp{a} to @samp{b}, but doesn't include @samp{b}. It's said to be @emph{half-open} because
it contains its first value, but not its final value. As with the closed
range operator, the value of @samp{a} must not be greater than @samp{b}. If the
value of @samp{a} is equal to @samp{b}, then the resulting range will be empty.

Half-open ranges are particularly useful when you work with zero-based
lists such as arrays, where it's useful to count up to (but not
including) the length of the list:

@example
let names = ["Anna", "Alex", "Brian", "Jack"]
let count = names.count
for i in 0..<count @{
    print("Person \(i + 1) is called \(names[i])")
@}
// Person 1 is called Anna
// Person 2 is called Alex
// Person 3 is called Brian
// Person 4 is called Jack
@end example

Note that the array contains four items, but @samp{0..<count} only counts as
far as @samp{3} (the index of the last item in the array), because it's a
half-open range. For more about arrays, see
@ref{Arrays}.

@node One-Sided Ranges
@subsection One-Sided Ranges

The closed range operator has an alternative form for ranges that
continue as far as possible in one direction---for example, a range that
includes all the elements of an array from index 2 to the end of the
array. In these cases, you can omit the value from one side of the range
operator. This kind of range is called a @emph{one-sided range} because the
operator has a value on only one side. For example:

@example
for name in names[2...] @{
    print(name)
@}
// Brian
// Jack

for name in names[...2] @{
    print(name)
@}
// Anna
// Alex
// Brian
@end example

The half-open range operator also has a one-sided form that's written
with only its final value. Just like when you include a value on both
sides, the final value isn't part of the range. For example:

@example
for name in names[..<2] @{
    print(name)
@}
// Anna
// Alex
@end example

One-sided ranges can be used in other contexts, not just in subscripts.
You can't iterate over a one-sided range that omits a first value,
because it isn't clear where iteration should begin. You @emph{can} iterate
over a one-sided range that omits its final value; however, because the
range continues indefinitely, make sure you add an explicit end
condition for the loop. You can also check whether a one-sided range
contains a particular value, as shown in the code below.

@example
let range = ...5
range.contains(7) // false
range.contains(4) // true
range.contains(-1) // true
@end example

@node Logical Operators
@section Logical Operators

@emph{Logical operators} modify or combine the Boolean logic values @samp{true}
and @samp{false}. Swift supports the three standard logical operators found
in C-based languages:

@itemize
@item
Logical NOT (@samp{!a})

@item
Logical AND (@samp{a && b})

@item
Logical OR (@samp{a || b})
@end itemize

@menu
* Logical NOT Operator::
* Logical AND Operator::
* Logical OR Operator::
* Combining Logical Operators::
* Explicit Parentheses::
@end menu

@node Logical NOT Operator
@subsection Logical NOT Operator

The @emph{logical NOT operator} (@samp{!a}) inverts a Boolean value so that @samp{true}
becomes @samp{false}, and @samp{false} becomes @samp{true}.

The logical NOT operator is a prefix operator, and appears immediately
before the value it operates on, without any white space. It can be read
as “not =a=”, as seen in the following example:

@example
let allowedEntry = false
if !allowedEntry @{
    print("ACCESS DENIED")
@}
// Prints "ACCESS DENIED"
@end example

The phrase @samp{if !allowedEntry} can be read as “if not allowed entry.” The
subsequent line is only executed if “not allowed entry” is true; that
is, if @samp{allowedEntry} is @samp{false}.

As in this example, careful choice of Boolean constant and variable
names can help to keep code readable and concise, while avoiding double
negatives or confusing logic statements.

@node Logical AND Operator
@subsection Logical AND Operator

The @emph{logical AND operator} (@samp{a && b}) creates logical expressions where
both values must be @samp{true} for the overall expression to also be @samp{true}.

If either value is @samp{false}, the overall expression will also be @samp{false}.
In fact, if the @emph{first} value is @samp{false}, the second value won't even be
evaluated, because it can't possibly make the overall expression equate
to @samp{true}. This is known as @emph{short-circuit evaluation}.

This example considers two @samp{Bool} values and only allows access if both
values are @samp{true}:

@example
let enteredDoorCode = true
let passedRetinaScan = false
if enteredDoorCode && passedRetinaScan @{
    print("Welcome!")
@} else @{
    print("ACCESS DENIED")
@}
// Prints "ACCESS DENIED"
@end example

@node Logical OR Operator
@subsection Logical OR Operator

The @emph{logical OR operator} (@samp{a || b}) is an infix operator made from two
adjacent pipe characters. You use it to create logical expressions in
which only @emph{one} of the two values has to be @samp{true} for the overall
expression to be @samp{true}.

Like the Logical AND operator above, the Logical OR operator uses
short-circuit evaluation to consider its expressions. If the left side
of a Logical OR expression is @samp{true}, the right side is not evaluated,
because it can't change the outcome of the overall expression.

In the example below, the first @samp{Bool} value (@samp{hasDoorKey}) is @samp{false},
but the second value (@samp{knowsOverridePassword}) is @samp{true}. Because one
value is @samp{true}, the overall expression also evaluates to @samp{true}, and
access is allowed:

@example
let hasDoorKey = false
let knowsOverridePassword = true
if hasDoorKey || knowsOverridePassword @{
    print("Welcome!")
@} else @{
    print("ACCESS DENIED")
@}
// Prints "Welcome!"
@end example

@node Combining Logical Operators
@subsection Combining Logical Operators

You can combine multiple logical operators to create longer compound
expressions:

@example
if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword @{
    print("Welcome!")
@} else @{
    print("ACCESS DENIED")
@}
// Prints "Welcome!"
@end example

This example uses multiple @samp{&&} and @samp{||} operators to create a longer
compound expression. However, the @samp{&&} and @samp{||} operators still operate
on only two values, so this is actually three smaller expressions
chained together. The example can be read as:

If we've entered the correct door code and passed the retina scan, or if
we have a valid door key, or if we know the emergency override password,
then allow access.

Based on the values of @samp{enteredDoorCode}, @samp{passedRetinaScan}, and
@samp{hasDoorKey}, the first two subexpressions are @samp{false}. However, the
emergency override password is known, so the overall compound expression
still evaluates to @samp{true}.

Note

The Swift logical operators @samp{&&} and @samp{||} are left-associative, meaning
that compound expressions with multiple logical operators evaluate the
leftmost subexpression first.

@node Explicit Parentheses
@subsection Explicit Parentheses

It's sometimes useful to include parentheses when they're not strictly
needed, to make the intention of a complex expression easier to read. In
the door access example above, it's useful to add parentheses around the
first part of the compound expression to make its intent explicit:

@example
if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword @{
    print("Welcome!")
@} else @{
    print("ACCESS DENIED")
@}
// Prints "Welcome!"
@end example

The parentheses make it clear that the first two values are considered
as part of a separate possible state in the overall logic. The output of
the compound expression doesn't change, but the overall intention is
clearer to the reader. Readability is always preferred over brevity; use
parentheses where they help to make your intentions clear.

@node Strings and Characters
@chapter Strings and Characters

A @emph{string} is a series of characters, such as @samp{"hello, world"} or
@samp{"albatross"}. Swift strings are represented by the @samp{String} type. The
contents of a @samp{String} can be accessed in various ways, including as a
collection of @samp{Character} values.

Swift's @samp{String} and @samp{Character} types provide a fast, Unicode-compliant
way to work with text in your code. The syntax for string creation and
manipulation is lightweight and readable, with a string literal syntax
that is similar to C. String concatenation is as simple as combining two
strings with the @samp{+} operator, and string mutability is managed by
choosing between a constant or a variable, just like any other value in
Swift. You can also use strings to insert constants, variables,
literals, and expressions into longer strings, in a process known as
string interpolation. This makes it easy to create custom string values
for display, storage, and printing.

Despite this simplicity of syntax, Swift's @samp{String} type is a fast,
modern string implementation. Every string is composed of
encoding-independent Unicode characters, and provides support for
accessing those characters in various Unicode representations.

Note

Swift's @samp{String} type is bridged with Foundation's @samp{NSString} class.
Foundation also extends @samp{String} to expose methods defined by
@samp{NSString}. This means, if you import Foundation, you can access those
@samp{NSString} methods on @samp{String} without casting.

For more information about using @samp{String} with Foundation and Cocoa, see
@uref{https://developer.apple.com/documentation/swift/string#2919514, Bridging
Between String and NSString}
[@uref{https://developer.apple.com/documentation/swift/string#2919514}].

@menu
* String Literals::
* Initializing an Empty String::
* String Mutability::
* Strings Are Value Types::
* Working with Characters::
* Concatenating Strings and Characters::
* String Interpolation::
* Unicode::
* Counting Characters::
* Accessing and Modifying a String::
* Substrings::
* Comparing Strings::
* Unicode Representations of Strings::
@end menu

@node String Literals
@section String Literals

You can include predefined @samp{String} values within your code as @emph{string
literals}. A string literal is a sequence of characters surrounded by
double quotation marks (@samp{"}).

Use a string literal as an initial value for a constant or variable:

@example
let someString = "Some string literal value"
@end example

Note that Swift infers a type of @samp{String} for the @samp{someString} constant
because it's initialized with a string literal value.

@menu
* Multiline String Literals::
* Special Characters in String Literals::
* Extended String Delimiters::
@end menu

@node Multiline String Literals
@subsection Multiline String Literals

If you need a string that spans several lines, use a multiline string
literal---a sequence of characters surrounded by three double quotation
marks:

@example
let quotation = """
  The White Rabbit put on his spectacles. "Where shall I begin,
  please your Majesty?" he asked.

  "Begin at the beginning," the King said gravely, "and go on
  till you come to the end; then stop."
  """
@end example

A multiline string literal includes all of the lines between its opening
and closing quotation marks. The string begins on the first line after
the opening quotation marks (@samp{"""}) and ends on the line before the
closing quotation marks, which means that neither of the strings below
start or end with a line break:

@example
let singleLineString = "These are the same."
let multilineString = """
  These are the same.
  """
@end example

When your source code includes a line break inside of a multiline string
literal, that line break also appears in the string's value. If you want
to use line breaks to make your source code easier to read, but you
don't want the line breaks to be part of the string's value, write a
backslash (@samp{\}) at the end of those lines:

@example
let softWrappedQuotation = """
  The White Rabbit put on his spectacles. "Where shall I begin, \
  please your Majesty?" he asked.

  "Begin at the beginning," the King said gravely, "and go on \
  till you come to the end; then stop."
  """
@end example

To make a multiline string literal that begins or ends with a line feed,
write a blank line as the first or last line. For example:

@example
let lineBreaks = """

  This string starts with a line break.
  It also ends with a line break.

  """
@end example

A multiline string can be indented to match the surrounding code. The
whitespace before the closing quotation marks (@samp{"""}) tells Swift what
whitespace to ignore before all of the other lines. However, if you
write whitespace at the beginning of a line in addition to what's before
the closing quotation marks, that whitespace @emph{is} included.

@image{_images/multilineStringWhitespace_2x,,,,png}
In the example above, even though the entire multiline string literal is
indented, the first and last lines in the string don't begin with any
whitespace. The middle line has more indentation than the closing
quotation marks, so it starts with that extra four-space indentation.

@node Special Characters in String Literals
@subsection Special Characters in String Literals

String literals can include the following special characters:

@itemize
@item
The escaped special characters @samp{\0} (null character), @samp{\\}
(backslash), @samp{\t} (horizontal tab), @samp{\n} (line feed), @samp{\r} (carriage
return), @samp{\"} (double quotation mark) and @samp{\'} (single quotation mark)

@item
An arbitrary Unicode scalar value, written as @samp{\u@{=/n/}@}=, where @emph{n}
is a 1--8 digit hexadecimal number (Unicode is discussed in
@ref{Unicode} below)
@end itemize

The code below shows four examples of these special characters. The
@samp{wiseWords} constant contains two escaped double quotation marks. The
@samp{dollarSign}, @samp{blackHeart}, and @samp{sparklingHeart} constants demonstrate
the Unicode scalar format:

@example
let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\u@{24@}" // $, Unicode scalar U+0024
let blackHeart = "\u@{2665@}" // ♥, Unicode scalar U+2665
let sparklingHeart = "\u@{1F496@}" // 💖, Unicode scalar U+1F496
@end example

Because multiline string literals use three double quotation marks
instead of just one, you can include a double quotation mark (@samp{"})
inside of a multiline string literal without escaping it. To include the
text @samp{"""} in a multiline string, escape at least one of the quotation
marks. For example:

@example
let threeDoubleQuotationMarks = """
  Escaping the first quotation mark \"""
  Escaping all three quotation marks \"\"\"
  """
@end example

@node Extended String Delimiters
@subsection Extended String Delimiters

You can place a string literal within @emph{extended delimiters} to include
special characters in a string without invoking their effect. You place
your string within quotation marks (@samp{"}) and surround that with number
signs (@samp{#}). For example, printing the string literal
@samp{#"Line 1\nLine 2"#} prints the line feed escape sequence (@samp{\n}) rather
than printing the string across two lines.

If you need the special effects of a character in a string literal,
match the number of number signs within the string following the escape
character (@samp{\}). For example, if your string is @samp{#"Line 1\nLine 2"#} and
you want to break the line, you can use @samp{#"Line 1\#nLine 2"#} instead.
Similarly, @samp{###"Line1\###nLine2"###} also breaks the line.

String literals created using extended delimiters can also be multiline
string literals. You can use extended delimiters to include the text
@samp{"""} in a multiline string, overriding the default behavior that ends
the literal. For example:

@example
let threeMoreDoubleQuotationMarks = #"""
  Here are three more double quotes: """
  """#
@end example

@node Initializing an Empty String
@section Initializing an Empty String

To create an empty @samp{String} value as the starting point for building a
longer string, either assign an empty string literal to a variable, or
initialize a new @samp{String} instance with initializer syntax:

@example
var emptyString = "" // empty string literal
var anotherEmptyString = String() // initializer syntax
// these two strings are both empty, and are equivalent to each other
@end example

Find out whether a @samp{String} value is empty by checking its Boolean
@samp{isEmpty} property:

@example
if emptyString.isEmpty @{
    print("Nothing to see here")
@}
// Prints "Nothing to see here"
@end example

@node String Mutability
@section String Mutability

You indicate whether a particular @samp{String} can be modified (or
@emph{mutated}) by assigning it to a variable (in which case it can be
modified), or to a constant (in which case it can't be modified):

@example
var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"

let constantString = "Highlander"
constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified
@end example

Note

This approach is different from string mutation in Objective-C and
Cocoa, where you choose between two classes (@samp{NSString} and
@samp{NSMutableString}) to indicate whether a string can be mutated.

@node Strings Are Value Types
@section Strings Are Value Types

Swift's @samp{String} type is a @emph{value type}. If you create a new @samp{String}
value, that @samp{String} value is @emph{copied} when it's passed to a function or
method, or when it's assigned to a constant or variable. In each case, a
new copy of the existing @samp{String} value is created, and the new copy is
passed or assigned, not the original version. Value types are described
in @ref{Structures and Enumerations Are Value Types, , Structures and Enumerations Are
Value Types}.

Swift's copy-by-default @samp{String} behavior ensures that when a function
or method passes you a @samp{String} value, it's clear that you own that
exact @samp{String} value, regardless of where it came from. You can be
confident that the string you are passed won't be modified unless you
modify it yourself.

Behind the scenes, Swift's compiler optimizes string usage so that
actual copying takes place only when absolutely necessary. This means
you always get great performance when working with strings as value
types.

@node Working with Characters
@section Working with Characters

You can access the individual @samp{Character} values for a @samp{String} by
iterating over the string with a @samp{for}-@samp{in} loop:

@example
for character in "Dog!🐶" @{
    print(character)
@}
// D
// o
// g
// !
// 🐶
@end example

The @samp{for}-@samp{in} loop is described in @ref{For-In Loops, , For-In
Loops}.

Alternatively, you can create a stand-alone @samp{Character} constant or
variable from a single-character string literal by providing a
@samp{Character} type annotation:

@example
let exclamationMark: Character = "!"
@end example

@samp{String} values can be constructed by passing an array of @samp{Character}
values as an argument to its initializer:

@example
let catCharacters: [Character] = ["C", "a", "t", "!", "🐱"]
let catString = String(catCharacters)
print(catString)
// Prints "Cat!🐱"
@end example

@node Concatenating Strings and Characters
@section Concatenating Strings and Characters

@samp{String} values can be added together (or @emph{concatenated}) with the
addition operator (@samp{+}) to create a new @samp{String} value:

@example
let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2
// welcome now equals "hello there"
@end example

You can also append a @samp{String} value to an existing @samp{String} variable
with the addition assignment operator (@samp{+=}):

@example
var instruction = "look over"
instruction += string2
// instruction now equals "look over there"
@end example

You can append a @samp{Character} value to a @samp{String} variable with the
@samp{String} type's @samp{append()} method:

@example
let exclamationMark: Character = "!"
welcome.append(exclamationMark)
// welcome now equals "hello there!"
@end example

Note

You can't append a @samp{String} or @samp{Character} to an existing @samp{Character}
variable, because a @samp{Character} value must contain a single character
only.

If you're using multiline string literals to build up the lines of a
longer string, you want every line in the string to end with a line
break, including the last line. For example:

@example
let badStart = """
  one
  two
  """
let end = """
  three
  """
print(badStart + end)
// Prints two lines:
// one
// twothree

let goodStart = """
  one
  two

  """
print(goodStart + end)
// Prints three lines:
// one
// two
// three
@end example

In the code above, concatenating @samp{badStart} with @samp{end} produces a
two-line string, which isn't the desired result. Because the last line
of @samp{badStart} doesn't end with a line break, that line gets combined
with the first line of @samp{end}. In contrast, both lines of @samp{goodStart} end
with a line break, so when it's combined with @samp{end} the result has three
lines, as expected.

@node String Interpolation
@section String Interpolation

@emph{String interpolation} is a way to construct a new @samp{String} value from a
mix of constants, variables, literals, and expressions by including
their values inside a string literal. You can use string interpolation
in both single-line and multiline string literals. Each item that you
insert into the string literal is wrapped in a pair of parentheses,
prefixed by a backslash (@samp{\}):

@example
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"
@end example

In the example above, the value of @samp{multiplier} is inserted into a
string literal as @samp{\(multiplier)}. This placeholder is replaced with the
actual value of @samp{multiplier} when the string interpolation is evaluated
to create an actual string.

The value of @samp{multiplier} is also part of a larger expression later in
the string. This expression calculates the value of
@samp{Double(multiplier) * 2.5} and inserts the result (@samp{7.5}) into the
string. In this case, the expression is written as
@samp{\(Double(multiplier) * 2.5)} when it's included inside the string
literal.

@findex #

You can use extended string delimiters to create strings containing
characters that would otherwise be treated as a string interpolation.
For example:

@example
print(#"Write an interpolated string in Swift using \(multiplier)."#)
// Prints "Write an interpolated string in Swift using \(multiplier)."
@end example

To use string interpolation inside a string that uses extended
delimiters, match the number of number signs before the backslash to the
number of number signs at the beginning and end of the string. For
example:

@example
print(#"6 times 7 is \#(6 * 7)."#)
// Prints "6 times 7 is 42."
@end example

Note

The expressions you write inside parentheses within an interpolated
string can't contain an unescaped backslash (@samp{\}), a carriage return, or
a line feed. However, they can contain other string literals.

@node Unicode
@section Unicode

@emph{Unicode} is an international standard for encoding, representing, and
processing text in different writing systems. It enables you to
represent almost any character from any language in a standardized form,
and to read and write those characters to and from an external source
such as a text file or web page. Swift's @samp{String} and @samp{Character} types
are fully Unicode-compliant, as described in this section.

@menu
* Unicode Scalar Values::
* Extended Grapheme Clusters::
@end menu

@node Unicode Scalar Values
@subsection Unicode Scalar Values

Behind the scenes, Swift's native @samp{String} type is built from @emph{Unicode
scalar values}. A Unicode scalar value is a unique 21-bit number for a
character or modifier, such as @samp{U+0061} for @samp{LATIN SMALL LETTER A}
(@samp{"a"}), or @samp{U+1F425} for @samp{FRONT-FACING BABY CHICK} (@samp{"🐥"}).

Note that not all 21-bit Unicode scalar values are assigned to a
character---some scalars are reserved for future assignment or for use
in UTF-16 encoding. Scalar values that have been assigned to a character
typically also have a name, such as @samp{LATIN SMALL LETTER A} and
@samp{FRONT-FACING BABY CHICK} in the examples above.

@node Extended Grapheme Clusters
@subsection Extended Grapheme Clusters

Every instance of Swift's @samp{Character} type represents a single @emph{extended
grapheme cluster}. An extended grapheme cluster is a sequence of one or
more Unicode scalars that (when combined) produce a single
human-readable character.

Here's an example. The letter @samp{é} can be represented as the single
Unicode scalar @samp{é} (@samp{LATIN SMALL LETTER E WITH ACUTE}, or @samp{U+00E9}).
However, the same letter can also be represented as a @emph{pair} of
scalars---a standard letter @samp{e} (@samp{LATIN SMALL LETTER E}, or @samp{U+0065}),
followed by the @samp{COMBINING ACUTE ACCENT} scalar (@samp{U+0301}). The
@samp{COMBINING ACUTE ACCENT} scalar is graphically applied to the scalar
that precedes it, turning an @samp{e} into an @samp{é} when it's rendered by a
Unicode-aware text-rendering system.

In both cases, the letter @samp{é} is represented as a single Swift
@samp{Character} value that represents an extended grapheme cluster. In the
first case, the cluster contains a single scalar; in the second case,
it's a cluster of two scalars:

@example
let eAcute: Character = "\u@{E9@}" // é
let combinedEAcute: Character = "\u@{65@}\u@{301@}" // e followed by ́
// eAcute is é, combinedEAcute is é
@end example

Extended grapheme clusters are a flexible way to represent many complex
script characters as a single @samp{Character} value. For example, Hangul
syllables from the Korean alphabet can be represented as either a
precomposed or decomposed sequence. Both of these representations
qualify as a single @samp{Character} value in Swift:

@example
let precomposed: Character = "\u@{D55C@}" // 한
let decomposed: Character = "\u@{1112@}\u@{1161@}\u@{11AB@}" // ᄒ, ᅡ, ᆫ
// precomposed is 한, decomposed is 한
@end example

Extended grapheme clusters enable scalars for enclosing marks (such as
@samp{COMBINING ENCLOSING CIRCLE}, or @samp{U+20DD}) to enclose other Unicode
scalars as part of a single @samp{Character} value:

@example
let enclosedEAcute: Character = "\u@{E9@}\u@{20DD@}"
// enclosedEAcute is é⃝
@end example

Unicode scalars for regional indicator symbols can be combined in pairs
to make a single @samp{Character} value, such as this combination of
@samp{REGIONAL INDICATOR SYMBOL LETTER U} (@samp{U+1F1FA}) and
@samp{REGIONAL INDICATOR SYMBOL LETTER S} (@samp{U+1F1F8}):

@example
let regionalIndicatorForUS: Character = "\u@{1F1FA@}\u@{1F1F8@}"
// regionalIndicatorForUS is 🇺🇸
@end example

@node Counting Characters
@section Counting Characters

To retrieve a count of the @samp{Character} values in a string, use the
@samp{count} property of the string:

@example
let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"
print("unusualMenagerie has \(unusualMenagerie.count) characters")
// Prints "unusualMenagerie has 40 characters"
@end example

Note that Swift's use of extended grapheme clusters for @samp{Character}
values means that string concatenation and modification may not always
affect a string's character count.

For example, if you initialize a new string with the four-character word
@samp{cafe}, and then append a @samp{COMBINING ACUTE ACCENT} (@samp{U+0301}) to the end
of the string, the resulting string will still have a character count of
@samp{4}, with a fourth character of @samp{é}, not @samp{e}:

@example
var word = "cafe"
print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafe is 4"

word += "\u@{301@}" // COMBINING ACUTE ACCENT, U+0301

print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in café is 4"
@end example

Note

Extended grapheme clusters can be composed of multiple Unicode scalars.
This means that different characters---and different representations of
the same character---can require different amounts of memory to store.
Because of this, characters in Swift don't each take up the same amount
of memory within a string's representation. As a result, the number of
characters in a string can't be calculated without iterating through the
string to determine its extended grapheme cluster boundaries. If you are
working with particularly long string values, be aware that the @samp{count}
property must iterate over the Unicode scalars in the entire string in
order to determine the characters for that string.

The count of the characters returned by the @samp{count} property isn't
always the same as the @samp{length} property of an @samp{NSString} that contains
the same characters. The length of an @samp{NSString} is based on the number
of 16-bit code units within the string's UTF-16 representation and not
the number of Unicode extended grapheme clusters within the string.

@node Accessing and Modifying a String
@section Accessing and Modifying a String

You access and modify a string through its methods and properties, or by
using subscript syntax.

@menu
* String Indices::
* Inserting and Removing::
@end menu

@node String Indices
@subsection String Indices

Each @samp{String} value has an associated @emph{index type}, @samp{String.Index},
which corresponds to the position of each @samp{Character} in the string.

As mentioned above, different characters can require different amounts
of memory to store, so in order to determine which @samp{Character} is at a
particular position, you must iterate over each Unicode scalar from the
start or end of that @samp{String}. For this reason, Swift strings can't be
indexed by integer values.

Use the @samp{startIndex} property to access the position of the first
@samp{Character} of a @samp{String}. The @samp{endIndex} property is the position after
the last character in a @samp{String}. As a result, the @samp{endIndex} property
isn't a valid argument to a string's subscript. If a @samp{String} is empty,
@samp{startIndex} and @samp{endIndex} are equal.

You access the indices before and after a given index using the
@samp{index(before:)} and @samp{index(after:)} methods of @samp{String}. To access an
index farther away from the given index, you can use the
@samp{index(_:offsetBy:)} method instead of calling one of these methods
multiple times.

You can use subscript syntax to access the @samp{Character} at a particular
@samp{String} index.

@example
let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.index(before: greeting.endIndex)]
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a
@end example

Attempting to access an index outside of a string's range or a
@samp{Character} at an index outside of a string's range will trigger a
runtime error.

@example
greeting[greeting.endIndex] // Error
greeting.index(after: greeting.endIndex) // Error
@end example

Use the @samp{indices} property to access all of the indices of individual
characters in a string.

@example
for index in greeting.indices @{
    print("\(greeting[index]) ", terminator: "")
@}
// Prints "G u t e n T a g ! "
@end example

Note

You can use the @samp{startIndex} and @samp{endIndex} properties and the
@samp{index(before:)}, @samp{index(after:)}, and @samp{index(_:offsetBy:)} methods on
any type that conforms to the @samp{Collection} protocol. This includes
@samp{String}, as shown here, as well as collection types such as @samp{Array},
@samp{Dictionary}, and @samp{Set}.

@node Inserting and Removing
@subsection Inserting and Removing

To insert a single character into a string at a specified index, use the
@samp{insert(_:at:)} method, and to insert the contents of another string at
a specified index, use the @samp{insert(contentsOf:at:)} method.

@example
var welcome = "hello"
welcome.insert("!", at: welcome.endIndex)
// welcome now equals "hello!"

welcome.insert(contentsOf: " there", at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there!"
@end example

To remove a single character from a string at a specified index, use the
@samp{remove(at:)} method, and to remove a substring at a specified range,
use the @samp{removeSubrange(_:)} method:

@example
welcome.remove(at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there"

let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex
welcome.removeSubrange(range)
// welcome now equals "hello"
@end example

Note

You can use the @samp{insert(_:at:)}, @samp{insert(contentsOf:at:)},
@samp{remove(at:)}, and @samp{removeSubrange(_:)} methods on any type that
conforms to the @samp{RangeReplaceableCollection} protocol. This includes
@samp{String}, as shown here, as well as collection types such as @samp{Array},
@samp{Dictionary}, and @samp{Set}.

@node Substrings
@section Substrings

When you get a substring from a string---for example, using a subscript
or a method like @samp{prefix(_:)}---the result is an instance of
@uref{https://developer.apple.com/documentation/swift/substring, @samp{Substring}}
[@uref{https://developer.apple.com/documentation/swift/substring}], not another
string. Substrings in Swift have most of the same methods as strings,
which means you can work with substrings the same way you work with
strings. However, unlike strings, you use substrings for only a short
amount of time while performing actions on a string. When you're ready
to store the result for a longer time, you convert the substring to an
instance of @samp{String}. For example:

@example
let greeting = "Hello, world!"
let index = greeting.firstIndex(of: ",") ?? greeting.endIndex
let beginning = greeting[..<index]
// beginning is "Hello"

// Convert the result to a String for long-term storage.
let newString = String(beginning)
@end example

Like strings, each substring has a region of memory where the characters
that make up the substring are stored. The difference between strings
and substrings is that, as a performance optimization, a substring can
reuse part of the memory that's used to store the original string, or
part of the memory that's used to store another substring. (Strings have
a similar optimization, but if two strings share memory, they are
equal.) This performance optimization means you don't have to pay the
performance cost of copying memory until you modify either the string or
substring. As mentioned above, substrings aren't suitable for long-term
storage---because they reuse the storage of the original string, the
entire original string must be kept in memory as long as any of its
substrings are being used.

In the example above, @samp{greeting} is a string, which means it has a
region of memory where the characters that make up the string are
stored. Because @samp{beginning} is a substring of @samp{greeting}, it reuses the
memory that @samp{greeting} uses. In contrast, @samp{newString} is a string---when
it's created from the substring, it has its own storage. The figure
below shows these relationships:

@image{_images/stringSubstring_2x,,,,png}

Note

Both @samp{String} and @samp{Substring} conform to the
@uref{https://developer.apple.com/documentation/swift/stringprotocol, @samp{StringProtocol}}
[@uref{https://developer.apple.com/documentation/swift/stringprotocol}]
protocol, which means it's often convenient for string-manipulation
functions to accept a @samp{StringProtocol} value. You can call such
functions with either a @samp{String} or @samp{Substring} value.

@node Comparing Strings
@section Comparing Strings

Swift provides three ways to compare textual values: string and
character equality, prefix equality, and suffix equality.

@menu
* String and Character Equality::
* Prefix and Suffix Equality::
@end menu

@node String and Character Equality
@subsection String and Character Equality

String and character equality is checked with the “equal to” operator
(@samp{==}) and the “not equal to” operator (@samp{!=}), as described in
@ref{Comparison Operators}:

@example
let quotation = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation @{
    print("These two strings are considered equal")
@}
// Prints "These two strings are considered equal"
@end example

Two @samp{String} values (or two @samp{Character} values) are considered equal if
their extended grapheme clusters are @emph{canonically equivalent}. Extended
grapheme clusters are canonically equivalent if they have the same
linguistic meaning and appearance, even if they're composed from
different Unicode scalars behind the scenes.

For example, @samp{LATIN SMALL LETTER E WITH ACUTE} (@samp{U+00E9}) is canonically
equivalent to @samp{LATIN SMALL LETTER E} (@samp{U+0065}) followed by
@samp{COMBINING ACUTE ACCENT} (@samp{U+0301}). Both of these extended grapheme
clusters are valid ways to represent the character @samp{é}, and so they're
considered to be canonically equivalent:

@example
// "Voulez-vous un café?" using LATIN SMALL LETTER E WITH ACUTE
let eAcuteQuestion = "Voulez-vous un caf\u@{E9@}?"

// "Voulez-vous un café?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
let combinedEAcuteQuestion = "Voulez-vous un caf\u@{65@}\u@{301@}?"

if eAcuteQuestion == combinedEAcuteQuestion @{
    print("These two strings are considered equal")
@}
// Prints "These two strings are considered equal"
@end example

Conversely, @samp{LATIN CAPITAL LETTER A} (@samp{U+0041}, or @samp{"A"}), as used in
English, is @emph{not} equivalent to @samp{CYRILLIC CAPITAL LETTER A} (@samp{U+0410},
or @samp{"А"}), as used in Russian. The characters are visually similar, but
don't have the same linguistic meaning:

@example
let latinCapitalLetterA: Character = "\u@{41@}"

let cyrillicCapitalLetterA: Character = "\u@{0410@}"

if latinCapitalLetterA != cyrillicCapitalLetterA @{
    print("These two characters are not equivalent.")
@}
// Prints "These two characters are not equivalent."
@end example

Note

String and character comparisons in Swift are not locale-sensitive.

@node Prefix and Suffix Equality
@subsection Prefix and Suffix Equality

To check whether a string has a particular string prefix or suffix, call
the string's @samp{hasPrefix(_:)} and @samp{hasSuffix(_:)} methods, both of which
take a single argument of type @samp{String} and return a Boolean value.

The examples below consider an array of strings representing the scene
locations from the first two acts of Shakespeare's @emph{Romeo and Juliet}:

@example
let romeoAndJuliet = [
  "Act 1 Scene 1: Verona, A public place",
  "Act 1 Scene 2: Capulet's mansion",
  "Act 1 Scene 3: A room in Capulet's mansion",
  "Act 1 Scene 4: A street outside Capulet's mansion",
  "Act 1 Scene 5: The Great Hall in Capulet's mansion",
  "Act 2 Scene 1: Outside Capulet's mansion",
  "Act 2 Scene 2: Capulet's orchard",
  "Act 2 Scene 3: Outside Friar Lawrence's cell",
  "Act 2 Scene 4: A street in Verona",
  "Act 2 Scene 5: Capulet's mansion",
  "Act 2 Scene 6: Friar Lawrence's cell"
]
@end example

You can use the @samp{hasPrefix(_:)} method with the @samp{romeoAndJuliet} array
to count the number of scenes in Act 1 of the play:

@example
var act1SceneCount = 0
for scene in romeoAndJuliet @{
    if scene.hasPrefix("Act 1 ") @{
        act1SceneCount += 1
    @}
@}
print("There are \(act1SceneCount) scenes in Act 1")
// Prints "There are 5 scenes in Act 1"
@end example

Similarly, use the @samp{hasSuffix(_:)} method to count the number of scenes
that take place in or around Capulet's mansion and Friar Lawrence's
cell:

@example
var mansionCount = 0
var cellCount = 0
for scene in romeoAndJuliet @{
    if scene.hasSuffix("Capulet's mansion") @{
        mansionCount += 1
    @} else if scene.hasSuffix("Friar Lawrence's cell") @{
        cellCount += 1
    @}
@}
print("\(mansionCount) mansion scenes; \(cellCount) cell scenes")
// Prints "6 mansion scenes; 2 cell scenes"
@end example

Note

The @samp{hasPrefix(_:)} and @samp{hasSuffix(_:)} methods perform a
character-by-character canonical equivalence comparison between the
extended grapheme clusters in each string, as described in
@ref{String and Character Equality}.

@node Unicode Representations of Strings
@section Unicode Representations of Strings

When a Unicode string is written to a text file or some other storage,
the Unicode scalars in that string are encoded in one of several
Unicode-defined @emph{encoding forms}. Each form encodes the string in small
chunks known as @emph{code units}. These include the UTF-8 encoding form
(which encodes a string as 8-bit code units), the UTF-16 encoding form
(which encodes a string as 16-bit code units), and the UTF-32 encoding
form (which encodes a string as 32-bit code units).

Swift provides several different ways to access Unicode representations
of strings. You can iterate over the string with a @samp{for}-@samp{in} statement,
to access its individual @samp{Character} values as Unicode extended grapheme
clusters. This process is described in
@ref{Working with Characters}.

Alternatively, access a @samp{String} value in one of three other
Unicode-compliant representations:

@itemize
@item
A collection of UTF-8 code units (accessed with the string's @samp{utf8}
property)

@item
A collection of UTF-16 code units (accessed with the string's @samp{utf16}
property)

@item
A collection of 21-bit Unicode scalar values, equivalent to the
string's UTF-32 encoding form (accessed with the string's
@samp{unicodeScalars} property)
@end itemize

Each example below shows a different representation of the following
string, which is made up of the characters @samp{D}, @samp{o}, @samp{g}, @samp{‼}
(@samp{DOUBLE EXCLAMATION MARK}, or Unicode scalar @samp{U+203C}), and the 🐶
character (@samp{DOG FACE}, or Unicode scalar @samp{U+1F436}):

@example
let dogString = "Dog‼🐶"
@end example

@menu
* UTF-8 Representation::
* UTF-16 Representation::
* Unicode Scalar Representation::
@end menu

@node UTF-8 Representation
@subsection UTF-8 Representation

You can access a UTF-8 representation of a @samp{String} by iterating over
its @samp{utf8} property. This property is of type @samp{String.UTF8View}, which
is a collection of unsigned 8-bit (@samp{UInt8}) values, one for each byte in
the string's UTF-8 representation:

@image{_images/UTF8_2x,,,,png}

@example
for codeUnit in dogString.utf8 @{
    print("\(codeUnit) ", terminator: "")
@}
print("")
// Prints "68 111 103 226 128 188 240 159 144 182 "
@end example

In the example above, the first three decimal @samp{codeUnit} values (@samp{68},
@samp{111}, @samp{103}) represent the characters @samp{D}, @samp{o}, and @samp{g}, whose UTF-8
representation is the same as their ASCII representation. The next three
decimal @samp{codeUnit} values (@samp{226}, @samp{128}, @samp{188}) are a three-byte UTF-8
representation of the @samp{DOUBLE EXCLAMATION MARK} character. The last four
@samp{codeUnit} values (@samp{240}, @samp{159}, @samp{144}, @samp{182}) are a four-byte UTF-8
representation of the @samp{DOG FACE} character.

@node UTF-16 Representation
@subsection UTF-16 Representation

You can access a UTF-16 representation of a @samp{String} by iterating over
its @samp{utf16} property. This property is of type @samp{String.UTF16View}, which
is a collection of unsigned 16-bit (@samp{UInt16}) values, one for each
16-bit code unit in the string's UTF-16 representation:

@image{_images/UTF16_2x,,,,png}

@example
for codeUnit in dogString.utf16 @{
    print("\(codeUnit) ", terminator: "")
@}
print("")
// Prints "68 111 103 8252 55357 56374 "
@end example

Again, the first three @samp{codeUnit} values (@samp{68}, @samp{111}, @samp{103}) represent
the characters @samp{D}, @samp{o}, and @samp{g}, whose UTF-16 code units have the same
values as in the string's UTF-8 representation (because these Unicode
scalars represent ASCII characters).

The fourth @samp{codeUnit} value (@samp{8252}) is a decimal equivalent of the
hexadecimal value @samp{203C}, which represents the Unicode scalar @samp{U+203C}
for the @samp{DOUBLE EXCLAMATION MARK} character. This character can be
represented as a single code unit in UTF-16.

The fifth and sixth @samp{codeUnit} values (@samp{55357} and @samp{56374}) are a UTF-16
surrogate pair representation of the @samp{DOG FACE} character. These values
are a high-surrogate value of @samp{U+D83D} (decimal value @samp{55357}) and a
low-surrogate value of @samp{U+DC36} (decimal value @samp{56374}).

@node Unicode Scalar Representation
@subsection Unicode Scalar Representation

You can access a Unicode scalar representation of a @samp{String} value by
iterating over its @samp{unicodeScalars} property. This property is of type
@samp{UnicodeScalarView}, which is a collection of values of type
@samp{UnicodeScalar}.

Each @samp{UnicodeScalar} has a @samp{value} property that returns the scalar's
21-bit value, represented within a @samp{UInt32} value:

@image{_images/UnicodeScalar_2x,,,,png}

@example
for scalar in dogString.unicodeScalars @{
    print("\(scalar.value) ", terminator: "")
@}
print("")
// Prints "68 111 103 8252 128054 "
@end example

The @samp{value} properties for the first three @samp{UnicodeScalar} values (@samp{68},
@samp{111}, @samp{103}) once again represent the characters @samp{D}, @samp{o}, and @samp{g}.

The fourth @samp{codeUnit} value (@samp{8252}) is again a decimal equivalent of
the hexadecimal value @samp{203C}, which represents the Unicode scalar
@samp{U+203C} for the @samp{DOUBLE EXCLAMATION MARK} character.

The @samp{value} property of the fifth and final @samp{UnicodeScalar}, @samp{128054},
is a decimal equivalent of the hexadecimal value @samp{1F436}, which
represents the Unicode scalar @samp{U+1F436} for the @samp{DOG FACE} character.

As an alternative to querying their @samp{value} properties, each
@samp{UnicodeScalar} value can also be used to construct a new @samp{String}
value, such as with string interpolation:

@example
for scalar in dogString.unicodeScalars @{
    print("\(scalar) ")
@}
// D
// o
// g
// ‼
// 🐶
@end example

@node Collection Types
@chapter Collection Types

Swift provides three primary @emph{collection types}, known as arrays, sets,
and dictionaries, for storing collections of values. Arrays are ordered
collections of values. Sets are unordered collections of unique values.
Dictionaries are unordered collections of key-value associations.

@image{_images/CollectionTypes_intro_2x,,,,png}
Arrays, sets, and dictionaries in Swift are always clear about the types
of values and keys that they can store. This means that you cannot
insert a value of the wrong type into a collection by mistake. It also
means you can be confident about the type of values you will retrieve
from a collection.

Note

Swift's array, set, and dictionary types are implemented as @emph{generic
collections}. For more about generic types and collections, see
@ref{Generics}.

@menu
* Mutability of Collections::
* Arrays::
* Sets::
* Performing Set Operations::
* Dictionaries::
@end menu

@node Mutability of Collections
@section Mutability of Collections

If you create an array, a set, or a dictionary, and assign it to a
variable, the collection that is created will be @emph{mutable}. This means
that you can change (or @emph{mutate}) the collection after it's created by
adding, removing, or changing items in the collection. If you assign an
array, a set, or a dictionary to a constant, that collection is
@emph{immutable}, and its size and contents cannot be changed.

Note

It is good practice to create immutable collections in all cases where
the collection does not need to change. Doing so makes it easier for you
to reason about your code and enables the Swift compiler to optimize the
performance of the collections you create.

@node Arrays
@section Arrays

An @emph{array} stores values of the same type in an ordered list. The same
value can appear in an array multiple times at different positions.

Note

Swift's @samp{Array} type is bridged to Foundation's @samp{NSArray} class.

For more information about using @samp{Array} with Foundation and Cocoa, see
@uref{https://developer.apple.com/documentation/swift/array#2846730, Bridging
Between Array and NSArray}
[@uref{https://developer.apple.com/documentation/swift/array#2846730}].

@menu
* Array Type Shorthand Syntax::
* Creating an Empty Array::
* Creating an Array with a Default Value::
* Creating an Array by Adding Two Arrays Together::
* Creating an Array with an Array Literal::
* Accessing and Modifying an Array::
* Iterating Over an Array::
@end menu

@node Array Type Shorthand Syntax
@subsection Array Type Shorthand Syntax

The type of a Swift array is written in full as @samp{Array<Element>}, where
@samp{Element} is the type of values the array is allowed to store. You can
also write the type of an array in shorthand form as @samp{[Element]}.
Although the two forms are functionally identical, the shorthand form is
preferred and is used throughout this guide when referring to the type
of an array.

@node Creating an Empty Array
@subsection Creating an Empty Array

You can create an empty array of a certain type using initializer
syntax:

@example
var someInts = [Int]()
print("someInts is of type [Int] with \(someInts.count) items.")
// Prints "someInts is of type [Int] with 0 items."
@end example

Note that the type of the @samp{someInts} variable is inferred to be @samp{[Int]}
from the type of the initializer.

Alternatively, if the context already provides type information, such as
a function argument or an already typed variable or constant, you can
create an empty array with an empty array literal, which is written as
@samp{[]} (an empty pair of square brackets):

@example
someInts.append(3)
// someInts now contains 1 value of type Int
someInts = []
// someInts is now an empty array, but is still of type [Int]
@end example

@node Creating an Array with a Default Value
@subsection Creating an Array with a Default Value

Swift's @samp{Array} type also provides an initializer for creating an array
of a certain size with all of its values set to the same default value.
You pass this initializer a default value of the appropriate type
(called @samp{repeating}): and the number of times that value is repeated in
the new array (called @samp{count}):

@example
var threeDoubles = Array(repeating: 0.0, count: 3)
// threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]
@end example

@node Creating an Array by Adding Two Arrays Together
@subsection Creating an Array by Adding Two Arrays Together

You can create a new array by adding together two existing arrays with
compatible types with the addition operator (@samp{+}). The new array's type
is inferred from the type of the two arrays you add together:

@example
var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]

var sixDoubles = threeDoubles + anotherThreeDoubles
// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]
@end example

@node Creating an Array with an Array Literal
@subsection Creating an Array with an Array Literal

You can also initialize an array with an @emph{array literal}, which is a
shorthand way to write one or more values as an array collection. An
array literal is written as a list of values, separated by commas,
surrounded by a pair of square brackets:

@example
[value 1, value 2, value 3]
@end example

The example below creates an array called @samp{shoppingList} to store
@samp{String} values:

@example
var shoppingList: [String] = ["Eggs", "Milk"]
// shoppingList has been initialized with two initial items
@end example

The @samp{shoppingList} variable is declared as “an array of string values”,
written as @samp{[String]}. Because this particular array has specified a
value type of @samp{String}, it is allowed to store @samp{String} values only.
Here, the @samp{shoppingList} array is initialized with two @samp{String} values
(@samp{"Eggs"} and @samp{"Milk"}), written within an array literal.

Note

The @samp{shoppingList} array is declared as a variable (with the @samp{var}
introducer) and not a constant (with the @samp{let} introducer) because more
items are added to the shopping list in the examples below.

In this case, the array literal contains two @samp{String} values and nothing
else. This matches the type of the @samp{shoppingList} variable's declaration
(an array that can only contain @samp{String} values), and so the assignment
of the array literal is permitted as a way to initialize @samp{shoppingList}
with two initial items.

Thanks to Swift's type inference, you don't have to write the type of
the array if you're initializing it with an array literal containing
values of the same type. The initialization of @samp{shoppingList} could have
been written in a shorter form instead:

@example
var shoppingList = ["Eggs", "Milk"]
@end example

Because all values in the array literal are of the same type, Swift can
infer that @samp{[String]} is the correct type to use for the @samp{shoppingList}
variable.

@node Accessing and Modifying an Array
@subsection Accessing and Modifying an Array

You access and modify an array through its methods and properties, or by
using subscript syntax.

To find out the number of items in an array, check its read-only @samp{count}
property:

@example
print("The shopping list contains \(shoppingList.count) items.")
// Prints "The shopping list contains 2 items."
@end example

Use the Boolean @samp{isEmpty} property as a shortcut for checking whether
the @samp{count} property is equal to @samp{0}:

@example
if shoppingList.isEmpty @{
    print("The shopping list is empty.")
@} else @{
    print("The shopping list is not empty.")
@}
// Prints "The shopping list is not empty."
@end example

You can add a new item to the end of an array by calling the array's
@samp{append(_:)} method:

@example
shoppingList.append("Flour")
// shoppingList now contains 3 items, and someone is making pancakes
@end example

Alternatively, append an array of one or more compatible items with the
addition assignment operator (@samp{+=}):

@example
shoppingList += ["Baking Powder"]
// shoppingList now contains 4 items
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
// shoppingList now contains 7 items
@end example

Retrieve a value from the array by using @emph{subscript syntax}, passing the
index of the value you want to retrieve within square brackets
immediately after the name of the array:

@example
var firstItem = shoppingList[0]
// firstItem is equal to "Eggs"
@end example

Note

The first item in the array has an index of @samp{0}, not @samp{1}. Arrays in
Swift are always zero-indexed.

You can use subscript syntax to change an existing value at a given
index:

@example
shoppingList[0] = "Six eggs"
// the first item in the list is now equal to "Six eggs" rather than "Eggs"
@end example

When you use subscript syntax, the index you specify needs to be valid.
For example, writing @samp{shoppingList[shoppingList.count] = "Salt"} to try
to append an item to the end of the array results in a runtime error.

You can also use subscript syntax to change a range of values at once,
even if the replacement set of values has a different length than the
range you are replacing. The following example replaces
@samp{"Chocolate Spread"}, @samp{"Cheese"}, and @samp{"Butter"} with @samp{"Bananas"} and
@samp{"Apples"}:

@example
shoppingList[4...6] = ["Bananas", "Apples"]
// shoppingList now contains 6 items
@end example

To insert an item into the array at a specified index, call the array's
@samp{insert(_:at:)} method:

@example
shoppingList.insert("Maple Syrup", at: 0)
 // shoppingList now contains 7 items
// "Maple Syrup" is now the first item in the list
@end example

This call to the @samp{insert(_:at:)} method inserts a new item with a value
of @samp{"Maple Syrup"} at the very beginning of the shopping list, indicated
by an index of @samp{0}.

Similarly, you remove an item from the array with the @samp{remove(at:)}
method. This method removes the item at the specified index and returns
the removed item (although you can ignore the returned value if you do
not need it):

@example
let mapleSyrup = shoppingList.remove(at: 0)
// the item that was at index 0 has just been removed
// shoppingList now contains 6 items, and no Maple Syrup
// the mapleSyrup constant is now equal to the removed "Maple Syrup" string
@end example

Note

If you try to access or modify a value for an index that is outside of
an array's existing bounds, you will trigger a runtime error. You can
check that an index is valid before using it by comparing it to the
array's @samp{count} property. The largest valid index in an array is
@samp{count - 1} because arrays are indexed from zero---however, when @samp{count}
is @samp{0} (meaning the array is empty), there are no valid indexes.

Any gaps in an array are closed when an item is removed, and so the
value at index @samp{0} is once again equal to @samp{"Six eggs"}:

@example
firstItem = shoppingList[0]
// firstItem is now equal to "Six eggs"
@end example

If you want to remove the final item from an array, use the
@samp{removeLast()} method rather than the @samp{remove(at:)} method to avoid the
need to query the array's @samp{count} property. Like the @samp{remove(at:)}
method, @samp{removeLast()} returns the removed item:

@example
let apples = shoppingList.removeLast()
// the last item in the array has just been removed
// shoppingList now contains 5 items, and no apples
// the apples constant is now equal to the removed "Apples" string
@end example

@node Iterating Over an Array
@subsection Iterating Over an Array

You can iterate over the entire set of values in an array with the
@samp{for}-@samp{in} loop:

@example
for item in shoppingList @{
    print(item)
@}
// Six eggs
// Milk
// Flour
// Baking Powder
// Bananas
@end example

If you need the integer index of each item as well as its value, use the
@samp{enumerated()} method to iterate over the array instead. For each item
in the array, the @samp{enumerated()} method returns a tuple composed of an
integer and the item. The integers start at zero and count up by one for
each item; if you enumerate over a whole array, these integers match the
items' indices. You can decompose the tuple into temporary constants or
variables as part of the iteration:

@example
for (index, value) in shoppingList.enumerated() @{
    print("Item \(index + 1): \(value)")
@}
// Item 1: Six eggs
// Item 2: Milk
// Item 3: Flour
// Item 4: Baking Powder
// Item 5: Bananas
@end example

For more about the @samp{for}-@samp{in} loop, see
@ref{For-In Loops}.

@node Sets
@section Sets

A @emph{set} stores distinct values of the same type in a collection with no
defined ordering. You can use a set instead of an array when the order
of items is not important, or when you need to ensure that an item only
appears once.

Note

Swift's @samp{Set} type is bridged to Foundation's @samp{NSSet} class.

For more information about using @samp{Set} with Foundation and Cocoa, see
@uref{https://developer.apple.com/documentation/swift/set#2845530, Bridging
Between Set and NSSet}
[@uref{https://developer.apple.com/documentation/swift/set#2845530}].

@menu
* Hash Values for Set Types::
* Set Type Syntax::
* Creating and Initializing an Empty Set::
* Creating a Set with an Array Literal::
* Accessing and Modifying a Set::
* Iterating Over a Set::
@end menu

@node Hash Values for Set Types
@subsection Hash Values for Set Types

A type must be @emph{hashable} in order to be stored in a set---that is, the
type must provide a way to compute a @emph{hash value} for itself. A hash
value is an @samp{Int} value that is the same for all objects that compare
equally, such that if @samp{a =} b=, it follows that
@samp{a.hashValue =} b.hashValue=.

All of Swift's basic types (such as @samp{String}, @samp{Int}, @samp{Double}, and
@samp{Bool}) are hashable by default, and can be used as set value types or
dictionary key types. Enumeration case values without associated values
(as described in @ref{Enumeration}) are also hashable
by default.

Note

You can use your own custom types as set value types or dictionary key
types by making them conform to the @samp{Hashable} protocol from Swift's
standard library. Types that conform to the @samp{Hashable} protocol must
provide a gettable @samp{Int} property called @samp{hashValue}. The value returned
by a type's @samp{hashValue} property is not required to be the same across
different executions of the same program, or in different programs.

Because the @samp{Hashable} protocol conforms to @samp{Equatable}, conforming
types must also provide an implementation of the equals operator (@samp{==}).
The @samp{Equatable} protocol requires any conforming implementation of @samp{==}
to be an equivalence relation. That is, an implementation of @samp{==} must
satisfy the following three conditions, for all values @samp{a}, @samp{b}, and
@samp{c}:

@itemize
@item
@samp{a =} a= (Reflexivity)

@item
@samp{a =} b= implies @samp{b =} a= (Symmetry)

@item
@samp{a =} b && b @samp{= c} implies @samp{a =} c= (Transitivity)
@end itemize

For more information about conforming to protocols, see
@ref{Protocols}.

@node Set Type Syntax
@subsection Set Type Syntax

The type of a Swift set is written as @samp{Set<Element>}, where @samp{Element} is
the type that the set is allowed to store. Unlike arrays, sets do not
have an equivalent shorthand form.

@node Creating and Initializing an Empty Set
@subsection Creating and Initializing an Empty Set

You can create an empty set of a certain type using initializer syntax:

@example
var letters = Set<Character>()
print("letters is of type Set<Character> with \(letters.count) items.")
// Prints "letters is of type Set<Character> with 0 items."
@end example

Note

The type of the @samp{letters} variable is inferred to be @samp{Set<Character>},
from the type of the initializer.

Alternatively, if the context already provides type information, such as
a function argument or an already typed variable or constant, you can
create an empty set with an empty array literal:

@example
letters.insert("a")
// letters now contains 1 value of type Character
letters = []
// letters is now an empty set, but is still of type Set<Character>
@end example

@node Creating a Set with an Array Literal
@subsection Creating a Set with an Array Literal

You can also initialize a set with an array literal, as a shorthand way
to write one or more values as a set collection.

The example below creates a set called @samp{favoriteGenres} to store
@samp{String} values:

@example
var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop"]
// favoriteGenres has been initialized with three initial items
@end example

The @samp{favoriteGenres} variable is declared as “a set of @samp{String} values”,
written as @samp{Set<String>}. Because this particular set has specified a
value type of @samp{String}, it is @emph{only} allowed to store @samp{String} values.
Here, the @samp{favoriteGenres} set is initialized with three @samp{String} values
(@samp{"Rock"}, @samp{"Classical"}, and @samp{"Hip hop"}), written within an array
literal.

Note

The @samp{favoriteGenres} set is declared as a variable (with the @samp{var}
introducer) and not a constant (with the @samp{let} introducer) because items
are added and removed in the examples below.

A set type cannot be inferred from an array literal alone, so the type
@samp{Set} must be explicitly declared. However, because of Swift's type
inference, you don't have to write the type of the set's elements if
you're initializing it with an array literal that contains values of
just one type. The initialization of @samp{favoriteGenres} could have been
written in a shorter form instead:

@example
var favoriteGenres: Set = ["Rock", "Classical", "Hip hop"]
@end example

Because all values in the array literal are of the same type, Swift can
infer that @samp{Set<String>} is the correct type to use for the
@samp{favoriteGenres} variable.

@node Accessing and Modifying a Set
@subsection Accessing and Modifying a Set

You access and modify a set through its methods and properties.

To find out the number of items in a set, check its read-only @samp{count}
property:

@example
print("I have \(favoriteGenres.count) favorite music genres.")
// Prints "I have 3 favorite music genres."
@end example

Use the Boolean @samp{isEmpty} property as a shortcut for checking whether
the @samp{count} property is equal to @samp{0}:

@example
if favoriteGenres.isEmpty @{
    print("As far as music goes, I'm not picky.")
@} else @{
    print("I have particular music preferences.")
@}
// Prints "I have particular music preferences."
@end example

You can add a new item into a set by calling the set's @samp{insert(_:)}
method:

@example
favoriteGenres.insert("Jazz")
// favoriteGenres now contains 4 items
@end example

You can remove an item from a set by calling the set's @samp{remove(_:)}
method, which removes the item if it's a member of the set, and returns
the removed value, or returns @samp{nil} if the set did not contain it.
Alternatively, all items in a set can be removed with its @samp{removeAll()}
method.

@example
if let removedGenre = favoriteGenres.remove("Rock") @{
    print("\(removedGenre)? I'm over it.")
@} else @{
    print("I never much cared for that.")
@}
// Prints "Rock? I'm over it."
@end example

To check whether a set contains a particular item, use the
@samp{contains(_:)} method.

@example
if favoriteGenres.contains("Funk") @{
    print("I get up on the good foot.")
@} else @{
    print("It's too funky in here.")
@}
// Prints "It's too funky in here."
@end example

@node Iterating Over a Set
@subsection Iterating Over a Set

You can iterate over the values in a set with a @samp{for}-@samp{in} loop.

@example
for genre in favoriteGenres @{
    print("\(genre)")
@}
// Classical
// Jazz
// Hip hop
@end example

For more about the @samp{for}-@samp{in} loop, see
@ref{For-In Loops}.

Swift's @samp{Set} type does not have a defined ordering. To iterate over the
values of a set in a specific order, use the @samp{sorted()} method, which
returns the set's elements as an array sorted using the @samp{<} operator.

@example
for genre in favoriteGenres.sorted() @{
    print("\(genre)")
@}
// Classical
// Hip hop
// Jazz
@end example

@node Performing Set Operations
@section Performing Set Operations

You can efficiently perform fundamental set operations, such as
combining two sets together, determining which values two sets have in
common, or determining whether two sets contain all, some, or none of
the same values.

@menu
* Fundamental Set Operations::
* Set Membership and Equality::
@end menu

@node Fundamental Set Operations
@subsection Fundamental Set Operations

The illustration below depicts two sets---@samp{a} and @samp{b}---with the results
of various set operations represented by the shaded regions.

@image{_images/setVennDiagram_2x,,,,png}

@itemize
@item
Use the @samp{intersection(_:)} method to create a new set with only the
values common to both sets.

@item
Use the @samp{symmetricDifference(_:)} method to create a new set with
values in either set, but not both.

@item
Use the @samp{union(_:)} method to create a new set with all of the values
in both sets.

@item
Use the @samp{subtracting(_:)} method to create a new set with values not
in the specified set.
@end itemize

@example
let oddDigits: Set = [1, 3, 5, 7, 9]
let evenDigits: Set = [0, 2, 4, 6, 8]
let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]

oddDigits.union(evenDigits).sorted()
// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
oddDigits.intersection(evenDigits).sorted()
// []
oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
// [1, 9]
oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()
// [1, 2, 9]
@end example

@node Set Membership and Equality
@subsection Set Membership and Equality

The illustration below depicts three sets---@samp{a}, @samp{b} and @samp{c}---with
overlapping regions representing elements shared among sets. Set @samp{a} is
a @emph{superset} of set @samp{b}, because @samp{a} contains all elements in @samp{b}.
Conversely, set @samp{b} is a @emph{subset} of set @samp{a}, because all elements in
@samp{b} are also contained by @samp{a}. Set @samp{b} and set @samp{c} are @emph{disjoint} with
one another, because they share no elements in common.

@image{_images/setEulerDiagram_2x,,,,png}

@itemize
@item
Use the “is equal” operator (@samp{==}) to determine whether two sets
contain all of the same values.

@item
Use the @samp{isSubset(of:)} method to determine whether all of the values
of a set are contained in the specified set.

@item
Use the @samp{isSuperset(of:)} method to determine whether a set contains
all of the values in a specified set.

@item
Use the @samp{isStrictSubset(of:)} or @samp{isStrictSuperset(of:)} methods to
determine whether a set is a subset or superset, but not equal to, a
specified set.

@item
Use the @samp{isDisjoint(with:)} method to determine whether two sets have
no values in common.
@end itemize

@example
let houseAnimals: Set = ["🐶", "🐱"]
let farmAnimals: Set = ["🐮", "🐔", "🐑", "🐶", "🐱"]
let cityAnimals: Set = ["🐦", "🐭"]

houseAnimals.isSubset(of: farmAnimals)
// true
farmAnimals.isSuperset(of: houseAnimals)
// true
farmAnimals.isDisjoint(with: cityAnimals)
// true
@end example

@node Dictionaries
@section Dictionaries

A @emph{dictionary} stores associations between keys of the same type and
values of the same type in a collection with no defined ordering. Each
value is associated with a unique @emph{key}, which acts as an identifier for
that value within the dictionary. Unlike items in an array, items in a
dictionary do not have a specified order. You use a dictionary when you
need to look up values based on their identifier, in much the same way
that a real-world dictionary is used to look up the definition for a
particular word.

Note

Swift's @samp{Dictionary} type is bridged to Foundation's @samp{NSDictionary}
class.

For more information about using @samp{Dictionary} with Foundation and Cocoa,
see
@uref{https://developer.apple.com/documentation/swift/dictionary#2846239, Bridging
Between Dictionary and NSDictionary}
[@uref{https://developer.apple.com/documentation/swift/dictionary#2846239}].

@menu
* Dictionary Type Shorthand Syntax::
* Creating an Empty Dictionary::
* Creating a Dictionary with a Dictionary Literal::
* Accessing and Modifying a Dictionary::
* Iterating Over a Dictionary::
@end menu

@node Dictionary Type Shorthand Syntax
@subsection Dictionary Type Shorthand Syntax

The type of a Swift dictionary is written in full as
@samp{Dictionary<Key, Value>}, where @samp{Key} is the type of value that can be
used as a dictionary key, and @samp{Value} is the type of value that the
dictionary stores for those keys.

Note

A dictionary @samp{Key} type must conform to the @samp{Hashable} protocol, like a
set's value type.

You can also write the type of a dictionary in shorthand form as
@samp{[Key: Value]}. Although the two forms are functionally identical, the
shorthand form is preferred and is used throughout this guide when
referring to the type of a dictionary.

@node Creating an Empty Dictionary
@subsection Creating an Empty Dictionary

As with arrays, you can create an empty @samp{Dictionary} of a certain type
by using initializer syntax:

@example
var namesOfIntegers = [Int: String]()
// namesOfIntegers is an empty [Int: String] dictionary
@end example

This example creates an empty dictionary of type @samp{[Int: String]} to
store human-readable names of integer values. Its keys are of type
@samp{Int}, and its values are of type @samp{String}.

If the context already provides type information, you can create an
empty dictionary with an empty dictionary literal, which is written as
@samp{[:]} (a colon inside a pair of square brackets):

@example
namesOfIntegers[16] = "sixteen"
// namesOfIntegers now contains 1 key-value pair
namesOfIntegers = [:]
// namesOfIntegers is once again an empty dictionary of type [Int: String]
@end example

@node Creating a Dictionary with a Dictionary Literal
@subsection Creating a Dictionary with a Dictionary Literal

You can also initialize a dictionary with a @emph{dictionary literal}, which
has a similar syntax to the array literal seen earlier. A dictionary
literal is a shorthand way to write one or more key-value pairs as a
@samp{Dictionary} collection.

A @emph{key-value pair} is a combination of a key and a value. In a
dictionary literal, the key and value in each key-value pair are
separated by a colon. The key-value pairs are written as a list,
separated by commas, surrounded by a pair of square brackets:

@example
[key 1: value 1, key 2: value 2, key 3: value 3]
@end example

The example below creates a dictionary to store the names of
international airports. In this dictionary, the keys are three-letter
International Air Transport Association codes, and the values are
airport names:

@example
var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
@end example

The @samp{airports} dictionary is declared as having a type of
@samp{[String: String]}, which means “a @samp{Dictionary} whose keys are of type
@samp{String}, and whose values are also of type =String=”.

Note

The @samp{airports} dictionary is declared as a variable (with the @samp{var}
introducer), and not a constant (with the @samp{let} introducer), because
more airports are added to the dictionary in the examples below.

The @samp{airports} dictionary is initialized with a dictionary literal
containing two key-value pairs. The first pair has a key of @samp{"YYZ"} and
a value of @samp{"Toronto Pearson"}. The second pair has a key of @samp{"DUB"} and
a value of @samp{"Dublin"}.

This dictionary literal contains two @samp{String: String} pairs. This
key-value type matches the type of the @samp{airports} variable declaration
(a dictionary with only @samp{String} keys, and only @samp{String} values), and so
the assignment of the dictionary literal is permitted as a way to
initialize the @samp{airports} dictionary with two initial items.

As with arrays, you don't have to write the type of the dictionary if
you're initializing it with a dictionary literal whose keys and values
have consistent types. The initialization of @samp{airports} could have been
written in a shorter form instead:

@example
var airports = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
@end example

Because all keys in the literal are of the same type as each other, and
likewise all values are of the same type as each other, Swift can infer
that @samp{[String: String]} is the correct type to use for the @samp{airports}
dictionary.

@node Accessing and Modifying a Dictionary
@subsection Accessing and Modifying a Dictionary

You access and modify a dictionary through its methods and properties,
or by using subscript syntax.

As with an array, you find out the number of items in a @samp{Dictionary} by
checking its read-only @samp{count} property:

@example
print("The airports dictionary contains \(airports.count) items.")
// Prints "The airports dictionary contains 2 items."
@end example

Use the Boolean @samp{isEmpty} property as a shortcut for checking whether
the @samp{count} property is equal to @samp{0}:

@example
if airports.isEmpty @{
    print("The airports dictionary is empty.")
@} else @{
    print("The airports dictionary is not empty.")
@}
// Prints "The airports dictionary is not empty."
@end example

You can add a new item to a dictionary with subscript syntax. Use a new
key of the appropriate type as the subscript index, and assign a new
value of the appropriate type:

@example
airports["LHR"] = "London"
// the airports dictionary now contains 3 items
@end example

You can also use subscript syntax to change the value associated with a
particular key:

@example
airports["LHR"] = "London Heathrow"
// the value for "LHR" has been changed to "London Heathrow"
@end example

As an alternative to subscripting, use a dictionary's
@samp{updateValue(_:forKey:)} method to set or update the value for a
particular key. Like the subscript examples above, the
@samp{updateValue(_:forKey:)} method sets a value for a key if none exists,
or updates the value if that key already exists. Unlike a subscript,
however, the @samp{updateValue(_:forKey:)} method returns the @emph{old} value
after performing an update. This enables you to check whether or not an
update took place.

The @samp{updateValue(_:forKey:)} method returns an optional value of the
dictionary's value type. For a dictionary that stores @samp{String} values,
for example, the method returns a value of type @samp{String?}, or “optional
@samp{String=”. This optional value contains the old value for that key if
one existed before the update, or =nil} if no value existed:

@example
if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") @{
    print("The old value for DUB was \(oldValue).")
@}
// Prints "The old value for DUB was Dublin."
@end example

You can also use subscript syntax to retrieve a value from the
dictionary for a particular key. Because it is possible to request a key
for which no value exists, a dictionary's subscript returns an optional
value of the dictionary's value type. If the dictionary contains a value
for the requested key, the subscript returns an optional value
containing the existing value for that key. Otherwise, the subscript
returns @samp{nil}:

@example
if let airportName = airports["DUB"] @{
    print("The name of the airport is \(airportName).")
@} else @{
    print("That airport is not in the airports dictionary.")
@}
// Prints "The name of the airport is Dublin Airport."
@end example

You can use subscript syntax to remove a key-value pair from a
dictionary by assigning a value of @samp{nil} for that key:

@example
airports["APL"] = "Apple International"
// "Apple International" is not the real airport for APL, so delete it
airports["APL"] = nil
// APL has now been removed from the dictionary
@end example

Alternatively, remove a key-value pair from a dictionary with the
@samp{removeValue(forKey:)} method. This method removes the key-value pair if
it exists and returns the removed value, or returns @samp{nil} if no value
existed:

@example
if let removedValue = airports.removeValue(forKey: "DUB") @{
    print("The removed airport's name is \(removedValue).")
@} else @{
    print("The airports dictionary does not contain a value for DUB.")
@}
// Prints "The removed airport's name is Dublin Airport."
@end example

@node Iterating Over a Dictionary
@subsection Iterating Over a Dictionary

You can iterate over the key-value pairs in a dictionary with a
@samp{for}-@samp{in} loop. Each item in the dictionary is returned as a
@samp{(key, value)} tuple, and you can decompose the tuple's members into
temporary constants or variables as part of the iteration:

@example
for (airportCode, airportName) in airports @{
    print("\(airportCode): \(airportName)")
@}
// YYZ: Toronto Pearson
// LHR: London Heathrow
@end example

For more about the @samp{for}-@samp{in} loop, see
@ref{For-In Loops}.

You can also retrieve an iterable collection of a dictionary's keys or
values by accessing its @samp{keys} and @samp{values} properties:

@example
for airportCode in airports.keys @{
    print("Airport code: \(airportCode)")
@}
// Airport code: YYZ
// Airport code: LHR

for airportName in airports.values @{
    print("Airport name: \(airportName)")
@}
// Airport name: Toronto Pearson
// Airport name: London Heathrow
@end example

If you need to use a dictionary's keys or values with an API that takes
an @samp{Array} instance, initialize a new array with the @samp{keys} or @samp{values}
property:

@example
let airportCodes = [String](airports.keys)
// airportCodes is ["YYZ", "LHR"]
let airportNames = [String](airports.values)
// airportNames is ["Toronto Pearson", "London Heathrow"]
@end example

Swift's @samp{Dictionary} type does not have a defined ordering. To iterate
over the keys or values of a dictionary in a specific order, use the
@samp{sorted()} method on its @samp{keys} or @samp{values} property.

@node Control Flow 1
@chapter Control Flow

Swift provides a variety of control flow statements. These include
@samp{while} loops to perform a task multiple times; @samp{if}, @samp{guard}, and
@samp{switch} statements to execute different branches of code based on
certain conditions; and statements such as @samp{break} and @samp{continue} to
transfer the flow of execution to another point in your code.

Swift also provides a @samp{for}-@samp{in} loop that makes it easy to iterate over
arrays, dictionaries, ranges, strings, and other sequences.

Swift's @samp{switch} statement is considerably more powerful than its
counterpart in many C-like languages. Cases can match many different
patterns, including interval matches, tuples, and casts to a specific
type. Matched values in a @samp{switch} case can be bound to temporary
constants or variables for use within the case's body, and complex
matching conditions can be expressed with a @samp{where} clause for each
case.

@menu
* For-In Loops::
* While Loops::
* Conditional Statements::
* Control Transfer Statements::
* Early Exit::
* Checking API Availability::
@end menu

@node For-In Loops
@section For-In Loops

You use the @samp{for}-@samp{in} loop to iterate over a sequence, such as items in
an array, ranges of numbers, or characters in a string.

This example uses a @samp{for}-@samp{in} loop to iterate over the items in an
array:

@example
let names = ["Anna", "Alex", "Brian", "Jack"]
for name in names @{
    print("Hello, \(name)!")
@}
// Hello, Anna!
// Hello, Alex!
// Hello, Brian!
// Hello, Jack!
@end example

You can also iterate over a dictionary to access its key-value pairs.
Each item in the dictionary is returned as a @samp{(key, value)} tuple when
the dictionary is iterated, and you can decompose the @samp{(key, value)}
tuple's members as explicitly named constants for use within the body of
the @samp{for}-@samp{in} loop. In the code example below, the dictionary's keys
are decomposed into a constant called @samp{animalName}, and the dictionary's
values are decomposed into a constant called @samp{legCount}.

@example
let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs @{
    print("\(animalName)s have \(legCount) legs")
@}
// ants have 6 legs
// cats have 4 legs
// spiders have 8 legs
@end example

The contents of a @samp{Dictionary} are inherently unordered, and iterating
over them does not guarantee the order in which they will be retrieved.
In particular, the order you insert items into a @samp{Dictionary} doesn't
define the order they are iterated. For more about arrays and
dictionaries, see @ref{Collection Types}.

You can also use @samp{for}-@samp{in} loops with numeric ranges. This example
prints the first few entries in a five-times table:

@example
for index in 1...5 @{
    print("\(index) times 5 is \(index * 5)")
@}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25
@end example

The sequence being iterated over is a range of numbers from @samp{1} to @samp{5},
inclusive, as indicated by the use of the closed range operator (@samp{...}).
The value of @samp{index} is set to the first number in the range (@samp{1}), and
the statements inside the loop are executed. In this case, the loop
contains only one statement, which prints an entry from the five-times
table for the current value of @samp{index}. After the statement is executed,
the value of @samp{index} is updated to contain the second value in the range
(@samp{2}), and the @samp{print(_:separator:terminator:)} function is called
again. This process continues until the end of the range is reached.

In the example above, @samp{index} is a constant whose value is automatically
set at the start of each iteration of the loop. As such, @samp{index} does
not have to be declared before it is used. It is implicitly declared
simply by its inclusion in the loop declaration, without the need for a
@samp{let} declaration keyword.

If you don't need each value from a sequence, you can ignore the values
by using an underscore in place of a variable name.

@example
let base = 3
let power = 10
var answer = 1
for _ in 1...power @{
    answer *= base
@}
print("\(base) to the power of \(power) is \(answer)")
// Prints "3 to the power of 10 is 59049"
@end example

The example above calculates the value of one number to the power of
another (in this case, @samp{3} to the power of @samp{10}). It multiplies a
starting value of @samp{1} (that is, @samp{3} to the power of @samp{0}) by @samp{3}, ten
times, using a closed range that starts with @samp{1} and ends with @samp{10}. For
this calculation, the individual counter values each time through the
loop are unnecessary---the code simply executes the loop the correct
number of times. The underscore character (@samp{_}) used in place of a loop
variable causes the individual values to be ignored and does not provide
access to the current value during each iteration of the loop.

In some situations, you might not want to use closed ranges, which
include both endpoints. Consider drawing the tick marks for every minute
on a watch face. You want to draw @samp{60} tick marks, starting with the @samp{0}
minute. Use the half-open range operator (@samp{..<}) to include the lower
bound but not the upper bound. For more about ranges, see
@ref{Range Operators}.

@example
let minutes = 60
for tickMark in 0..<minutes @{
    // render the tick mark each minute (60 times)
@}
@end example

Some users might want fewer tick marks in their UI. They could prefer
one mark every @samp{5} minutes instead. Use the @samp{stride(from:to:by:)}
function to skip the unwanted marks.

@example
let minuteInterval = 5
for tickMark in stride(from: 0, to: minutes, by: minuteInterval) @{
    // render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)
@}
@end example

Closed ranges are also available, by using @samp{stride(from:through:by:)}
instead:

@example
let hours = 12
let hourInterval = 3
for tickMark in stride(from: 3, through: hours, by: hourInterval) @{
    // render the tick mark every 3 hours (3, 6, 9, 12)
@}
@end example

@node While Loops
@section While Loops

A @samp{while} loop performs a set of statements until a condition becomes
@samp{false}. These kinds of loops are best used when the number of
iterations is not known before the first iteration begins. Swift
provides two kinds of @samp{while} loops:

@itemize
@item
@samp{while} evaluates its condition at the start of each pass through the
loop.

@item
@samp{repeat}-@samp{while} evaluates its condition at the end of each pass
through the loop.
@end itemize

@menu
* While::
* Repeat-While::
@end menu

@node While
@subsection While

A @samp{while} loop starts by evaluating a single condition. If the condition
is @samp{true}, a set of statements is repeated until the condition becomes
@samp{false}.

Here's the general form of a @samp{while} loop:

@example
while condition @{
    statements
@}
@end example

This example plays a simple game of @emph{Snakes and Ladders} (also known as
@emph{Chutes and Ladders}):

@image{_images/snakesAndLadders_2x,,,,png}
The rules of the game are as follows:

@itemize
@item
The board has 25 squares, and the aim is to land on or beyond square
@enumerate
@item
@end enumerate

@item
The player's starting square is “square zero”, which is just off the
bottom-left corner of the board.

@item
Each turn, you roll a six-sided dice and move by that number of
squares, following the horizontal path indicated by the dotted arrow
above.

@item
If your turn ends at the bottom of a ladder, you move up that ladder.

@item
If your turn ends at the head of a snake, you move down that snake.
@end itemize

The game board is represented by an array of @samp{Int} values. Its size is
based on a constant called @samp{finalSquare}, which is used to initialize
the array and also to check for a win condition later in the example.
Because the players start off the board, on “square zero”, the board is
initialized with 26 zero @samp{Int} values, not 25.

@example
let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)
@end example

Some squares are then set to have more specific values for the snakes
and ladders. Squares with a ladder base have a positive number to move
you up the board, whereas squares with a snake head have a negative
number to move you back down the board.

@example
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
@end example

Square 3 contains the bottom of a ladder that moves you up to square 11.
To represent this, @samp{board[03]} is equal to @samp{+08}, which is equivalent to
an integer value of @samp{8} (the difference between @samp{3} and @samp{11}). To align
the values and statements, the unary plus operator (@samp{+i}) is explicitly
used with the unary minus operator (@samp{-i}) and numbers lower than @samp{10}
are padded with zeros. (Neither stylistic technique is strictly
necessary, but they lead to neater code.)

@example
var square = 0
var diceRoll = 0
while square < finalSquare @{
    // roll the dice
    diceRoll += 1
    if diceRoll == 7 @{ diceRoll = 1 @}
    // move by the rolled amount
    square += diceRoll
    if square < board.count @{
        // if we're still on the board, move up or down for a snake or a ladder
        square += board[square]
    @}
@}
print("Game over!")
@end example

The example above uses a very simple approach to dice rolling. Instead
of generating a random number, it starts with a @samp{diceRoll} value of @samp{0}.
Each time through the @samp{while} loop, @samp{diceRoll} is incremented by one and
is then checked to see whether it has become too large. Whenever this
return value equals @samp{7}, the dice roll has become too large and is reset
to a value of @samp{1}. The result is a sequence of @samp{diceRoll} values that is
always @samp{1}, @samp{2}, @samp{3}, @samp{4}, @samp{5}, @samp{6}, @samp{1}, @samp{2} and so on.

After rolling the dice, the player moves forward by @samp{diceRoll} squares.
It's possible that the dice roll may have moved the player beyond square
25, in which case the game is over. To cope with this scenario, the code
checks that @samp{square} is less than the @samp{board} array's @samp{count} property.
If @samp{square} is valid, the value stored in @samp{board[square]} is added to
the current @samp{square} value to move the player up or down any ladders or
snakes.

Note

If this check is not performed, @samp{board[square]} might try to access a
value outside the bounds of the @samp{board} array, which would trigger a
runtime error.

The current @samp{while} loop execution then ends, and the loop's condition
is checked to see if the loop should be executed again. If the player
has moved on or beyond square number @samp{25}, the loop's condition
evaluates to @samp{false} and the game ends.

A @samp{while} loop is appropriate in this case, because the length of the
game is not clear at the start of the @samp{while} loop. Instead, the loop is
executed until a particular condition is satisfied.

@node Repeat-While
@subsection Repeat-While

The other variation of the @samp{while} loop, known as the @samp{repeat}-@samp{while}
loop, performs a single pass through the loop block first, @emph{before}
considering the loop's condition. It then continues to repeat the loop
until the condition is @samp{false}.

Note

The @samp{repeat}-@samp{while} loop in Swift is analogous to a @samp{do}-@samp{while} loop
in other languages.

Here's the general form of a @samp{repeat}-@samp{while} loop:

@example
repeat @{
    statements
@} while condition
@end example

Here's the @emph{Snakes and Ladders} example again, written as a
@samp{repeat}-@samp{while} loop rather than a @samp{while} loop. The values of
@samp{finalSquare}, @samp{board}, @samp{square}, and @samp{diceRoll} are initialized in
exactly the same way as with a @samp{while} loop.

@example
let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
var square = 0
var diceRoll = 0
@end example

In this version of the game, the @emph{first} action in the loop is to check
for a ladder or a snake. No ladder on the board takes the player
straight to square 25, and so it isn't possible to win the game by
moving up a ladder. Therefore, it's safe to check for a snake or a
ladder as the first action in the loop.

At the start of the game, the player is on “square zero”. @samp{board[0]}
always equals @samp{0} and has no effect.

@example
repeat @{
    // move up or down for a snake or ladder
    square += board[square]
    // roll the dice
    diceRoll += 1
    if diceRoll == 7 @{ diceRoll = 1 @}
    // move by the rolled amount
    square += diceRoll
@} while square < finalSquare
print("Game over!")
@end example

After the code checks for snakes and ladders, the dice is rolled and the
player is moved forward by @samp{diceRoll} squares. The current loop
execution then ends.

The loop's condition (@samp{while square < finalSquare}) is the same as
before, but this time it's not evaluated until the @emph{end} of the first
run through the loop. The structure of the @samp{repeat}-@samp{while} loop is
better suited to this game than the @samp{while} loop in the previous
example. In the @samp{repeat}-@samp{while} loop above, @samp{square +} board[square]=
is always executed @emph{immediately after} the loop's @samp{while} condition
confirms that @samp{square} is still on the board. This behavior removes the
need for the array bounds check seen in the @samp{while} loop version of the
game described earlier.

@node Conditional Statements
@section Conditional Statements

It is often useful to execute different pieces of code based on certain
conditions. You might want to run an extra piece of code when an error
occurs, or to display a message when a value becomes too high or too
low. To do this, you make parts of your code @emph{conditional}.

Swift provides two ways to add conditional branches to your code: the
@samp{if} statement and the @samp{switch} statement. Typically, you use the @samp{if}
statement to evaluate simple conditions with only a few possible
outcomes. The @samp{switch} statement is better suited to more complex
conditions with multiple possible permutations and is useful in
situations where pattern matching can help select an appropriate code
branch to execute.

@menu
* If::
* Switch::
@end menu

@node If
@subsection If

@findex if

In its simplest form, the @samp{if} statement has a single @samp{if} condition. It
executes a set of statements only if that condition is @samp{true}.

@example
var temperatureInFahrenheit = 30
if temperatureInFahrenheit <= 32 @{
    print("It's very cold. Consider wearing a scarf.")
@}
// Prints "It's very cold. Consider wearing a scarf."
@end example

The example above checks whether the temperature is less than or equal
to 32 degrees Fahrenheit (the freezing point of water). If it is, a
message is printed. Otherwise, no message is printed, and code execution
continues after the @samp{if} statement's closing brace.

The @samp{if} statement can provide an alternative set of statements, known
as an @emph{else clause}, for situations when the @samp{if} condition is @samp{false}.
These statements are indicated by the @samp{else} keyword.

@example
temperatureInFahrenheit = 40
if temperatureInFahrenheit <= 32 @{
    print("It's very cold. Consider wearing a scarf.")
@} else @{
    print("It's not that cold. Wear a t-shirt.")
@}
// Prints "It's not that cold. Wear a t-shirt."
@end example

One of these two branches is always executed. Because the temperature
has increased to @samp{40} degrees Fahrenheit, it is no longer cold enough to
advise wearing a scarf and so the @samp{else} branch is triggered instead.

You can chain multiple @samp{if} statements together to consider additional
clauses.

@example
temperatureInFahrenheit = 90
if temperatureInFahrenheit <= 32 @{
    print("It's very cold. Consider wearing a scarf.")
@} else if temperatureInFahrenheit >= 86 @{
    print("It's really warm. Don't forget to wear sunscreen.")
@} else @{
    print("It's not that cold. Wear a t-shirt.")
@}
// Prints "It's really warm. Don't forget to wear sunscreen."
@end example

Here, an additional @samp{if} statement was added to respond to particularly
warm temperatures. The final @samp{else} clause remains, and it prints a
response for any temperatures that are neither too warm nor too cold.

The final @samp{else} clause is optional, however, and can be excluded if the
set of conditions does not need to be complete.

@example
temperatureInFahrenheit = 72
if temperatureInFahrenheit <= 32 @{
    print("It's very cold. Consider wearing a scarf.")
@} else if temperatureInFahrenheit >= 86 @{
    print("It's really warm. Don't forget to wear sunscreen.")
@}
@end example

Because the temperature is neither too cold nor too warm to trigger the
@samp{if} or @samp{else if} conditions, no message is printed.

@node Switch
@subsection Switch

@findex switch

A @samp{switch} statement considers a value and compares it against several
possible matching patterns. It then executes an appropriate block of
code, based on the first pattern that matches successfully. A @samp{switch}
statement provides an alternative to the @samp{if} statement for responding
to multiple potential states.

In its simplest form, a @samp{switch} statement compares a value against one
or more values of the same type.

@example
switch some value to consider @{
case value 1:
    respond to value 1
case value 2,
     value 3:
    respond to value 2 or 3
default:
    otherwise, do something else
@}
@end example

Every @samp{switch} statement consists of multiple possible @emph{cases}, each of
which begins with the @samp{case} keyword. In addition to comparing against
specific values, Swift provides several ways for each case to specify
more complex matching patterns. These options are described later in
this chapter.

Like the body of an @samp{if} statement, each @samp{case} is a separate branch of
code execution. The @samp{switch} statement determines which branch should be
selected. This procedure is known as @emph{switching} on the value that is
being considered.

Every @samp{switch} statement must be @emph{exhaustive}. That is, every possible
value of the type being considered must be matched by one of the
@samp{switch} cases. If it's not appropriate to provide a case for every
possible value, you can define a default case to cover any values that
are not addressed explicitly. This default case is indicated by the
@samp{default} keyword, and must always appear last.

This example uses a @samp{switch} statement to consider a single lowercase
character called @samp{someCharacter}:

@example
let someCharacter: Character = "z"
switch someCharacter @{
case "a":
    print("The first letter of the alphabet")
case "z":
    print("The last letter of the alphabet")
default:
    print("Some other character")
@}
// Prints "The last letter of the alphabet"
@end example

The @samp{switch} statement's first case matches the first letter of the
English alphabet, @samp{a}, and its second case matches the last letter, @samp{z}.
Because the @samp{switch} must have a case for every possible character, not
just every alphabetic character, this @samp{switch} statement uses a
@samp{default} case to match all characters other than @samp{a} and @samp{z}. This
provision ensures that the @samp{switch} statement is exhaustive.

@enumerate
@item
No Implicit Fallthrough


In contrast with @samp{switch} statements in C and Objective-C, @samp{switch}
statements in Swift do not fall through the bottom of each case and into
the next one by default. Instead, the entire @samp{switch} statement finishes
its execution as soon as the first matching @samp{switch} case is completed,
without requiring an explicit @samp{break} statement. This makes the @samp{switch}
statement safer and easier to use than the one in C and avoids executing
more than one @samp{switch} case by mistake.

Note

Although @samp{break} is not required in Swift, you can use a @samp{break}
statement to match and ignore a particular case or to break out of a
matched case before that case has completed its execution. For details,
see Break in a Switch Statement.

The body of each case @emph{must} contain at least one executable statement.
It is not valid to write the following code, because the first case is
empty:

@example
let anotherCharacter: Character = "a"
switch anotherCharacter @{
case "a": // Invalid, the case has an empty body
case "A":
    print("The letter A")
default:
    print("Not the letter A")
@}
// This will report a compile-time error.
@end example

Unlike a @samp{switch} statement in C, this @samp{switch} statement does not match
both @samp{"a"} and @samp{"A"}. Rather, it reports a compile-time error that
@samp{case "a":} does not contain any executable statements. This approach
avoids accidental fallthrough from one case to another and makes for
safer code that is clearer in its intent.

To make a @samp{switch} with a single case that matches both @samp{"a"} and @samp{"A"},
combine the two values into a compound case, separating the values with
commas.

@example
let anotherCharacter: Character = "a"
switch anotherCharacter @{
case "a", "A":
    print("The letter A")
default:
    print("Not the letter A")
@}
// Prints "The letter A"
@end example

For readability, a compound case can also be written over multiple
lines. For more information about compound cases, see Compound Cases.

Note

To explicitly fall through at the end of a particular @samp{switch} case, use
the @samp{fallthrough} keyword, as described in
@ref{Fallthrough}.

@item
Interval Matching


Values in @samp{switch} cases can be checked for their inclusion in an
interval. This example uses number intervals to provide a
natural-language count for numbers of any size:

@example
let approximateCount = 62
let countedThings = "moons orbiting Saturn"
let naturalCount: String
switch approximateCount @{
case 0:
    naturalCount = "no"
case 1..<5:
    naturalCount = "a few"
case 5..<12:
    naturalCount = "several"
case 12..<100:
    naturalCount = "dozens of"
case 100..<1000:
    naturalCount = "hundreds of"
default:
    naturalCount = "many"
@}
print("There are \(naturalCount) \(countedThings).")
// Prints "There are dozens of moons orbiting Saturn."
@end example

In the above example, @samp{approximateCount} is evaluated in a @samp{switch}
statement. Each @samp{case} compares that value to a number or interval.
Because the value of @samp{approximateCount} falls between 12 and 100,
@samp{naturalCount} is assigned the value @samp{"dozens of"}, and execution is
transferred out of the @samp{switch} statement.

@item
Tuples


You can use tuples to test multiple values in the same @samp{switch}
statement. Each element of the tuple can be tested against a different
value or interval of values. Alternatively, use the underscore character
(@samp{_}), also known as the wildcard pattern, to match any possible value.

The example below takes an (x, y) point, expressed as a simple tuple of
type @samp{(Int, Int)}, and categorizes it on the graph that follows the
example.

@example
let somePoint = (1, 1)
switch somePoint @{
case (0, 0):
    print("\(somePoint) is at the origin")
case (_, 0):
    print("\(somePoint) is on the x-axis")
case (0, _):
    print("\(somePoint) is on the y-axis")
case (-2...2, -2...2):
    print("\(somePoint) is inside the box")
default:
    print("\(somePoint) is outside of the box")
@}
// Prints "(1, 1) is inside the box"
@end example

@image{_images/coordinateGraphSimple_2x,,,,png}
The @samp{switch} statement determines whether the point is at the origin (0,
0), on the red x-axis, on the orange y-axis, inside the blue 4-by-4 box
centered on the origin, or outside of the box.

Unlike C, Swift allows multiple @samp{switch} cases to consider the same
value or values. In fact, the point (0, 0) could match all @emph{four} of the
cases in this example. However, if multiple matches are possible, the
first matching case is always used. The point (0, 0) would match
@samp{case (0, 0)} first, and so all other matching cases would be ignored.

@item
Value Bindings


A @samp{switch} case can name the value or values it matches to temporary
constants or variables, for use in the body of the case. This behavior
is known as @emph{value binding}, because the values are bound to temporary
constants or variables within the case's body.

The example below takes an (x, y) point, expressed as a tuple of type
@samp{(Int, Int)}, and categorizes it on the graph that follows:

@example
let anotherPoint = (2, 0)
switch anotherPoint @{
case (let x, 0):
    print("on the x-axis with an x value of \(x)")
case (0, let y):
    print("on the y-axis with a y value of \(y)")
case let (x, y):
    print("somewhere else at (\(x), \(y))")
@}
// Prints "on the x-axis with an x value of 2"
@end example

@image{_images/coordinateGraphMedium_2x,,,,png}
The @samp{switch} statement determines whether the point is on the red
x-axis, on the orange y-axis, or elsewhere (on neither axis).

The three @samp{switch} cases declare placeholder constants @samp{x} and @samp{y},
which temporarily take on one or both tuple values from @samp{anotherPoint}.
The first case, @samp{case (let x, 0)}, matches any point with a @samp{y} value of
@samp{0} and assigns the point's @samp{x} value to the temporary constant @samp{x}.
Similarly, the second case, @samp{case (0, let y)}, matches any point with an
@samp{x} value of @samp{0} and assigns the point's @samp{y} value to the temporary
constant @samp{y}.

After the temporary constants are declared, they can be used within the
case's code block. Here, they are used to print the categorization of
the point.

This @samp{switch} statement does not have a @samp{default} case. The final case,
@samp{case let (x, y)}, declares a tuple of two placeholder constants that
can match any value. Because @samp{anotherPoint} is always a tuple of two
values, this case matches all possible remaining values, and a @samp{default}
case is not needed to make the @samp{switch} statement exhaustive.

@item
Where


A @samp{switch} case can use a @samp{where} clause to check for additional
conditions.

The example below categorizes an (x, y) point on the following graph:

@example
let yetAnotherPoint = (1, -1)
switch yetAnotherPoint @{
case let (x, y) where x == y:
    print("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
    print("(\(x), \(y)) is on the line x == -y")
case let (x, y):
    print("(\(x), \(y)) is just some arbitrary point")
@}
// Prints "(1, -1) is on the line x == -y"
@end example

@image{_images/coordinateGraphComplex_2x,,,,png}
The @samp{switch} statement determines whether the point is on the green
diagonal line where @samp{x =} y=, on the purple diagonal line where
@samp{x =} -y=, or neither.

The three @samp{switch} cases declare placeholder constants @samp{x} and @samp{y},
which temporarily take on the two tuple values from @samp{yetAnotherPoint}.
These constants are used as part of a @samp{where} clause, to create a
dynamic filter. The @samp{switch} case matches the current value of @samp{point}
only if the @samp{where} clause's condition evaluates to @samp{true} for that
value.

As in the previous example, the final case matches all possible
remaining values, and so a @samp{default} case is not needed to make the
@samp{switch} statement exhaustive.

@item
Compound Cases


Multiple switch cases that share the same body can be combined by
writing several patterns after @samp{case}, with a comma between each of the
patterns. If any of the patterns match, then the case is considered to
match. The patterns can be written over multiple lines if the list is
long. For example:

@example
let someCharacter: Character = "e"
switch someCharacter @{
case "a", "e", "i", "o", "u":
    print("\(someCharacter) is a vowel")
case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
     "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
    print("\(someCharacter) is a consonant")
default:
    print("\(someCharacter) is not a vowel or a consonant")
@}
// Prints "e is a vowel"
@end example

The @samp{switch} statement's first case matches all five lowercase vowels in
the English language. Similarly, its second case matches all lowercase
English consonants. Finally, the @samp{default} case matches any other
character.

Compound cases can also include value bindings. All of the patterns of a
compound case have to include the same set of value bindings, and each
binding has to get a value of the same type from all of the patterns in
the compound case. This ensures that, no matter which part of the
compound case matched, the code in the body of the case can always
access a value for the bindings and that the value always has the same
type.

@example
let stillAnotherPoint = (9, 0)
switch stillAnotherPoint @{
case (let distance, 0), (0, let distance):
    print("On an axis, \(distance) from the origin")
default:
    print("Not on an axis")
@}
// Prints "On an axis, 9 from the origin"
@end example

The @samp{case} above has two patterns: @samp{(let distance, 0)} matches points on
the x-axis and @samp{(0, let distance)} matches points on the y-axis. Both
patterns include a binding for @samp{distance} and @samp{distance} is an integer
in both patterns---which means that the code in the body of the @samp{case}
can always access a value for @samp{distance}.
@end enumerate

@node Control Transfer Statements
@section Control Transfer Statements

@emph{Control transfer statements} change the order in which your code is
executed, by transferring control from one piece of code to another.
Swift has five control transfer statements:

@itemize
@item
@samp{continue}

@item
@samp{break}

@item
@samp{fallthrough}

@item
@samp{return}

@item
@samp{throw}
@end itemize

The @samp{continue}, @samp{break}, and @samp{fallthrough} statements are described
below. The @samp{return} statement is described in
@ref{Functions}, and the @samp{throw} statement is described
in @ref{Propagating Errors Using Throwing Functions}.

@menu
* Continue::
* Break::
* Fallthrough::
* Labeled Statements::
@end menu

@node Continue
@subsection Continue

The @samp{continue} statement tells a loop to stop what it is doing and start
again at the beginning of the next iteration through the loop. It says
“I am done with the current loop iteration” without leaving the loop
altogether.

The following example removes all vowels and spaces from a lowercase
string to create a cryptic puzzle phrase:

@example
let puzzleInput = "great minds think alike"
var puzzleOutput = ""
let charactersToRemove: [Character] = ["a", "e", "i", "o", "u", " "]
for character in puzzleInput @{
    if charactersToRemove.contains(character) @{
        continue
    @}
    puzzleOutput.append(character)
@}
print(puzzleOutput)
// Prints "grtmndsthnklk"
@end example

The code above calls the @samp{continue} keyword whenever it matches a vowel
or a space, causing the current iteration of the loop to end immediately
and to jump straight to the start of the next iteration.

@node Break
@subsection Break

The @samp{break} statement ends execution of an entire control flow statement
immediately. The @samp{break} statement can be used inside a @samp{switch} or loop
statement when you want to terminate the execution of the @samp{switch} or
loop statement earlier than would otherwise be the case.

@enumerate
@item
Break in a Loop Statement


When used inside a loop statement, @samp{break} ends the loop's execution
immediately and transfers control to the code after the loop's closing
brace (@samp{@}}). No further code from the current iteration of the loop is
executed, and no further iterations of the loop are started.

@item
Break in a Switch Statement


When used inside a @samp{switch} statement, @samp{break} causes the @samp{switch}
statement to end its execution immediately and to transfer control to
the code after the @samp{switch} statement's closing brace (@samp{@}}).

This behavior can be used to match and ignore one or more cases in a
@samp{switch} statement. Because Swift's @samp{switch} statement is exhaustive and
does not allow empty cases, it is sometimes necessary to deliberately
match and ignore a case in order to make your intentions explicit. You
do this by writing the @samp{break} statement as the entire body of the case
you want to ignore. When that case is matched by the @samp{switch} statement,
the @samp{break} statement inside the case ends the @samp{switch} statement's
execution immediately.

Note

A @samp{switch} case that contains only a comment is reported as a
compile-time error. Comments are not statements and do not cause a
@samp{switch} case to be ignored. Always use a @samp{break} statement to ignore a
@samp{switch} case.

The following example switches on a @samp{Character} value and determines
whether it represents a number symbol in one of four languages. For
brevity, multiple values are covered in a single @samp{switch} case.

@example
let numberSymbol: Character = "三" // Chinese symbol for the number 3
var possibleIntegerValue: Int?
switch numberSymbol @{
case "1", "١", "一", "๑":
    possibleIntegerValue = 1
case "2", "٢", "二", "๒":
    possibleIntegerValue = 2
case "3", "٣", "三", "๓":
    possibleIntegerValue = 3
case "4", "٤", "四", "๔":
    possibleIntegerValue = 4
default:
    break
@}
if let integerValue = possibleIntegerValue @{
    print("The integer value of \(numberSymbol) is \(integerValue).")
@} else @{
    print("An integer value could not be found for \(numberSymbol).")
@}
// Prints "The integer value of 三 is 3."
@end example

This example checks @samp{numberSymbol} to determine whether it is a Latin,
Arabic, Chinese, or Thai symbol for the numbers @samp{1} to @samp{4}. If a match
is found, one of the @samp{switch} statement's cases sets an optional @samp{Int?}
variable called @samp{possibleIntegerValue} to an appropriate integer value.

After the @samp{switch} statement completes its execution, the example uses
optional binding to determine whether a value was found. The
@samp{possibleIntegerValue} variable has an implicit initial value of @samp{nil}
by virtue of being an optional type, and so the optional binding will
succeed only if @samp{possibleIntegerValue} was set to an actual value by one
of the @samp{switch} statement's first four cases.

Because it's not practical to list every possible @samp{Character} value in
the example above, a @samp{default} case handles any characters that are not
matched. This @samp{default} case does not need to perform any action, and so
it is written with a single @samp{break} statement as its body. As soon as
the @samp{default} case is matched, the @samp{break} statement ends the @samp{switch}
statement's execution, and code execution continues from the @samp{if let}
statement.
@end enumerate

@node Fallthrough
@subsection Fallthrough

In Swift, @samp{switch} statements don't fall through the bottom of each case
and into the next one. That is, the entire @samp{switch} statement completes
its execution as soon as the first matching case is completed. By
contrast, C requires you to insert an explicit @samp{break} statement at the
end of every @samp{switch} case to prevent fallthrough. Avoiding default
fallthrough means that Swift @samp{switch} statements are much more concise
and predictable than their counterparts in C, and thus they avoid
executing multiple @samp{switch} cases by mistake.

If you need C-style fallthrough behavior, you can opt in to this
behavior on a case-by-case basis with the @samp{fallthrough} keyword. The
example below uses @samp{fallthrough} to create a textual description of a
number.

@example
let integerToDescribe = 5
var description = "The number \(integerToDescribe) is"
switch integerToDescribe @{
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough
default:
    description += " an integer."
@}
print(description)
// Prints "The number 5 is a prime number, and also an integer."
@end example

This example declares a new @samp{String} variable called @samp{description} and
assigns it an initial value. The function then considers the value of
@samp{integerToDescribe} using a @samp{switch} statement. If the value of
@samp{integerToDescribe} is one of the prime numbers in the list, the
function appends text to the end of @samp{description}, to note that the
number is prime. It then uses the @samp{fallthrough} keyword to “fall into”
the @samp{default} case as well. The @samp{default} case adds some extra text to
the end of the description, and the @samp{switch} statement is complete.

Unless the value of @samp{integerToDescribe} is in the list of known prime
numbers, it is not matched by the first @samp{switch} case at all. Because
there are no other specific cases, @samp{integerToDescribe} is matched by the
@samp{default} case.

After the @samp{switch} statement has finished executing, the number's
description is printed using the @samp{print(_:separator:terminator:)}
function. In this example, the number @samp{5} is correctly identified as a
prime number.

Note

The @samp{fallthrough} keyword does not check the case conditions for the
@samp{switch} case that it causes execution to fall into. The @samp{fallthrough}
keyword simply causes code execution to move directly to the statements
inside the next case (or @samp{default} case) block, as in C's standard
@samp{switch} statement behavior.

@node Labeled Statements
@subsection Labeled Statements

In Swift, you can nest loops and conditional statements inside other
loops and conditional statements to create complex control flow
structures. However, loops and conditional statements can both use the
@samp{break} statement to end their execution prematurely. Therefore, it is
sometimes useful to be explicit about which loop or conditional
statement you want a @samp{break} statement to terminate. Similarly, if you
have multiple nested loops, it can be useful to be explicit about which
loop the @samp{continue} statement should affect.

To achieve these aims, you can mark a loop statement or conditional
statement with a @emph{statement label}. With a conditional statement, you
can use a statement label with the @samp{break} statement to end the
execution of the labeled statement. With a loop statement, you can use a
statement label with the @samp{break} or @samp{continue} statement to end or
continue the execution of the labeled statement.

A labeled statement is indicated by placing a label on the same line as
the statement's introducer keyword, followed by a colon. Here's an
example of this syntax for a @samp{while} loop, although the principle is the
same for all loops and @samp{switch} statements:

@example
label name: while condition @{
    statements
@}
@end example

The following example uses the @samp{break} and @samp{continue} statements with a
labeled @samp{while} loop for an adapted version of the @emph{Snakes and Ladders}
game that you saw earlier in this chapter. This time around, the game
has an extra rule:

@itemize
@item
To win, you must land @emph{exactly} on square 25.
@end itemize

If a particular dice roll would take you beyond square 25, you must roll
again until you roll the exact number needed to land on square 25.

The game board is the same as before.

@image{_images/snakesAndLadders_2x,,,,png}
The values of @samp{finalSquare}, @samp{board}, @samp{square}, and @samp{diceRoll} are
initialized in the same way as before:

@example
let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
var square = 0
var diceRoll = 0
@end example

This version of the game uses a @samp{while} loop and a @samp{switch} statement to
implement the game's logic. The @samp{while} loop has a statement label
called @samp{gameLoop} to indicate that it is the main game loop for the
Snakes and Ladders game.

The @samp{while} loop's condition is @samp{while square !} finalSquare=, to
reflect that you must land exactly on square 25.

@example
gameLoop: while square != finalSquare @{
    diceRoll += 1
    if diceRoll == 7 @{ diceRoll = 1 @}
    switch square + diceRoll @{
    case finalSquare:
        // diceRoll will move us to the final square, so the game is over
        break gameLoop
    case let newSquare where newSquare > finalSquare:
        // diceRoll will move us beyond the final square, so roll again
        continue gameLoop
    default:
        // this is a valid move, so find out its effect
        square += diceRoll
        square += board[square]
    @}
@}
print("Game over!")
@end example

The dice is rolled at the start of each loop. Rather than moving the
player immediately, the loop uses a @samp{switch} statement to consider the
result of the move and to determine whether the move is allowed:

@itemize
@item
If the dice roll will move the player onto the final square, the game
is over. The @samp{break gameLoop} statement transfers control to the first
line of code outside of the @samp{while} loop, which ends the game.

@item
If the dice roll will move the player @emph{beyond} the final square, the
move is invalid and the player needs to roll again. The
@samp{continue gameLoop} statement ends the current @samp{while} loop iteration
and begins the next iteration of the loop.

@item
In all other cases, the dice roll is a valid move. The player moves
forward by @samp{diceRoll} squares, and the game logic checks for any
snakes and ladders. The loop then ends, and control returns to the
@samp{while} condition to decide whether another turn is required.
@end itemize

Note

If the @samp{break} statement above did not use the @samp{gameLoop} label, it
would break out of the @samp{switch} statement, not the @samp{while} statement.
Using the @samp{gameLoop} label makes it clear which control statement should
be terminated.

It is not strictly necessary to use the @samp{gameLoop} label when calling
@samp{continue gameLoop} to jump to the next iteration of the loop. There is
only one loop in the game, and therefore no ambiguity as to which loop
the @samp{continue} statement will affect. However, there is no harm in using
the @samp{gameLoop} label with the @samp{continue} statement. Doing so is
consistent with the label's use alongside the @samp{break} statement and
helps make the game's logic clearer to read and understand.

@node Early Exit
@section Early Exit

A @samp{guard} statement, like an @samp{if} statement, executes statements
depending on the Boolean value of an expression. You use a @samp{guard}
statement to require that a condition must be true in order for the code
after the @samp{guard} statement to be executed. Unlike an @samp{if} statement, a
@samp{guard} statement always has an @samp{else} clause---the code inside the
@samp{else} clause is executed if the condition is not true.

@example
func greet(person: [String: String]) @{
    guard let name = person["name"] else @{
        return
    @}

    print("Hello \(name)!")

    guard let location = person["location"] else @{
        print("I hope the weather is nice near you.")
        return
    @}

    print("I hope the weather is nice in \(location).")
@}

greet(person: ["name": "John"])
// Prints "Hello John!"
// Prints "I hope the weather is nice near you."
greet(person: ["name": "Jane", "location": "Cupertino"])
// Prints "Hello Jane!"
// Prints "I hope the weather is nice in Cupertino."
@end example

If the @samp{guard} statement's condition is met, code execution continues
after the @samp{guard} statement's closing brace. Any variables or constants
that were assigned values using an optional binding as part of the
condition are available for the rest of the code block that the @samp{guard}
statement appears in.

If that condition is not met, the code inside the @samp{else} branch is
executed. That branch must transfer control to exit the code block in
which the @samp{guard} statement appears. It can do this with a control
transfer statement such as @samp{return}, @samp{break}, @samp{continue}, or @samp{throw}, or
it can call a function or method that doesn't return, such as
@samp{fatalError(_:file:line:)}.

Using a @samp{guard} statement for requirements improves the readability of
your code, compared to doing the same check with an @samp{if} statement. It
lets you write the code that's typically executed without wrapping it in
an @samp{else} block, and it lets you keep the code that handles a violated
requirement next to the requirement.

@node Checking API Availability
@section Checking API Availability

@findex #available

Swift has built-in support for checking API availability, which ensures
that you don't accidentally use APIs that are unavailable on a given
deployment target.

The compiler uses availability information in the SDK to verify that all
of the APIs used in your code are available on the deployment target
specified by your project. Swift reports an error at compile time if you
try to use an API that isn't available.

You use an @emph{availability condition} in an @samp{if} or @samp{guard} statement to
conditionally execute a block of code, depending on whether the APIs you
want to use are available at runtime. The compiler uses the information
from the availability condition when it verifies that the APIs in that
block of code are available.

@example
if #available(iOS 10, macOS 10.12, *) @{
    // Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS
@} else @{
    // Fall back to earlier iOS and macOS APIs
@}
@end example

The availability condition above specifies that in iOS, the body of the
@samp{if} statement executes only in iOS 10 and later; in macOS, only in
macOS 10.12 and later. The last argument, @samp{*}, is required and specifies
that on any other platform, the body of the @samp{if} executes on the minimum
deployment target specified by your target.

In its general form, the availability condition takes a list of platform
names and versions. You use platform names such as @samp{iOS}, @samp{macOS},
@samp{watchOS}, and @samp{tvOS}---for the full list, see
Declaration Attributes.
In addition to specifying major version numbers like iOS 8 or macOS
10.10, you can specify minor versions numbers like iOS 11.2.6 and macOS
10.13.3.

@example
if #available(platform name version, ..., *) @{
    statements to execute if the APIs are available
@} else @{
    fallback statements to execute if the APIs are unavailable
@}
@end example

@node Functions
@chapter Functions

@emph{Functions} are self-contained chunks of code that perform a specific
task. You give a function a name that identifies what it does, and this
name is used to “call” the function to perform its task when needed.

Swift's unified function syntax is flexible enough to express anything
from a simple C-style function with no parameter names to a complex
Objective-C-style method with names and argument labels for each
parameter. Parameters can provide default values to simplify function
calls and can be passed as in-out parameters, which modify a passed
variable once the function has completed its execution.

Every function in Swift has a type, consisting of the function's
parameter types and return type. You can use this type like any other
type in Swift, which makes it easy to pass functions as parameters to
other functions, and to return functions from functions. Functions can
also be written within other functions to encapsulate useful
functionality within a nested function scope.

@menu
* Defining and Calling Functions::
* Function Parameters and Return Values::
* Function Argument Labels and Parameter Names::
* Function Types::
* Nested Functions::
@end menu

@node Defining and Calling Functions
@section Defining and Calling Functions

@findex func

When you define a function, you can optionally define one or more named,
typed values that the function takes as input, known as @emph{parameters}.
You can also optionally define a type of value that the function will
pass back as output when it is done, known as its @emph{return type}.

Every function has a @emph{function name}, which describes the task that the
function performs. To use a function, you “call” that function with its
name and pass it input values (known as @emph{arguments}) that match the
types of the function's parameters. A function's arguments must always
be provided in the same order as the function's parameter list.

The function in the example below is called @samp{greet(person:)}, because
that's what it does---it takes a person's name as input and returns a
greeting for that person. To accomplish this, you define one input
parameter---a @samp{String} value called @samp{person}---and a return type of
@samp{String}, which will contain a greeting for that person:

@example
func greet(person: String) -> String @{
    let greeting = "Hello, " + person + "!"
    return greeting
@}
@end example

All of this information is rolled up into the function's @emph{definition},
which is prefixed with the @samp{func} keyword. You indicate the function's
return type with the @emph{return arrow} @samp{->} (a hyphen followed by a right
angle bracket), which is followed by the name of the type to return.

The definition describes what the function does, what it expects to
receive, and what it returns when it is done. The definition makes it
easy for the function to be called unambiguously from elsewhere in your
code:

@example
print(greet(person: "Anna"))
// Prints "Hello, Anna!"
print(greet(person: "Brian"))
// Prints "Hello, Brian!"
@end example

You call the @samp{greet(person:)} function by passing it a @samp{String} value
after the @samp{person} argument label, such as @samp{greet(person: "Anna")}.
Because the function returns a @samp{String} value, @samp{greet(person:)} can be
wrapped in a call to the @samp{print(_:separator:terminator:)} function to
print that string and see its return value, as shown above.

Note

The @samp{print(_:separator:terminator:)} function doesn't have a label for
its first argument, and its other arguments are optional because they
have a default value. These variations on function syntax are discussed
below in @ref{Function Argument Labels and Parameter Names} and @ref{Default Parameter Values, , Default Parameter
Values}.

The body of the @samp{greet(person:)} function starts by defining a new
@samp{String} constant called @samp{greeting} and setting it to a simple greeting
message. This greeting is then passed back out of the function using the
@samp{return} keyword. In the line of code that says @samp{return greeting}, the
function finishes its execution and returns the current value of
@samp{greeting}.

You can call the @samp{greet(person:)} function multiple times with different
input values. The example above shows what happens if it is called with
an input value of @samp{"Anna"}, and an input value of @samp{"Brian"}. The
function returns a tailored greeting in each case.

To make the body of this function shorter, you can combine the message
creation and the return statement into one line:

@example
func greetAgain(person: String) -> String @{
    return "Hello again, " + person + "!"
@}
print(greetAgain(person: "Anna"))
// Prints "Hello again, Anna!"
@end example

@node Function Parameters and Return Values
@section Function Parameters and Return Values

@findex return

Function parameters and return values are extremely flexible in Swift.
You can define anything from a simple utility function with a single
unnamed parameter to a complex function with expressive parameter names
and different parameter options.

@menu
* Functions Without Parameters::
* Functions With Multiple Parameters::
* Functions Without Return Values::
* Functions with Multiple Return Values::
@end menu

@node Functions Without Parameters
@subsection Functions Without Parameters

Functions are not required to define input parameters. Here's a function
with no input parameters, which always returns the same @samp{String} message
whenever it is called:

@example
func sayHelloWorld() -> String @{
    return "hello, world"
@}
print(sayHelloWorld())
// Prints "hello, world"
@end example

The function definition still needs parentheses after the function's
name, even though it does not take any parameters. The function name is
also followed by an empty pair of parentheses when the function is
called.

@node Functions With Multiple Parameters
@subsection Functions With Multiple Parameters

Functions can have multiple input parameters, which are written within
the function's parentheses, separated by commas.

This function takes a person's name and whether they have already been
greeted as input, and returns an appropriate greeting for that person:

@example
func greet(person: String, alreadyGreeted: Bool) -> String @{
    if alreadyGreeted @{
        return greetAgain(person: person)
    @} else @{
        return greet(person: person)
    @}
@}
print(greet(person: "Tim", alreadyGreeted: true))
// Prints "Hello again, Tim!"
@end example

You call the @samp{greet(person:alreadyGreeted:)} function by passing it both
a @samp{String} argument value labeled @samp{person} and a @samp{Bool} argument value
labeled @samp{alreadyGreeted} in parentheses, separated by commas. Note that
this function is distinct from the @samp{greet(person:)} function shown in an
earlier section. Although both functions have names that begin with
@samp{greet}, the @samp{greet(person:alreadyGreeted:)} function takes two
arguments but the @samp{greet(person:)} function takes only one.

@node Functions Without Return Values
@subsection Functions Without Return Values

Functions are not required to define a return type. Here's a version of
the @samp{greet(person:)} function, which prints its own @samp{String} value
rather than returning it:

@example
func greet(person: String) @{
    print("Hello, \(person)!")
@}
greet(person: "Dave")
// Prints "Hello, Dave!"
@end example

Because it does not need to return a value, the function's definition
does not include the return arrow (@samp{->}) or a return type.

Note

Strictly speaking, this version of the @samp{greet(person:)} function @emph{does}
still return a value, even though no return value is defined. Functions
without a defined return type return a special value of type @samp{Void}.
This is simply an empty tuple, which is written as @samp{()}.

The return value of a function can be ignored when it is called:

@example
func printAndCount(string: String) -> Int @{
    print(string)
    return string.count
@}
func printWithoutCounting(string: String) @{
    let _ = printAndCount(string: string)
@}
printAndCount(string: "hello, world")
// prints "hello, world" and returns a value of 12
printWithoutCounting(string: "hello, world")
// prints "hello, world" but does not return a value
@end example

The first function, @samp{printAndCount(string:)}, prints a string, and then
returns its character count as an @samp{Int}. The second function,
@samp{printWithoutCounting(string:)}, calls the first function, but ignores
its return value. When the second function is called, the message is
still printed by the first function, but the returned value is not used.

Note

Return values can be ignored, but a function that says it will return a
value must always do so. A function with a defined return type cannot
allow control to fall out of the bottom of the function without
returning a value, and attempting to do so will result in a compile-time
error.

@node Functions with Multiple Return Values
@subsection Functions with Multiple Return Values

You can use a tuple type as the return type for a function to return
multiple values as part of one compound return value.

The example below defines a function called @samp{minMax(array:)}, which
finds the smallest and largest numbers in an array of @samp{Int} values:

@example
func minMax(array: [Int]) -> (min: Int, max: Int) @{
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..<array.count] @{
        if value < currentMin @{
            currentMin = value
        @} else if value > currentMax @{
            currentMax = value
        @}
    @}
    return (currentMin, currentMax)
@}
@end example

The @samp{minMax(array:)} function returns a tuple containing two @samp{Int}
values. These values are labeled @samp{min} and @samp{max} so that they can be
accessed by name when querying the function's return value.

The body of the @samp{minMax(array:)} function starts by setting two working
variables called @samp{currentMin} and @samp{currentMax} to the value of the first
integer in the array. The function then iterates over the remaining
values in the array and checks each value to see if it is smaller or
larger than the values of @samp{currentMin} and @samp{currentMax} respectively.
Finally, the overall minimum and maximum values are returned as a tuple
of two @samp{Int} values.

Because the tuple's member values are named as part of the function's
return type, they can be accessed with dot syntax to retrieve the
minimum and maximum found values:

@example
let bounds = minMax(array: [8, -6, 2, 109, 3, 71])
print("min is \(bounds.min) and max is \(bounds.max)")
// Prints "min is -6 and max is 109"
@end example

Note that the tuple's members do not need to be named at the point that
the tuple is returned from the function, because their names are already
specified as part of the function's return type.

@enumerate
@item
Optional Tuple Return Types


If the tuple type to be returned from a function has the potential to
have “no value” for the entire tuple, you can use an @emph{optional} tuple
return type to reflect the fact that the entire tuple can be @samp{nil}. You
write an optional tuple return type by placing a question mark after the
tuple type's closing parenthesis, such as @samp{(Int, Int)?} or
@samp{(String, Int, Bool)?}.

Note

An optional tuple type such as @samp{(Int, Int)?} is different from a tuple
that contains optional types such as @samp{(Int?, Int?)}. With an optional
tuple type, the entire tuple is optional, not just each individual value
within the tuple.

The @samp{minMax(array:)} function above returns a tuple containing two @samp{Int}
values. However, the function does not perform any safety checks on the
array it is passed. If the @samp{array} argument contains an empty array, the
@samp{minMax(array:)} function, as defined above, will trigger a runtime
error when attempting to access @samp{array[0]}.

To handle an empty array safely, write the @samp{minMax(array:)} function
with an optional tuple return type and return a value of @samp{nil} when the
array is empty:

@example
func minMax(array: [Int]) -> (min: Int, max: Int)? @{
    if array.isEmpty @{ return nil @}
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..<array.count] @{
        if value < currentMin @{
            currentMin = value
        @} else if value > currentMax @{
            currentMax = value
        @}
    @}
    return (currentMin, currentMax)
@}
@end example

You can use optional binding to check whether this version of the
@samp{minMax(array:)} function returns an actual tuple value or @samp{nil}:

@example
if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) @{
    print("min is \(bounds.min) and max is \(bounds.max)")
@}
// Prints "min is -6 and max is 109"
@end example
@end enumerate

@node Function Argument Labels and Parameter Names
@section Function Argument Labels and Parameter Names

Each function parameter has both an @emph{argument label} and a @emph{parameter
name}. The argument label is used when calling the function; each
argument is written in the function call with its argument label before
it. The parameter name is used in the implementation of the function. By
default, parameters use their parameter name as their argument label.

@example
func someFunction(firstParameterName: Int, secondParameterName: Int) @{
    // In the function body, firstParameterName and secondParameterName
    // refer to the argument values for the first and second parameters.
@}
someFunction(firstParameterName: 1, secondParameterName: 2)
@end example

All parameters must have unique names. Although it's possible for
multiple parameters to have the same argument label, unique argument
labels help make your code more readable.

@menu
* Specifying Argument Labels::
* Omitting Argument Labels::
* Default Parameter Values::
* Variadic Parameters::
* In-Out Parameters::
@end menu

@node Specifying Argument Labels
@subsection Specifying Argument Labels

You write an argument label before the parameter name, separated by a
space:

@example
func someFunction(argumentLabel parameterName: Int) @{
    // In the function body, parameterName refers to the argument value
    // for that parameter.
@}
@end example

Here's a variation of the @samp{greet(person:)} function that takes a
person's name and hometown and returns a greeting:

@example
func greet(person: String, from hometown: String) -> String @{
    return "Hello \(person)! Glad you could visit from \(hometown)."
@}
print(greet(person: "Bill", from: "Cupertino"))
// Prints "Hello Bill! Glad you could visit from Cupertino."
@end example

The use of argument labels can allow a function to be called in an
expressive, sentence-like manner, while still providing a function body
that is readable and clear in intent.

@node Omitting Argument Labels
@subsection Omitting Argument Labels

If you don't want an argument label for a parameter, write an underscore
(@samp{_}) instead of an explicit argument label for that parameter.

@example
func someFunction(_ firstParameterName: Int, secondParameterName: Int) @{
    // In the function body, firstParameterName and secondParameterName
    // refer to the argument values for the first and second parameters.
@}
someFunction(1, secondParameterName: 2)
@end example

If a parameter has an argument label, the argument @emph{must} be labeled
when you call the function.

@node Default Parameter Values
@subsection Default Parameter Values

You can define a @emph{default value} for any parameter in a function by
assigning a value to the parameter after that parameter's type. If a
default value is defined, you can omit that parameter when calling the
function.

@example
func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) @{
    // If you omit the second argument when calling this function, then
    // the value of parameterWithDefault is 12 inside the function body.
@}
someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault is 6
someFunction(parameterWithoutDefault: 4) // parameterWithDefault is 12
@end example

Place parameters that don't have default values at the beginning of a
function's parameter list, before the parameters that have default
values. Parameters that don't have default values are usually more
important to the function's meaning---writing them first makes it easier
to recognize that the same function is being called, regardless of
whether any default parameters are omitted.

@node Variadic Parameters
@subsection Variadic Parameters

A @emph{variadic parameter} accepts zero or more values of a specified type.
You use a variadic parameter to specify that the parameter can be passed
a varying number of input values when the function is called. Write
variadic parameters by inserting three period characters (@samp{...}) after
the parameter's type name.

The values passed to a variadic parameter are made available within the
function's body as an array of the appropriate type. For example, a
variadic parameter with a name of @samp{numbers} and a type of @samp{Double...} is
made available within the function's body as a constant array called
@samp{numbers} of type @samp{[Double]}.

The example below calculates the @emph{arithmetic mean} (also known as the
@emph{average}) for a list of numbers of any length:

@example
func arithmeticMean(_ numbers: Double...) -> Double @{
    var total: Double = 0
    for number in numbers @{
        total += number
    @}
    return total / Double(numbers.count)
@}
arithmeticMean(1, 2, 3, 4, 5)
// returns 3.0, which is the arithmetic mean of these five numbers
arithmeticMean(3, 8.25, 18.75)
// returns 10.0, which is the arithmetic mean of these three numbers
@end example

Note

A function may have at most one variadic parameter.

@node In-Out Parameters
@subsection In-Out Parameters

Function parameters are constants by default. Trying to change the value
of a function parameter from within the body of that function results in
a compile-time error. This means that you can't change the value of a
parameter by mistake. If you want a function to modify a parameter's
value, and you want those changes to persist after the function call has
ended, define that parameter as an @emph{in-out parameter} instead.

@findex inout

You write an in-out parameter by placing the @samp{inout} keyword right
before a parameter's type. An in-out parameter has a value that is
passed @emph{in} to the function, is modified by the function, and is passed
back @emph{out} of the function to replace the original value. For a detailed
discussion of the behavior of in-out parameters and associated compiler
optimizations, see @ref{In-Out Parameters, , In-Out
Parameters}.

You can only pass a variable as the argument for an in-out parameter.
You cannot pass a constant or a literal value as the argument, because
constants and literals cannot be modified. You place an ampersand (@samp{&})
directly before a variable's name when you pass it as an argument to an
in-out parameter, to indicate that it can be modified by the function.

Note

In-out parameters cannot have default values, and variadic parameters
cannot be marked as @samp{inout}.

Here's an example of a function called @samp{swapTwoInts(_:_:)}, which has
two in-out integer parameters called @samp{a} and @samp{b}:

@example
func swapTwoInts(_ a: inout Int, _ b: inout Int) @{
    let temporaryA = a
    a = b
    b = temporaryA
@}
@end example

The @samp{swapTwoInts(_:_:)} function simply swaps the value of @samp{b} into @samp{a},
and the value of @samp{a} into @samp{b}. The function performs this swap by
storing the value of @samp{a} in a temporary constant called @samp{temporaryA},
assigning the value of @samp{b} to @samp{a}, and then assigning @samp{temporaryA} to
@samp{b}.

You can call the @samp{swapTwoInts(_:_:)} function with two variables of type
@samp{Int} to swap their values. Note that the names of @samp{someInt} and
@samp{anotherInt} are prefixed with an ampersand when they are passed to the
@samp{swapTwoInts(_:_:)} function:

@example
var someInt = 3
var anotherInt = 107
swapTwoInts(&someInt, &anotherInt)
print("someInt is now \(someInt), and anotherInt is now \(anotherInt)")
// Prints "someInt is now 107, and anotherInt is now 3"
@end example

The example above shows that the original values of @samp{someInt} and
@samp{anotherInt} are modified by the @samp{swapTwoInts(_:_:)} function, even
though they were originally defined outside of the function.

Note

In-out parameters are not the same as returning a value from a function.
The @samp{swapTwoInts} example above does not define a return type or return
a value, but it still modifies the values of @samp{someInt} and @samp{anotherInt}.
In-out parameters are an alternative way for a function to have an
effect outside of the scope of its function body.

@node Function Types
@section Function Types

Every function has a specific @emph{function type}, made up of the parameter
types and the return type of the function.

For example:

@example
func addTwoInts(_ a: Int, _ b: Int) -> Int @{
    return a + b
@}
func multiplyTwoInts(_ a: Int, _ b: Int) -> Int @{
    return a * b
@}
@end example

This example defines two simple mathematical functions called
@samp{addTwoInts} and @samp{multiplyTwoInts}. These functions each take two @samp{Int}
values, and return an @samp{Int} value, which is the result of performing an
appropriate mathematical operation.

The type of both of these functions is @samp{(Int, Int) -> Int}. This can be
read as:

“A function that has two parameters, both of type @samp{Int}, and that
returns a value of type @samp{Int}.”

Here's another example, for a function with no parameters or return
value:

@example
func printHelloWorld() @{
    print("hello, world")
@}
@end example

The type of this function is @samp{() -> Void}, or “a function that has no
parameters, and returns @samp{Void}.”

@menu
* Using Function Types::
* Function Types as Parameter Types::
* Function Types as Return Types::
@end menu

@node Using Function Types
@subsection Using Function Types

You use function types just like any other types in Swift. For example,
you can define a constant or variable to be of a function type and
assign an appropriate function to that variable:

@example
var mathFunction: (Int, Int) -> Int = addTwoInts
@end example

This can be read as:

“Define a variable called @samp{mathFunction}, which has a type of ‘a
function that takes two @samp{Int} values, and returns an @samp{Int} value.' Set
this new variable to refer to the function called @samp{addTwoInts}.”

The @samp{addTwoInts(_:_:)} function has the same type as the @samp{mathFunction}
variable, and so this assignment is allowed by Swift's type-checker.

You can now call the assigned function with the name @samp{mathFunction}:

@example
print("Result: \(mathFunction(2, 3))")
// Prints "Result: 5"
@end example

A different function with the same matching type can be assigned to the
same variable, in the same way as for nonfunction types:

@example
mathFunction = multiplyTwoInts
print("Result: \(mathFunction(2, 3))")
// Prints "Result: 6"
@end example

As with any other type, you can leave it to Swift to infer the function
type when you assign a function to a constant or variable:

@example
let anotherMathFunction = addTwoInts
// anotherMathFunction is inferred to be of type (Int, Int) -> Int
@end example

@node Function Types as Parameter Types
@subsection Function Types as Parameter Types

You can use a function type such as @samp{(Int, Int) -> Int} as a parameter
type for another function. This enables you to leave some aspects of a
function's implementation for the function's caller to provide when the
function is called.

Here's an example to print the results of the math functions from above:

@example
func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) @{
    print("Result: \(mathFunction(a, b))")
@}
printMathResult(addTwoInts, 3, 5)
// Prints "Result: 8"
@end example

This example defines a function called @samp{printMathResult(_:_:_:)}, which
has three parameters. The first parameter is called @samp{mathFunction}, and
is of type @samp{(Int, Int) -> Int}. You can pass any function of that type
as the argument for this first parameter. The second and third
parameters are called @samp{a} and @samp{b}, and are both of type @samp{Int}. These are
used as the two input values for the provided math function.

When @samp{printMathResult(_:_:_:)} is called, it is passed the
@samp{addTwoInts(_:_:)} function, and the integer values @samp{3} and @samp{5}. It
calls the provided function with the values @samp{3} and @samp{5}, and prints the
result of @samp{8}.

The role of @samp{printMathResult(_:_:_:)} is to print the result of a call
to a math function of an appropriate type. It doesn't matter what that
function's implementation actually does---it matters only that the
function is of the correct type. This enables @samp{printMathResult(_:_:_:)}
to hand off some of its functionality to the caller of the function in a
type-safe way.

@node Function Types as Return Types
@subsection Function Types as Return Types

You can use a function type as the return type of another function. You
do this by writing a complete function type immediately after the return
arrow (@samp{->}) of the returning function.

The next example defines two simple functions called @samp{stepForward(_:)}
and @samp{stepBackward(_:)}. The @samp{stepForward(_:)} function returns a value
one more than its input value, and the @samp{stepBackward(_:)} function
returns a value one less than its input value. Both functions have a
type of @samp{(Int) -> Int}:

@example
func stepForward(_ input: Int) -> Int @{
    return input + 1
@}
func stepBackward(_ input: Int) -> Int @{
    return input - 1
@}
@end example

Here's a function called @samp{chooseStepFunction(backward:)}, whose return
type is @samp{(Int) -> Int}. The @samp{chooseStepFunction(backward:)} function
returns the @samp{stepForward(_:)} function or the @samp{stepBackward(_:)}
function based on a Boolean parameter called @samp{backward}:

@example
func chooseStepFunction(backward: Bool) -> (Int) -> Int @{
    return backward ? stepBackward : stepForward
@}
@end example

You can now use @samp{chooseStepFunction(backward:)} to obtain a function
that will step in one direction or the other:

@example
var currentValue = 3
let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)
// moveNearerToZero now refers to the stepBackward() function
@end example

The example above determines whether a positive or negative step is
needed to move a variable called @samp{currentValue} progressively closer to
zero. @samp{currentValue} has an initial value of @samp{3}, which means that
@samp{currentValue > 0} returns @samp{true}, causing
@samp{chooseStepFunction(backward:)} to return the @samp{stepBackward(_:)}
function. A reference to the returned function is stored in a constant
called @samp{moveNearerToZero}.

Now that @samp{moveNearerToZero} refers to the correct function, it can be
used to count to zero:

@example
print("Counting to zero:")
// Counting to zero:
while currentValue != 0 @{
    print("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
@}
print("zero!")
// 3...
// 2...
// 1...
// zero!
@end example

@node Nested Functions
@section Nested Functions

All of the functions you have encountered so far in this chapter have
been examples of @emph{global functions}, which are defined at a global
scope. You can also define functions inside the bodies of other
functions, known as @emph{nested functions}.

Nested functions are hidden from the outside world by default, but can
still be called and used by their enclosing function. An enclosing
function can also return one of its nested functions to allow the nested
function to be used in another scope.

You can rewrite the @samp{chooseStepFunction(backward:)} example above to use
and return nested functions:

@example
func chooseStepFunction(backward: Bool) -> (Int) -> Int @{
    func stepForward(input: Int) -> Int @{ return input + 1 @}
    func stepBackward(input: Int) -> Int @{ return input - 1 @}
    return backward ? stepBackward : stepForward
@}
var currentValue = -4
let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)
// moveNearerToZero now refers to the nested stepForward() function
while currentValue != 0 @{
    print("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
@}
print("zero!")
// -4...
// -3...
// -2...
// -1...
// zero!
@end example

@node Closures
@chapter Closures

@emph{Closures} are self-contained blocks of functionality that can be passed
around and used in your code. Closures in Swift are similar to blocks in
C and Objective-C and to lambdas in other programming languages.

Closures can capture and store references to any constants and variables
from the context in which they are defined. This is known as @emph{closing
over} those constants and variables. Swift handles all of the memory
management of capturing for you.

Note

Don't worry if you are not familiar with the concept of capturing. It is
explained in detail below in @ref{Capturing Values, , Capturing
Values}.

Global and nested functions, as introduced in
@ref{Functions}, are actually special cases of closures.
Closures take one of three forms:

@itemize
@item
Global functions are closures that have a name and do not capture any
values.

@item
Nested functions are closures that have a name and can capture values
from their enclosing function.

@item
Closure expressions are unnamed closures written in a lightweight
syntax that can capture values from their surrounding context.
@end itemize

Swift's closure expressions have a clean, clear style, with
optimizations that encourage brief, clutter-free syntax in common
scenarios. These optimizations include:

@itemize
@item
Inferring parameter and return value types from context

@item
Implicit returns from single-expression closures

@item
Shorthand argument names

@item
Trailing closure syntax
@end itemize

@menu
* Closure Expressions::
* Trailing Closures::
* Capturing Values::
* Closures Are Reference Types::
* Escaping Closures::
* Autoclosures::
@end menu

@node Closure Expressions
@section Closure Expressions

Nested functions, as introduced in @ref{Nested Functions, , Nested
Functions}, are a convenient means of naming and defining
self-contained blocks of code as part of a larger function. However, it
is sometimes useful to write shorter versions of function-like
constructs without a full declaration and name. This is particularly
true when you work with functions or methods that take functions as one
or more of their arguments.

@emph{Closure expressions} are a way to write inline closures in a brief,
focused syntax. Closure expressions provide several syntax optimizations
for writing closures in a shortened form without loss of clarity or
intent. The closure expression examples below illustrate these
optimizations by refining a single example of the @samp{sorted(by:)} method
over several iterations, each of which expresses the same functionality
in a more succinct way.

@menu
* The Sorted Method::
* Closure Expression Syntax::
* Inferring Type From Context::
* Implicit Returns from Single-Expression Closures::
* Shorthand Argument Names::
* Operator Methods::
@end menu

@node The Sorted Method
@subsection The Sorted Method

Swift's standard library provides a method called @samp{sorted(by:)}, which
sorts an array of values of a known type, based on the output of a
sorting closure that you provide. Once it completes the sorting process,
the @samp{sorted(by:)} method returns a new array of the same type and size
as the old one, with its elements in the correct sorted order. The
original array is not modified by the @samp{sorted(by:)} method.

The closure expression examples below use the @samp{sorted(by:)} method to
sort an array of @samp{String} values in reverse alphabetical order. Here's
the initial array to be sorted:

@example
let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
@end example

The @samp{sorted(by:)} method accepts a closure that takes two arguments of
the same type as the array's contents, and returns a @samp{Bool} value to say
whether the first value should appear before or after the second value
once the values are sorted. The sorting closure needs to return @samp{true}
if the first value should appear @emph{before} the second value, and @samp{false}
otherwise.

This example is sorting an array of @samp{String} values, and so the sorting
closure needs to be a function of type @samp{(String, String) -> Bool}.

One way to provide the sorting closure is to write a normal function of
the correct type, and to pass it in as an argument to the @samp{sorted(by:)}
method:

@example
func backward(_ s1: String, _ s2: String) -> Bool @{
    return s1 > s2
@}
var reversedNames = names.sorted(by: backward)
// reversedNames is equal to ["Ewa", "Daniella", "Chris", "Barry", "Alex"]
@end example

If the first string (@samp{s1}) is greater than the second string (@samp{s2}), the
@samp{backward(_:_:)} function will return @samp{true}, indicating that @samp{s1}
should appear before @samp{s2} in the sorted array. For characters in
strings, “greater than” means “appears later in the alphabet than”. This
means that the letter @samp{"B"} is “greater than” the letter @samp{"A"}, and the
string @samp{"Tom"} is greater than the string @samp{"Tim"}. This gives a reverse
alphabetical sort, with @samp{"Barry"} being placed before @samp{"Alex"}, and so
on.

However, this is a rather long-winded way to write what is essentially a
single-expression function (@samp{a > b}). In this example, it would be
preferable to write the sorting closure inline, using closure expression
syntax.

@node Closure Expression Syntax
@subsection Closure Expression Syntax

Closure expression syntax has the following general form:

@example
@{ (parameters) -> return type in
    statements
@}
@end example

The @emph{parameters} in closure expression syntax can be in-out parameters,
but they can't have a default value. Variadic parameters can be used if
you name the variadic parameter. Tuples can also be used as parameter
types and return types.

The example below shows a closure expression version of the
@samp{backward(_:_:)} function from above:

@example
reversedNames = names.sorted(by: @{ (s1: String, s2: String) -> Bool in
                                 return s1 > s2
                             @})
@end example

Note that the declaration of parameters and return type for this inline
closure is identical to the declaration from the @samp{backward(_:_:)}
function. In both cases, it is written as
@samp{(s1: String, s2: String) -> Bool}. However, for the inline closure
expression, the parameters and return type are written @emph{inside} the
curly braces, not outside of them.

The start of the closure's body is introduced by the @samp{in} keyword. This
keyword indicates that the definition of the closure's parameters and
return type has finished, and the body of the closure is about to begin.

Because the body of the closure is so short, it can even be written on a
single line:

@example
reversedNames = names.sorted(by: @{ (s1: String, s2: String) -> Bool in return s1 > s2 @} )
@end example

This illustrates that the overall call to the @samp{sorted(by:)} method has
remained the same. A pair of parentheses still wrap the entire argument
for the method. However, that argument is now an inline closure.

@node Inferring Type From Context
@subsection Inferring Type From Context

Because the sorting closure is passed as an argument to a method, Swift
can infer the types of its parameters and the type of the value it
returns. The @samp{sorted(by:)} method is being called on an array of
strings, so its argument must be a function of type
@samp{(String, String) -> Bool}. This means that the @samp{(String, String)} and
@samp{Bool} types do not need to be written as part of the closure
expression's definition. Because all of the types can be inferred, the
return arrow (@samp{->}) and the parentheses around the names of the
parameters can also be omitted:

@example
reversedNames = names.sorted(by: @{ s1, s2 in return s1 > s2 @} )
@end example

It is always possible to infer the parameter types and return type when
passing a closure to a function or method as an inline closure
expression. As a result, you never need to write an inline closure in
its fullest form when the closure is used as a function or method
argument.

Nonetheless, you can still make the types explicit if you wish, and
doing so is encouraged if it avoids ambiguity for readers of your code.
In the case of the @samp{sorted(by:)} method, the purpose of the closure is
clear from the fact that sorting is taking place, and it is safe for a
reader to assume that the closure is likely to be working with @samp{String}
values, because it is assisting with the sorting of an array of strings.

@node Implicit Returns from Single-Expression Closures
@subsection Implicit Returns from Single-Expression Closures

Single-expression closures can implicitly return the result of their
single expression by omitting the @samp{return} keyword from their
declaration, as in this version of the previous example:

@example
reversedNames = names.sorted(by: @{ s1, s2 in s1 > s2 @} )
@end example

Here, the function type of the @samp{sorted(by:)} method's argument makes it
clear that a @samp{Bool} value must be returned by the closure. Because the
closure's body contains a single expression (@samp{s1 > s2}) that returns a
@samp{Bool} value, there is no ambiguity, and the @samp{return} keyword can be
omitted.

@node Shorthand Argument Names
@subsection Shorthand Argument Names

Swift automatically provides shorthand argument names to inline
closures, which can be used to refer to the values of the closure's
arguments by the names @samp{$0}, @samp{$1}, @samp{$2}, and so on.

If you use these shorthand argument names within your closure
expression, you can omit the closure's argument list from its
definition, and the number and type of the shorthand argument names will
be inferred from the expected function type. The @samp{in} keyword can also
be omitted, because the closure expression is made up entirely of its
body:

@example
reversedNames = names.sorted(by: @{ $0 > $1 @} )
@end example

Here, @samp{$0} and @samp{$1} refer to the closure's first and second @samp{String}
arguments.

@node Operator Methods
@subsection Operator Methods

There's actually an even @emph{shorter} way to write the closure expression
above. Swift's @samp{String} type defines its string-specific implementation
of the greater-than operator (@samp{>}) as a method that has two parameters
of type @samp{String}, and returns a value of type @samp{Bool}. This exactly
matches the method type needed by the @samp{sorted(by:)} method. Therefore,
you can simply pass in the greater-than operator, and Swift will infer
that you want to use its string-specific implementation:

@example
reversedNames = names.sorted(by: >)
@end example

For more about operator method, see
@ref{Operator Methods}.

@node Trailing Closures
@section Trailing Closures

If you need to pass a closure expression to a function as the function's
final argument and the closure expression is long, it can be useful to
write it as a @emph{trailing closure} instead. A trailing closure is written
after the function call's parentheses, even though it is still an
argument to the function. When you use the trailing closure syntax, you
don't write the argument label for the closure as part of the function
call.

@example
func someFunctionThatTakesAClosure(closure: () -> Void) @{
    // function body goes here
@}

// Here's how you call this function without using a trailing closure:
someFunctionThatTakesAClosure(closure: @{
                                  // closure's body goes here
                              @})

// Here's how you call this function with a trailing closure instead:
someFunctionThatTakesAClosure() @{
    // trailing closure's body goes here
@}
@end example

The string-sorting closure from the @ref{Closure Expression Syntax, , Closure
Expression Syntax} section above can be written outside of the
@samp{sorted(by:)} method's parentheses as a trailing closure:

@example
reversedNames = names.sorted() @{ $0 > $1 @}
@end example

If a closure expression is provided as the function or method's only
argument and you provide that expression as a trailing closure, you do
not need to write a pair of parentheses @samp{()} after the function or
method's name when you call the function:

@example
reversedNames = names.sorted @{ $0 > $1 @}
@end example

Trailing closures are most useful when the closure is sufficiently long
that it is not possible to write it inline on a single line. As an
example, Swift's @samp{Array} type has a @samp{map(_:)} method which takes a
closure expression as its single argument. The closure is called once
for each item in the array, and returns an alternative mapped value
(possibly of some other type) for that item. The nature of the mapping
and the type of the returned value is left up to the closure to specify.

After applying the provided closure to each array element, the @samp{map(_:)}
method returns a new array containing all of the new mapped values, in
the same order as their corresponding values in the original array.

Here's how you can use the @samp{map(_:)} method with a trailing closure to
convert an array of @samp{Int} values into an array of @samp{String} values. The
array @samp{[16, 58, 510]} is used to create the new array
@samp{["OneSix", "FiveEight", "FiveOneZero"]}:

@example
let digitNames = [
  0: "Zero", 1: "One", 2: "Two", 3: "Three", 4: "Four",
  5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine"
]
let numbers = [16, 58, 510]
@end example

The code above creates a dictionary of mappings between the integer
digits and English-language versions of their names. It also defines an
array of integers, ready to be converted into strings.

You can now use the @samp{numbers} array to create an array of @samp{String}
values, by passing a closure expression to the array's @samp{map(_:)} method
as a trailing closure:

@example
let strings = numbers.map @{ (number) -> String in
    var number = number
    var output = ""
    repeat @{
        output = digitNames[number % 10]! + output
        number /= 10
    @} while number > 0
    return output
@}
// strings is inferred to be of type [String]
// its value is ["OneSix", "FiveEight", "FiveOneZero"]
@end example

The @samp{map(_:)} method calls the closure expression once for each item in
the array. You do not need to specify the type of the closure's input
parameter, @samp{number}, because the type can be inferred from the values in
the array to be mapped.

In this example, the variable @samp{number} is initialized with the value of
the closure's @samp{number} parameter, so that the value can be modified
within the closure body. (The parameters to functions and closures are
always constants.) The closure expression also specifies a return type
of @samp{String}, to indicate the type that will be stored in the mapped
output array.

The closure expression builds a string called @samp{output} each time it is
called. It calculates the last digit of @samp{number} by using the remainder
operator (@samp{number % 10}), and uses this digit to look up an appropriate
string in the @samp{digitNames} dictionary. The closure can be used to create
a string representation of any integer greater than zero.

Note

The call to the @samp{digitNames} dictionary's subscript is followed by an
exclamation mark (@samp{!}), because dictionary subscripts return an optional
value to indicate that the dictionary lookup can fail if the key does
not exist. In the example above, it is guaranteed that @samp{number % 10}
will always be a valid subscript key for the @samp{digitNames} dictionary,
and so an exclamation mark is used to force-unwrap the @samp{String} value
stored in the subscript's optional return value.

The string retrieved from the @samp{digitNames} dictionary is added to the
@emph{front} of @samp{output}, effectively building a string version of the number
in reverse. (The expression @samp{number % 10} gives a value of @samp{6} for @samp{16},
@samp{8} for @samp{58}, and @samp{0} for @samp{510}.)

The @samp{number} variable is then divided by @samp{10}. Because it is an integer,
it is rounded down during the division, so @samp{16} becomes @samp{1}, @samp{58}
becomes @samp{5}, and @samp{510} becomes @samp{51}.

The process is repeated until @samp{number} is equal to @samp{0}, at which point
the @samp{output} string is returned by the closure, and is added to the
output array by the @samp{map(_:)} method.

The use of trailing closure syntax in the example above neatly
encapsulates the closure's functionality immediately after the function
that closure supports, without needing to wrap the entire closure within
the @samp{map(_:)} method's outer parentheses.

@node Capturing Values
@section Capturing Values

A closure can @emph{capture} constants and variables from the surrounding
context in which it is defined. The closure can then refer to and modify
the values of those constants and variables from within its body, even
if the original scope that defined the constants and variables no longer
exists.

In Swift, the simplest form of a closure that can capture values is a
nested function, written within the body of another function. A nested
function can capture any of its outer function's arguments and can also
capture any constants and variables defined within the outer function.

Here's an example of a function called @samp{makeIncrementer}, which contains
a nested function called @samp{incrementer}. The nested @samp{incrementer()}
function captures two values, @samp{runningTotal} and @samp{amount}, from its
surrounding context. After capturing these values, @samp{incrementer} is
returned by @samp{makeIncrementer} as a closure that increments
@samp{runningTotal} by @samp{amount} each time it is called.

@example
func makeIncrementer(forIncrement amount: Int) -> () -> Int @{
    var runningTotal = 0
    func incrementer() -> Int @{
        runningTotal += amount
        return runningTotal
    @}
    return incrementer
@}
@end example

The return type of @samp{makeIncrementer} is @samp{() -> Int}. This means that it
returns a @emph{function}, rather than a simple value. The function it
returns has no parameters, and returns an @samp{Int} value each time it is
called. To learn how functions can return other functions, see
@ref{Function Types as Return Types}.

The @samp{makeIncrementer(forIncrement:)} function defines an integer
variable called @samp{runningTotal}, to store the current running total of
the incrementer that will be returned. This variable is initialized with
a value of @samp{0}.

The @samp{makeIncrementer(forIncrement:)} function has a single @samp{Int}
parameter with an argument label of @samp{forIncrement}, and a parameter name
of @samp{amount}. The argument value passed to this parameter specifies how
much @samp{runningTotal} should be incremented by each time the returned
incrementer function is called. The @samp{makeIncrementer} function defines a
nested function called @samp{incrementer}, which performs the actual
incrementing. This function simply adds @samp{amount} to @samp{runningTotal}, and
returns the result.

When considered in isolation, the nested @samp{incrementer()} function might
seem unusual:

@example
func incrementer() -> Int @{
    runningTotal += amount
    return runningTotal
@}
@end example

The @samp{incrementer()} function doesn't have any parameters, and yet it
refers to @samp{runningTotal} and @samp{amount} from within its function body. It
does this by capturing a @emph{reference} to @samp{runningTotal} and @samp{amount} from
the surrounding function and using them within its own function body.
Capturing by reference ensures that @samp{runningTotal} and @samp{amount} do not
disappear when the call to @samp{makeIncrementer} ends, and also ensures that
@samp{runningTotal} is available the next time the @samp{incrementer} function is
called.

Note

As an optimization, Swift may instead capture and store a @emph{copy} of a
value if that value is not mutated by a closure, and if the value is not
mutated after the closure is created.

Swift also handles all memory management involved in disposing of
variables when they are no longer needed.

Here's an example of @samp{makeIncrementer} in action:

@example
let incrementByTen = makeIncrementer(forIncrement: 10)
@end example

This example sets a constant called @samp{incrementByTen} to refer to an
incrementer function that adds @samp{10} to its @samp{runningTotal} variable each
time it is called. Calling the function multiple times shows this
behavior in action:

@example
incrementByTen()
// returns a value of 10
incrementByTen()
// returns a value of 20
incrementByTen()
// returns a value of 30
@end example

If you create a second incrementer, it will have its own stored
reference to a new, separate @samp{runningTotal} variable:

@example
let incrementBySeven = makeIncrementer(forIncrement: 7)
incrementBySeven()
// returns a value of 7
@end example

Calling the original incrementer (@samp{incrementByTen}) again continues to
increment its own @samp{runningTotal} variable, and does not affect the
variable captured by @samp{incrementBySeven}:

@example
incrementByTen()
// returns a value of 40
@end example

Note

If you assign a closure to a property of a class instance, and the
closure captures that instance by referring to the instance or its
members, you will create a strong reference cycle between the closure
and the instance. Swift uses @emph{capture lists} to break these strong
reference cycles. For more information, see
@ref{Strong Reference Cycles for Closures, , Strong Reference Cycles for
Closures}.

@node Closures Are Reference Types
@section Closures Are Reference Types

In the example above, @samp{incrementBySeven} and @samp{incrementByTen} are
constants, but the closures these constants refer to are still able to
increment the @samp{runningTotal} variables that they have captured. This is
because functions and closures are @emph{reference types}.

Whenever you assign a function or a closure to a constant or a variable,
you are actually setting that constant or variable to be a @emph{reference}
to the function or closure. In the example above, it is the choice of
closure that @samp{incrementByTen} @emph{refers to} that is constant, and not the
contents of the closure itself.

This also means that if you assign a closure to two different constants
or variables, both of those constants or variables refer to the same
closure.

@example
let alsoIncrementByTen = incrementByTen
alsoIncrementByTen()
// returns a value of 50

incrementByTen()
// returns a value of 60
@end example

The example above shows that calling @samp{alsoIncrementByTen} is the same as
calling @samp{incrementByTen}. Because both of them refer to the same
closure, they both increment and return the same running total.

@node Escaping Closures
@section Escaping Closures

A closure is said to @emph{escape} a function when the closure is passed as
an argument to the function, but is called after the function returns.
When you declare a function that takes a closure as one of its
parameters, you can write @samp{@@escaping} before the parameter's type to
indicate that the closure is allowed to escape.

One way that a closure can escape is by being stored in a variable that
is defined outside the function. As an example, many functions that
start an asynchronous operation take a closure argument as a completion
handler. The function returns after it starts the operation, but the
closure isn't called until the operation is completed---the closure
needs to escape, to be called later. For example:

@example
var completionHandlers: [() -> Void] = []
func someFunctionWithEscapingClosure(completionHandler: @@escaping () -> Void) @{
    completionHandlers.append(completionHandler)
@}
@end example

The @samp{someFunctionWithEscapingClosure(_:)} function takes a closure as
its argument and adds it to an array that's declared outside the
function. If you didn't mark the parameter of this function with
@samp{@@escaping}, you would get a compile-time error.

Marking a closure with @samp{@@escaping} means you have to refer to @samp{self}
explicitly within the closure. For example, in the code below, the
closure passed to @samp{someFunctionWithEscapingClosure(_:)} is an escaping
closure, which means it needs to refer to @samp{self} explicitly. In
contrast, the closure passed to @samp{someFunctionWithNonescapingClosure(_:)}
is a nonescaping closure, which means it can refer to @samp{self} implicitly.

@example
func someFunctionWithNonescapingClosure(closure: () -> Void) @{
    closure()
@}

class SomeClass @{
    var x = 10
    func doSomething() @{
        someFunctionWithEscapingClosure @{ self.x = 100 @}
        someFunctionWithNonescapingClosure @{ x = 200 @}
    @}
@}

let instance = SomeClass()
instance.doSomething()
print(instance.x)
// Prints "200"

completionHandlers.first?()
print(instance.x)
// Prints "100"
@end example

@node Autoclosures
@section Autoclosures

An @emph{autoclosure} is a closure that is automatically created to wrap an
expression that's being passed as an argument to a function. It doesn't
take any arguments, and when it's called, it returns the value of the
expression that's wrapped inside of it. This syntactic convenience lets
you omit braces around a function's parameter by writing a normal
expression instead of an explicit closure.

It's common to @emph{call} functions that take autoclosures, but it's not
common to @emph{implement} that kind of function. For example, the
@samp{assert(condition:message:file:line:)} function takes an autoclosure for
its @samp{condition} and @samp{message} parameters; its @samp{condition} parameter is
evaluated only in debug builds and its @samp{message} parameter is evaluated
only if @samp{condition} is @samp{false}.

An autoclosure lets you delay evaluation, because the code inside isn't
run until you call the closure. Delaying evaluation is useful for code
that has side effects or is computationally expensive, because it lets
you control when that code is evaluated. The code below shows how a
closure delays evaluation.

@example
var customersInLine = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
print(customersInLine.count)
// Prints "5"

let customerProvider = @{ customersInLine.remove(at: 0) @}
print(customersInLine.count)
// Prints "5"

print("Now serving \(customerProvider())!")
// Prints "Now serving Chris!"
print(customersInLine.count)
// Prints "4"
@end example

Even though the first element of the @samp{customersInLine} array is removed
by the code inside the closure, the array element isn't removed until
the closure is actually called. If the closure is never called, the
expression inside the closure is never evaluated, which means the array
element is never removed. Note that the type of @samp{customerProvider} is
not @samp{String} but @samp{() -> String}---a function with no parameters that
returns a string.

You get the same behavior of delayed evaluation when you pass a closure
as an argument to a function.

@example
// customersInLine is ["Alex", "Ewa", "Barry", "Daniella"]
func serve(customer customerProvider: () -> String) @{
    print("Now serving \(customerProvider())!")
@}
serve(customer: @{ customersInLine.remove(at: 0) @} )
// Prints "Now serving Alex!"
@end example

The @samp{serve(customer:)} function in the listing above takes an explicit
closure that returns a customer's name. The version of
@samp{serve(customer:)} below performs the same operation but, instead of
taking an explicit closure, it takes an autoclosure by marking its
parameter's type with the @samp{@@autoclosure} attribute. Now you can call the
function as if it took a @samp{String} argument instead of a closure. The
argument is automatically converted to a closure, because the
@samp{customerProvider} parameter's type is marked with the @samp{@@autoclosure}
attribute.

@example
// customersInLine is ["Ewa", "Barry", "Daniella"]
func serve(customer customerProvider: @@autoclosure () -> String) @{
    print("Now serving \(customerProvider())!")
@}
serve(customer: customersInLine.remove(at: 0))
// Prints "Now serving Ewa!"
@end example

Note

Overusing autoclosures can make your code hard to understand. The
context and function name should make it clear that evaluation is being
deferred.

If you want an autoclosure that is allowed to escape, use both the
@samp{@@autoclosure} and @samp{@@escaping} attributes. The @samp{@@escaping} attribute is
described above in @ref{Escaping Closures}.

@example
// customersInLine is ["Barry", "Daniella"]
var customerProviders: [() -> String] = []
func collectCustomerProviders(_ customerProvider: @@autoclosure
                                @@escaping () -> String) @{
    customerProviders.append(customerProvider)
@}
collectCustomerProviders(customersInLine.remove(at: 0))
collectCustomerProviders(customersInLine.remove(at: 0))

print("Collected \(customerProviders.count) closures.")
// Prints "Collected 2 closures."
for customerProvider in customerProviders @{
    print("Now serving \(customerProvider())!")
@}
// Prints "Now serving Barry!"
// Prints "Now serving Daniella!"
@end example

In the code above, instead of calling the closure passed to it as its
@samp{customerProvider} argument, the @samp{collectCustomerProviders(_:)} function
appends the closure to the @samp{customerProviders} array. The array is
declared outside the scope of the function, which means the closures in
the array can be executed after the function returns. As a result, the
value of the @samp{customerProvider} argument must be allowed to escape the
function's scope.

@node Enumeration
@chapter Enumeration

An @emph{enumeration} defines a common type for a group of related values and
enables you to work with those values in a type-safe way within your
code.

If you are familiar with C, you will know that C enumerations assign
related names to a set of integer values. Enumerations in Swift are much
more flexible, and don't have to provide a value for each case of the
enumeration. If a value (known as a @emph{raw} value) is provided for each
enumeration case, the value can be a string, a character, or a value of
any integer or floating-point type.

Alternatively, enumeration cases can specify associated values of @emph{any}
type to be stored along with each different case value, much as unions
or variants do in other languages. You can define a common set of
related cases as part of one enumeration, each of which has a different
set of values of appropriate types associated with it.

Enumerations in Swift are first-class types in their own right. They
adopt many features traditionally supported only by classes, such as
computed properties to provide additional information about the
enumeration's current value, and instance methods to provide
functionality related to the values the enumeration represents.
Enumerations can also define initializers to provide an initial case
value; can be extended to expand their functionality beyond their
original implementation; and can conform to protocols to provide
standard functionality.

For more about these capabilities, see
@ref{Properties}, @ref{Methods},
@ref{Initialization},
@ref{Extensions}, and @ref{Protocols}.

@menu
* Enumeration Syntax::
* Matching Enumeration Values with a Switch Statement::
* Iterating over Enumeration Cases::
* Associated Values::
* Raw Values::
* Recursive Enumerations::
@end menu

@node Enumeration Syntax
@section Enumeration Syntax

You introduce enumerations with the @samp{enum} keyword and place their
entire definition within a pair of braces:

@example
enum SomeEnumeration @{
    // enumeration definition goes here
@}
@end example

Here's an example for the four main points of a compass:

@example
enum CompassPoint @{
    case north
    case south
    case east
    case west
@}
@end example

The values defined in an enumeration (such as @samp{north}, @samp{south}, @samp{east},
and @samp{west}) are its @emph{enumeration cases}. You use the @samp{case} keyword to
introduce new enumeration cases.

Note

Swift enumeration cases don't have an integer value set by default,
unlike languages like C and Objective-C. In the @samp{CompassPoint} example
above, @samp{north}, @samp{south}, @samp{east} and @samp{west} don't implicitly equal @samp{0},
@samp{1}, @samp{2} and @samp{3}. Instead, the different enumeration cases are values in
their own right, with an explicitly defined type of @samp{CompassPoint}.

Multiple cases can appear on a single line, separated by commas:

@example
enum Planet @{
    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune
@}
@end example

Each enumeration definition defines a new type. Like other types in
Swift, their names (such as @samp{CompassPoint} and @samp{Planet}) start with a
capital letter. Give enumeration types singular rather than plural
names, so that they read as self-evident:

@example
var directionToHead = CompassPoint.west
@end example

The type of @samp{directionToHead} is inferred when it's initialized with one
of the possible values of @samp{CompassPoint}. Once @samp{directionToHead} is
declared as a @samp{CompassPoint}, you can set it to a different
@samp{CompassPoint} value using a shorter dot syntax:

@example
directionToHead = .east
@end example

The type of @samp{directionToHead} is already known, and so you can drop the
type when setting its value. This makes for highly readable code when
working with explicitly typed enumeration values.

@node Matching Enumeration Values with a Switch Statement
@section Matching Enumeration Values with a Switch Statement

You can match individual enumeration values with a @samp{switch} statement:

@example
directionToHead = .south
switch directionToHead @{
case .north:
    print("Lots of planets have a north")
case .south:
    print("Watch out for penguins")
case .east:
    print("Where the sun rises")
case .west:
    print("Where the skies are blue")
@}
// Prints "Watch out for penguins"
@end example

You can read this code as:

“Consider the value of @samp{directionToHead}. In the case where it equals
@samp{.north}, print @samp{"Lots of planets have a north"}. In the case where it
equals @samp{.south}, print @samp{"Watch out for penguins"}.”

@dots{}and so on.

As described in @ref{Control Flow}, a @samp{switch}
statement must be exhaustive when considering an enumeration's cases. If
the @samp{case} for @samp{.west} is omitted, this code doesn't compile, because it
doesn't consider the complete list of @samp{CompassPoint} cases. Requiring
exhaustiveness ensures that enumeration cases aren't accidentally
omitted.

When it isn't appropriate to provide a @samp{case} for every enumeration
case, you can provide a @samp{default} case to cover any cases that aren't
addressed explicitly:

@example
let somePlanet = Planet.earth
switch somePlanet @{
case .earth:
    print("Mostly harmless")
default:
    print("Not a safe place for humans")
@}
// Prints "Mostly harmless"
@end example

@node Iterating over Enumeration Cases
@section Iterating over Enumeration Cases

For some enumerations, it's useful to have a collection of all of that
enumeration's cases. You enable this by writing @samp{: CaseIterable} after
the enumeration's name. Swift exposes a collection of all the cases as
an @samp{allCases} property of the enumeration type. Here's an example:

@example
enum Beverage: CaseIterable @{
    case coffee, tea, juice
@}
let numberOfChoices = Beverage.allCases.count
print("\(numberOfChoices) beverages available")
// Prints "3 beverages available"
@end example

In the example above, you write @samp{Beverage.allCases} to access a
collection that contains all of the cases of the @samp{Beverage} enumeration.
You can use @samp{allCases} like any other collection---the collection's
elements are instances of the enumeration type, so in this case they're
@samp{Beverage} values. The example above counts how many cases there are,
and the example below uses a @samp{for} loop to iterate over all the cases.

@example
for beverage in Beverage.allCases @{
    print(beverage)
@}
// coffee
// tea
// juice
@end example

The syntax used in the examples above marks the enumeration as
conforming to the
@uref{https://developer.apple.com/documentation/swift/caseiterable, @samp{CaseIterable}}
[@uref{https://developer.apple.com/documentation/swift/caseiterable}] protocol.
For information about protocols, see @ref{Protocols}.

@node Associated Values
@section Associated Values

The examples in the previous section show how the cases of an
enumeration are a defined (and typed) value in their own right. You can
set a constant or variable to @samp{Planet.earth}, and check for this value
later. However, it's sometimes useful to be able to store values of
other types alongside these case values. This additional information is
called an @emph{associated value}, and it varies each time you use that case
as a value in your code.

You can define Swift enumerations to store associated values of any
given type, and the value types can be different for each case of the
enumeration if needed. Enumerations similar to these are known as
@emph{discriminated unions}, @emph{tagged unions}, or @emph{variants} in other
programming languages.

For example, suppose an inventory tracking system needs to track
products by two different types of barcode. Some products are labeled
with 1D barcodes in UPC format, which uses the numbers @samp{0} to @samp{9}. Each
barcode has a number system digit, followed by five manufacturer code
digits and five product code digits. These are followed by a check digit
to verify that the code has been scanned correctly:

@image{_images/barcode_UPC_2x,,,,png}
Other products are labeled with 2D barcodes in QR code format, which can
use any ISO 8859-1 character and can encode a string up to 2,953
characters long:

@image{_images/barcode_QR_2x,,,,png}
It's convenient for an inventory tracking system to store UPC barcodes
as a tuple of four integers, and QR code barcodes as a string of any
length.

In Swift, an enumeration to define product barcodes of either type might
look like this:

@example
enum Barcode @{
    case upc(Int, Int, Int, Int)
    case qrCode(String)
@}
@end example

This can be read as:

“Define an enumeration type called @samp{Barcode}, which can take either a
value of @samp{upc} with an associated value of type (@samp{Int}, @samp{Int}, @samp{Int},
@samp{Int}), or a value of @samp{qrCode} with an associated value of type
@samp{String}.”

This definition doesn't provide any actual @samp{Int} or @samp{String} values---it
just defines the @emph{type} of associated values that @samp{Barcode} constants
and variables can store when they are equal to @samp{Barcode.upc} or
@samp{Barcode.qrCode}.

You can then create new barcodes using either type:

@example
var productBarcode = Barcode.upc(8, 85909, 51226, 3)
@end example

This example creates a new variable called @samp{productBarcode} and assigns
it a value of @samp{Barcode.upc} with an associated tuple value of
@samp{(8, 85909, 51226, 3)}.

You can assign the same product a different type of barcode:

@example
productBarcode = .qrCode("ABCDEFGHIJKLMNOP")
@end example

At this point, the original @samp{Barcode.upc} and its integer values are
replaced by the new @samp{Barcode.qrCode} and its string value. Constants and
variables of type @samp{Barcode} can store either a @samp{.upc} or a @samp{.qrCode}
(together with their associated values), but they can store only one of
them at any given time.

You can check the different barcode types using a switch statement,
similar to the example in @ref{Matching Enumeration Values with a Switch Statement, , Matching
Enumeration Values with a Switch Statement}. This time, however, the
associated values are extracted as part of the switch statement. You
extract each associated value as a constant (with the @samp{let} prefix) or a
variable (with the @samp{var} prefix) for use within the @samp{switch} case's
body:

@example
switch productBarcode @{
case .upc(let numberSystem, let manufacturer, let product, let check):
    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
case .qrCode(let productCode):
    print("QR code: \(productCode).")
@}
// Prints "QR code: ABCDEFGHIJKLMNOP."
@end example

If all of the associated values for an enumeration case are extracted as
constants, or if all are extracted as variables, you can place a single
@samp{var} or @samp{let} annotation before the case name, for brevity:

@example
switch productBarcode @{
case let .upc(numberSystem, manufacturer, product, check):
    print("UPC : \(numberSystem), \(manufacturer), \(product), \(check).")
case let .qrCode(productCode):
    print("QR code: \(productCode).")
@}
// Prints "QR code: ABCDEFGHIJKLMNOP."
@end example

@node Raw Values
@section Raw Values

The barcode example in @ref{Associated Values}
shows how cases of an enumeration can declare that they store associated
values of different types. As an alternative to associated values,
enumeration cases can come prepopulated with default values (called @emph{raw
values}), which are all of the same type.

Here's an example that stores raw ASCII values alongside named
enumeration cases:

@example
enum ASCIIControlCharacter: Character @{
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
@}
@end example

Here, the raw values for an enumeration called @samp{ASCIIControlCharacter}
are defined to be of type @samp{Character}, and are set to some of the more
common ASCII control characters. @samp{Character} values are described in
@ref{Strings and Characters}.

Raw values can be strings, characters, or any of the integer or
floating-point number types. Each raw value must be unique within its
enumeration declaration.

Note

Raw values are @emph{not} the same as associated values. Raw values are set
to prepopulated values when you first define the enumeration in your
code, like the three ASCII codes above. The raw value for a particular
enumeration case is always the same. Associated values are set when you
create a new constant or variable based on one of the enumeration's
cases, and can be different each time you do so.

@menu
* Implicitly Assigned Raw Values::
* Initializing from a Raw Value::
@end menu

@node Implicitly Assigned Raw Values
@subsection Implicitly Assigned Raw Values

When you're working with enumerations that store integer or string raw
values, you don't have to explicitly assign a raw value for each case.
When you don't, Swift automatically assigns the values for you.

For example, when integers are used for raw values, the implicit value
for each case is one more than the previous case. If the first case
doesn't have a value set, its value is @samp{0}.

The enumeration below is a refinement of the earlier @samp{Planet}
enumeration, with integer raw values to represent each planet's order
from the sun:

@example
enum Planet: Int @{
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
@}
@end example

In the example above, @samp{Planet.mercury} has an explicit raw value of @samp{1},
@samp{Planet.venus} has an implicit raw value of @samp{2}, and so on.

When strings are used for raw values, the implicit value for each case
is the text of that case's name.

The enumeration below is a refinement of the earlier @samp{CompassPoint}
enumeration, with string raw values to represent each direction's name:

@example
enum CompassPoint: String @{
    case north, south, east, west
@}
@end example

In the example above, @samp{CompassPoint.south} has an implicit raw value of
@samp{"south"}, and so on.

You access the raw value of an enumeration case with its @samp{rawValue}
property:

@example
let earthsOrder = Planet.earth.rawValue
// earthsOrder is 3

let sunsetDirection = CompassPoint.west.rawValue
// sunsetDirection is "west"
@end example

@node Initializing from a Raw Value
@subsection Initializing from a Raw Value

If you define an enumeration with a raw-value type, the enumeration
automatically receives an initializer that takes a value of the raw
value's type (as a parameter called @samp{rawValue}) and returns either an
enumeration case or @samp{nil}. You can use this initializer to try to create
a new instance of the enumeration.

This example identifies Uranus from its raw value of @samp{7}:

@example
let possiblePlanet = Planet(rawValue: 7)
// possiblePlanet is of type Planet? and equals Planet.uranus
@end example

Not all possible @samp{Int} values will find a matching planet, however.
Because of this, the raw value initializer always returns an @emph{optional}
enumeration case. In the example above, @samp{possiblePlanet} is of type
@samp{Planet?}, or “optional @samp{Planet}.”

Note

The raw value initializer is a failable initializer, because not every
raw value will return an enumeration case. For more information, see
@ref{Failable Initializers}.

If you try to find a planet with a position of @samp{11}, the optional
@samp{Planet} value returned by the raw value initializer will be @samp{nil}:

@example
let positionToFind = 11
if let somePlanet = Planet(rawValue: positionToFind) @{
    switch somePlanet @{
    case .earth:
        print("Mostly harmless")
    default:
        print("Not a safe place for humans")
    @}
@} else @{
    print("There isn't a planet at position \(positionToFind)")
@}
// Prints "There isn't a planet at position 11"
@end example

This example uses optional binding to try to access a planet with a raw
value of @samp{11}. The statement @samp{if let somePlanet = Planet(rawValue: 11)}
creates an optional @samp{Planet}, and sets @samp{somePlanet} to the value of that
optional @samp{Planet} if it can be retrieved. In this case, it isn't
possible to retrieve a planet with a position of @samp{11}, and so the @samp{else}
branch is executed instead.

@node Recursive Enumerations
@section Recursive Enumerations

A @emph{recursive enumeration} is an enumeration that has another instance of
the enumeration as the associated value for one or more of the
enumeration cases. You indicate that an enumeration case is recursive by
writing @samp{indirect} before it, which tells the compiler to insert the
necessary layer of indirection.

For example, here is an enumeration that stores simple arithmetic
expressions:

@example
enum ArithmeticExpression @{
    case number(Int)
    indirect case addition(ArithmeticExpression, ArithmeticExpression)
    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)
@}
@end example

You can also write @samp{indirect} before the beginning of the enumeration to
enable indirection for all of the enumeration's cases that have an
associated value:

@example
indirect enum ArithmeticExpression @{
    case number(Int)
    case addition(ArithmeticExpression, ArithmeticExpression)
    case multiplication(ArithmeticExpression, ArithmeticExpression)
@}
@end example

This enumeration can store three kinds of arithmetic expressions: a
plain number, the addition of two expressions, and the multiplication of
two expressions. The @samp{addition} and @samp{multiplication} cases have
associated values that are also arithmetic expressions---these
associated values make it possible to nest expressions. For example, the
expression @samp{(5 + 4) * 2} has a number on the right-hand side of the
multiplication and another expression on the left-hand side of the
multiplication. Because the data is nested, the enumeration used to
store the data also needs to support nesting---this means the
enumeration needs to be recursive. The code below shows the
@samp{ArithmeticExpression} recursive enumeration being created for
@samp{(5 + 4) * 2}:

@example
let five = ArithmeticExpression.number(5)
let four = ArithmeticExpression.number(4)
let sum = ArithmeticExpression.addition(five, four)
let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))
@end example

A recursive function is a straightforward way to work with data that has
a recursive structure. For example, here's a function that evaluates an
arithmetic expression:

@example
func evaluate(_ expression: ArithmeticExpression) -> Int @{
    switch expression @{
    case let .number(value):
        return value
    case let .addition(left, right):
        return evaluate(left) + evaluate(right)
    case let .multiplication(left, right):
        return evaluate(left) * evaluate(right)
    @}
@}

print(evaluate(product))
// Prints "18"
@end example

This function evaluates a plain number by simply returning the
associated value. It evaluates an addition or multiplication by
evaluating the expression on the left-hand side, evaluating the
expression on the right-hand side, and then adding them or multiplying
them.

@node Structures and Classes
@chapter Structures and Classes

@emph{Structures} and @emph{classes} are general-purpose, flexible constructs that
become the building blocks of your program's code. You define properties
and methods to add functionality to your structures and classes using
the same syntax you use to define constants, variables, and functions.

Unlike other programming languages, Swift doesn't require you to create
separate interface and implementation files for custom structures and
classes. In Swift, you define a structure or class in a single file, and
the external interface to that class or structure is automatically made
available for other code to use.

Note

An instance of a class is traditionally known as an @emph{object}. However,
Swift structures and classes are much closer in functionality than in
other languages, and much of this chapter describes functionality that
applies to instances of @emph{either} a class or a structure type. Because of
this, the more general term @emph{instance} is used.

@menu
* Comparing Structures and Classes::
* Structures and Enumerations Are Value Types::
* Classes Are Reference Types::
@end menu

@node Comparing Structures and Classes
@section Comparing Structures and Classes

Structures and classes in Swift have many things in common. Both can:

@itemize
@item
Define properties to store values

@item
Define methods to provide functionality

@item
Define subscripts to provide access to their values using subscript
syntax

@item
Define initializers to set up their initial state

@item
Be extended to expand their functionality beyond a default
implementation

@item
Conform to protocols to provide standard functionality of a certain
kind
@end itemize

For more information, see @ref{Properties},
@ref{Methods}, @ref{Subscripts},
@ref{Initialization},
@ref{Extensions}, and @ref{Protocols}.

Classes have additional capabilities that structures don't have:

@itemize
@item
Inheritance enables one class to inherit the characteristics of
another.

@item
Type casting enables you to check and interpret the type of a class
instance at runtime.

@item
Deinitializers enable an instance of a class to free up any resources
it has assigned.

@item
Reference counting allows more than one reference to a class instance.
@end itemize

For more information, see @ref{Inheritance},
@ref{Type Casting},
@ref{Deinitialization}, and
@ref{Automatic Reference Counting}.

The additional capabilities that classes support come at the cost of
increased complexity. As a general guideline, prefer structures because
they're easier to reason about, and use classes when they're appropriate
or necessary. In practice, this means most of the custom data types you
define will be structures and enumerations. For a more detailed
comparison, see
@uref{https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes, Choosing
Between Structures and Classes}
[@uref{https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes}].

@menu
* Definition Syntax::
* Structure and Class Instances::
* Accessing Properties::
* Memberwise Initializers for Structure Types::
@end menu

@node Definition Syntax
@subsection Definition Syntax

@findex class
@findex struct
Structures and classes have a similar definition syntax. You introduce
structures with the @samp{struct} keyword and classes with the @samp{class}
keyword. Both place their entire definition within a pair of braces:

@example
struct SomeStructure @{
    // structure definition goes here
@}
class SomeClass @{
    // class definition goes here
@}
@end example

Note

Whenever you define a new structure or class, you define a new Swift
type. Give types @samp{UpperCamelCase} names (such as @samp{SomeStructure} and
@samp{SomeClass} here) to match the capitalization of standard Swift types
(such as @samp{String}, @samp{Int}, and @samp{Bool}). Give properties and methods
@samp{lowerCamelCase} names (such as @samp{frameRate} and @samp{incrementCount}) to
differentiate them from type names.

Here's an example of a structure definition and a class definition:

@example
struct Resolution @{
    var width = 0
    var height = 0
@}
class VideoMode @{
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name: String?
@}
@end example

The example above defines a new structure called @samp{Resolution}, to
describe a pixel-based display resolution. This structure has two stored
properties called @samp{width} and @samp{height}. Stored properties are constants
or variables that are bundled up and stored as part of the structure or
class. These two properties are inferred to be of type @samp{Int} by setting
them to an initial integer value of @samp{0}.

The example above also defines a new class called @samp{VideoMode}, to
describe a specific video mode for video display. This class has four
variable stored properties. The first, @samp{resolution}, is initialized with
a new @samp{Resolution} structure instance, which infers a property type of
@samp{Resolution}. For the other three properties, new @samp{VideoMode} instances
will be initialized with an @samp{interlaced} setting of @samp{false} (meaning
“noninterlaced video”), a playback frame rate of @samp{0.0}, and an optional
@samp{String} value called @samp{name}. The @samp{name} property is automatically given
a default value of @samp{nil}, or “no @samp{name} value”, because it's of an
optional type.

@node Structure and Class Instances
@subsection Structure and Class Instances

The @samp{Resolution} structure definition and the @samp{VideoMode} class
definition only describe what a @samp{Resolution} or @samp{VideoMode} will look
like. They themselves don't describe a specific resolution or video
mode. To do that, you need to create an instance of the structure or
class.

The syntax for creating instances is very similar for both structures
and classes:

@example
let someResolution = Resolution()
let someVideoMode = VideoMode()
@end example

Structures and classes both use initializer syntax for new instances.
The simplest form of initializer syntax uses the type name of the class
or structure followed by empty parentheses, such as @samp{Resolution()} or
@samp{VideoMode()}. This creates a new instance of the class or structure,
with any properties initialized to their default values. Class and
structure initialization is described in more detail in
@ref{Initialization}.

@node Accessing Properties
@subsection Accessing Properties

You can access the properties of an instance using @emph{dot syntax}. In dot
syntax, you write the property name immediately after the instance name,
separated by a period (@samp{.}), without any spaces:

@example
print("The width of someResolution is \(someResolution.width)")
// Prints "The width of someResolution is 0"
@end example

In this example, @samp{someResolution.width} refers to the @samp{width} property
of @samp{someResolution}, and returns its default initial value of @samp{0}.

You can drill down into subproperties, such as the @samp{width} property in
the @samp{resolution} property of a @samp{VideoMode}:

@example
print("The width of someVideoMode is \(someVideoMode.resolution.width)")
// Prints "The width of someVideoMode is 0"
@end example

You can also use dot syntax to assign a new value to a variable
property:

@example
someVideoMode.resolution.width = 1280
print("The width of someVideoMode is now \(someVideoMode.resolution.width)")
// Prints "The width of someVideoMode is now 1280"
@end example

@node Memberwise Initializers for Structure Types
@subsection Memberwise Initializers for Structure Types

All structures have an automatically generated @emph{memberwise initializer},
which you can use to initialize the member properties of new structure
instances. Initial values for the properties of the new instance can be
passed to the memberwise initializer by name:

@example
let vga = Resolution(width: 640, height: 480)
@end example

Unlike structures, class instances don't receive a default memberwise
initializer. Initializers are described in more detail in
@ref{Initialization}.

@node Structures and Enumerations Are Value Types
@section Structures and Enumerations Are Value Types

A @emph{value type} is a type whose value is @emph{copied} when it's assigned to a
variable or constant, or when it's passed to a function.

You've actually been using value types extensively throughout the
previous chapters. In fact, all of the basic types in Swift---integers,
floating-point numbers, Booleans, strings, arrays and dictionaries---are
value types, and are implemented as structures behind the scenes.

All structures and enumerations are value types in Swift. This means
that any structure and enumeration instances you create---and any value
types they have as properties---are always copied when they are passed
around in your code.

Note

Collections defined by the standard library like arrays, dictionaries,
and strings use an optimization to reduce the performance cost of
copying. Instead of making a copy immediately, these collections share
the memory where the elements are stored between the original instance
and any copies. If one of the copies of the collection is modified, the
elements are copied just before the modification. The behavior you see
in your code is always as if a copy took place immediately.

Consider this example, which uses the @samp{Resolution} structure from the
previous example:

@example
let hd = Resolution(width: 1920, height: 1080)
var cinema = hd
@end example

This example declares a constant called @samp{hd} and sets it to a
@samp{Resolution} instance initialized with the width and height of full HD
video (1920 pixels wide by 1080 pixels high).

It then declares a variable called @samp{cinema} and sets it to the current
value of @samp{hd}. Because @samp{Resolution} is a structure, a @emph{copy} of the
existing instance is made, and this new copy is assigned to @samp{cinema}.
Even though @samp{hd} and @samp{cinema} now have the same width and height, they
are two completely different instances behind the scenes.

Next, the @samp{width} property of @samp{cinema} is amended to be the width of the
slightly wider 2K standard used for digital cinema projection (2048
pixels wide and 1080 pixels high):

@example
cinema.width = 2048
@end example

Checking the @samp{width} property of @samp{cinema} shows that it has indeed
changed to be @samp{2048}:

@example
print("cinema is now \(cinema.width) pixels wide")
// Prints "cinema is now 2048 pixels wide"
@end example

However, the @samp{width} property of the original @samp{hd} instance still has
the old value of @samp{1920}:

@example
print("hd is still \(hd.width) pixels wide")
// Prints "hd is still 1920 pixels wide"
@end example

When @samp{cinema} was given the current value of @samp{hd}, the @emph{values} stored
in @samp{hd} were copied into the new @samp{cinema} instance. The end result was
two completely separate instances that contained the same numeric
values. However, because they are separate instances, setting the width
of @samp{cinema} to @samp{2048} doesn't affect the width stored in @samp{hd}, as shown
in the figure below:

@image{_images/sharedStateStruct_2x,,,,png}
The same behavior applies to enumerations:

@example
enum CompassPoint @{
    case north, south, east, west
    mutating func turnNorth() @{
        self = .north
    @}
@}
var currentDirection = CompassPoint.west
let rememberedDirection = currentDirection
currentDirection.turnNorth()

print("The current direction is \(currentDirection)")
print("The remembered direction is \(rememberedDirection)")
// Prints "The current direction is north"
// Prints "The remembered direction is west"
@end example

When @samp{rememberedDirection} is assigned the value of @samp{currentDirection},
it's actually set to a copy of that value. Changing the value of
@samp{currentDirection} thereafter doesn't affect the copy of the original
value that was stored in @samp{rememberedDirection}.

@node Classes Are Reference Types
@section Classes Are Reference Types

Unlike value types, @emph{reference types} are @emph{not} copied when they are
assigned to a variable or constant, or when they are passed to a
function. Rather than a copy, a reference to the same existing instance
is used.

Here's an example, using the @samp{VideoMode} class defined above:

@example
let tenEighty = VideoMode()
tenEighty.resolution = hd
tenEighty.interlaced = true
tenEighty.name = "1080i"
tenEighty.frameRate = 25.0
@end example

This example declares a new constant called @samp{tenEighty} and sets it to
refer to a new instance of the @samp{VideoMode} class. The video mode is
assigned a copy of the HD resolution of @samp{1920} by @samp{1080} from before.
It's set to be interlaced, its name is set to @samp{"1080i"}, and its frame
rate is set to @samp{25.0} frames per second.

Next, @samp{tenEighty} is assigned to a new constant, called @samp{alsoTenEighty},
and the frame rate of @samp{alsoTenEighty} is modified:

@example
let alsoTenEighty = tenEighty
alsoTenEighty.frameRate = 30.0
@end example

Because classes are reference types, @samp{tenEighty} and @samp{alsoTenEighty}
actually both refer to the @emph{same} @samp{VideoMode} instance. Effectively,
they are just two different names for the same single instance, as shown
in the figure below:

@image{_images/sharedStateClass_2x,,,,png}
Checking the @samp{frameRate} property of @samp{tenEighty} shows that it correctly
reports the new frame rate of @samp{30.0} from the underlying @samp{VideoMode}
instance:

@example
print("The frameRate property of tenEighty is now n\(tenEighty.frameRate)")
 // Prints "The frameRate property of tenEighty is now 30.0"
@end example

This example also shows how reference types can be harder to reason
about. If @samp{tenEighty} and @samp{alsoTenEighty} were far apart in your
program's code, it could be difficult to find all the ways that the
video mode is changed. Wherever you use @samp{tenEighty}, you also have to
think about the code that uses @samp{alsoTenEighty}, and vice versa. In
contrast, value types are easier to reason about because all of the code
that interacts with the same value is close together in your source
files.

Note that @samp{tenEighty} and @samp{alsoTenEighty} are declared as @emph{constants},
rather than variables. However, you can still change
@samp{tenEighty.frameRate} and @samp{alsoTenEighty.frameRate} because the values
of the @samp{tenEighty} and @samp{alsoTenEighty} constants themselves don't
actually change. @samp{tenEighty} and @samp{alsoTenEighty} themselves don't
“store” the @samp{VideoMode} instance---instead, they both @emph{refer} to a
@samp{VideoMode} instance behind the scenes. It's the @samp{frameRate} property of
the underlying @samp{VideoMode} that is changed, not the values of the
constant references to that @samp{VideoMode}.

@menu
* Identity Operators::
* Pointers::
@end menu

@node Identity Operators
@subsection Identity Operators

Because classes are reference types, it's possible for multiple
constants and variables to refer to the same single instance of a class
behind the scenes. (The same isn't true for structures and enumerations,
because they are always copied when they are assigned to a constant or
variable, or passed to a function.)

It can sometimes be useful to find out whether two constants or
variables refer to exactly the same instance of a class. To enable this,
Swift provides two identity operators:

@itemize
@item
Identical to (@samp{===})

@item
Not identical to (@samp{!==})
@end itemize

Use these operators to check whether two constants or variables refer to
the same single instance:

@example
if tenEighty === alsoTenEighty @{
    print("tenEighty and alsoTenEighty refer to the same VideoMode instance.")
@}
// Prints "tenEighty and alsoTenEighty refer to the same VideoMode instance."
@end example

Note that @emph{identical to} (represented by three equals signs, or @samp{===})
doesn't mean the same thing as @emph{equal to} (represented by two equals
signs, or @samp{==}). @emph{Identical to} means that two constants or variables of
class type refer to exactly the same class instance. @emph{Equal to} means
that two instances are considered equal or equivalent in value, for some
appropriate meaning of @emph{equal}, as defined by the type's designer.

When you define your own custom structures and classes, it's your
responsibility to decide what qualifies as two instances being equal.
The process of defining your own implementations of the @samp{==} and @samp{!=}
operators is described in @ref{Equivalence Operators}.

@node Pointers
@subsection Pointers

If you have experience with C, C++, or Objective-C, you may know that
these languages use @emph{pointers} to refer to addresses in memory. A Swift
constant or variable that refers to an instance of some reference type
is similar to a pointer in C, but isn't a direct pointer to an address
in memory, and doesn't require you to write an asterisk (@samp{*}) to
indicate that you are creating a reference. Instead, these references
are defined like any other constant or variable in Swift. The standard
library provides pointer and buffer types that you can use if you need
to interact with pointers directly---see
@uref{https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management, Manual
Memory Management}
[@uref{https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management}].

@node Properties
@chapter Properties

@emph{Properties} associate values with a particular class, structure, or
enumeration. Stored properties store constant and variable values as
part of an instance, whereas computed properties calculate (rather than
store) a value. Computed properties are provided by classes, structures,
and enumerations. Stored properties are provided only by classes and
structures.

Stored and computed properties are usually associated with instances of
a particular type. However, properties can also be associated with the
type itself. Such properties are known as type properties.

In addition, you can define property observers to monitor changes in a
property's value, which you can respond to with custom actions. Property
observers can be added to stored properties you define yourself, and
also to properties that a subclass inherits from its superclass.

@menu
* Stored Properties::
* Computed Properties::
* Property Observers::
* Global and Local Variables::
* Type Properties::
@end menu

@node Stored Properties
@section Stored Properties

In its simplest form, a stored property is a constant or variable that
is stored as part of an instance of a particular class or structure.
Stored properties can be either @emph{variable stored properties} (introduced
by the @samp{var} keyword) or @emph{constant stored properties} (introduced by the
@samp{let} keyword).

You can provide a default value for a stored property as part of its
definition, as described in @ref{Default Property Values, , Default
Property Values}. You can also set and modify the initial value for a
stored property during initialization. This is true even for constant
stored properties, as described in
@ref{Assigning Constant Properties During Initialization, , Assigning Constant Properties During
Initialization}.

The example below defines a structure called @samp{FixedLengthRange}, which
describes a range of integers whose range length cannot be changed after
it is created:

@example
struct FixedLengthRange @{
    var firstValue: Int
    let length: Int
@}
var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)
// the range represents integer values 0, 1, and 2
rangeOfThreeItems.firstValue = 6
// the range now represents integer values 6, 7, and 8
@end example

Instances of @samp{FixedLengthRange} have a variable stored property called
@samp{firstValue} and a constant stored property called @samp{length}. In the
example above, @samp{length} is initialized when the new range is created and
cannot be changed thereafter, because it is a constant property.

@menu
* Stored Properties of Constant Structure Instances::
* Lazy Stored Properties::
* Stored Properties and Instance Variables::
@end menu

@node Stored Properties of Constant Structure Instances
@subsection Stored Properties of Constant Structure Instances

If you create an instance of a structure and assign that instance to a
constant, you cannot modify the instance's properties, even if they were
declared as variable properties:

@example
let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)
// this range represents integer values 0, 1, 2, and 3
rangeOfFourItems.firstValue = 6
// this will report an error, even though firstValue is a variable property
@end example

Because @samp{rangeOfFourItems} is declared as a constant (with the @samp{let}
keyword), it is not possible to change its @samp{firstValue} property, even
though @samp{firstValue} is a variable property.

This behavior is due to structures being @emph{value types}. When an instance
of a value type is marked as a constant, so are all of its properties.

The same is not true for classes, which are @emph{reference types}. If you
assign an instance of a reference type to a constant, you can still
change that instance's variable properties.

@node Lazy Stored Properties
@subsection Lazy Stored Properties

A @emph{lazy stored property} is a property whose initial value is not
calculated until the first time it is used. You indicate a lazy stored
property by writing the @samp{lazy} modifier before its declaration.

Note

You must always declare a lazy property as a variable (with the @samp{var}
keyword), because its initial value might not be retrieved until after
instance initialization completes. Constant properties must always have
a value @emph{before} initialization completes, and therefore cannot be
declared as lazy.

Lazy properties are useful when the initial value for a property is
dependent on outside factors whose values are not known until after an
instance's initialization is complete. Lazy properties are also useful
when the initial value for a property requires complex or
computationally expensive setup that should not be performed unless or
until it is needed.

The example below uses a lazy stored property to avoid unnecessary
initialization of a complex class. This example defines two classes
called @samp{DataImporter} and @samp{DataManager}, neither of which is shown in
full:

@example
class DataImporter @{
    /*
     DataImporter is a class to import data from an external file.
     The class is assumed to take a nontrivial amount of time to
     initialize.
     */
    var filename = "data.txt"
    // the DataImporter class would provide data importing functionality here
@}

class DataManager @{
    lazy var importer = DataImporter()
    var data = [String]()
    // the DataManager class would provide data management functionality here
@}

let manager = DataManager()
manager.data.append("Some data")
manager.data.append("Some more data")
// the DataImporter instance for the importer property has not yet been created
@end example

The @samp{DataManager} class has a stored property called @samp{data}, which is
initialized with a new, empty array of @samp{String} values. Although the
rest of its functionality is not shown, the purpose of this
@samp{DataManager} class is to manage and provide access to this array of
@samp{String} data.

Part of the functionality of the @samp{DataManager} class is the ability to
import data from a file. This functionality is provided by the
@samp{DataImporter} class, which is assumed to take a nontrivial amount of
time to initialize. This might be because a @samp{DataImporter} instance
needs to open a file and read its contents into memory when the
@samp{DataImporter} instance is initialized.

It is possible for a @samp{DataManager} instance to manage its data without
ever importing data from a file, so there is no need to create a new
@samp{DataImporter} instance when the @samp{DataManager} itself is created.
Instead, it makes more sense to create the @samp{DataImporter} instance if
and when it is first used.

Because it is marked with the @samp{lazy} modifier, the @samp{DataImporter}
instance for the @samp{importer} property is only created when the @samp{importer}
property is first accessed, such as when its @samp{filename} property is
queried:

@example
print(manager.importer.filename)
// the DataImporter instance for the importer property has now been created
// Prints "data.txt"
@end example

Note

If a property marked with the @samp{lazy} modifier is accessed by multiple
threads simultaneously and the property has not yet been initialized,
there is no guarantee that the property will be initialized only once.

@node Stored Properties and Instance Variables
@subsection Stored Properties and Instance Variables

If you have experience with Objective-C, you may know that it provides
@emph{two} ways to store values and references as part of a class instance.
In addition to properties, you can use instance variables as a backing
store for the values stored in a property.

Swift unifies these concepts into a single property declaration. A Swift
property does not have a corresponding instance variable, and the
backing store for a property is not accessed directly. This approach
avoids confusion about how the value is accessed in different contexts
and simplifies the property's declaration into a single, definitive
statement. All information about the property---including its name,
type, and memory management characteristics---is defined in a single
location as part of the type's definition.

@node Computed Properties
@section Computed Properties

In addition to stored properties, classes, structures, and enumerations
can define @emph{computed properties}, which do not actually store a value.
Instead, they provide a getter and an optional setter to retrieve and
set other properties and values indirectly.

@example
struct Point @{
    var x = 0.0, y = 0.0
@}
struct Size @{
    var width = 0.0, height = 0.0
@}
struct Rect @{
    var origin = Point()
    var size = Size()
    var center: Point @{
        get @{
            let centerX = origin.x + (size.width / 2)
            let centerY = origin.y + (size.height / 2)
            return Point(x: centerX, y: centerY)
        @}
        set(newCenter) @{
            origin.x = newCenter.x - (size.width / 2)
            origin.y = newCenter.y - (size.height / 2)
        @}
    @}
@}
var square = Rect(origin: Point(x: 0.0, y: 0.0),
                  size: Size(width: 10.0, height: 10.0))
let initialSquareCenter = square.center
square.center = Point(x: 15.0, y: 15.0)
print("square.origin is now at (\(square.origin.x), \(square.origin.y))")
// Prints "square.origin is now at (10.0, 10.0)"
@end example

This example defines three structures for working with geometric shapes:

@itemize
@item
@samp{Point} encapsulates the x- and y-coordinate of a point.

@item
@samp{Size} encapsulates a @samp{width} and a @samp{height}.

@item
@samp{Rect} defines a rectangle by an origin point and a size.
@end itemize

The @samp{Rect} structure also provides a computed property called @samp{center}.
The current center position of a @samp{Rect} can always be determined from
its @samp{origin} and @samp{size}, and so you don't need to store the center point
as an explicit @samp{Point} value. Instead, @samp{Rect} defines a custom getter
and setter for a computed variable called @samp{center}, to enable you to
work with the rectangle's @samp{center} as if it were a real stored property.

The example above creates a new @samp{Rect} variable called @samp{square}. The
@samp{square} variable is initialized with an origin point of @samp{(0, 0)}, and a
width and height of @samp{10}. This square is represented by the blue square
in the diagram below.

The @samp{square} variable's @samp{center} property is then accessed through dot
syntax (@samp{square.center}), which causes the getter for @samp{center} to be
called, to retrieve the current property value. Rather than returning an
existing value, the getter actually calculates and returns a new @samp{Point}
to represent the center of the square. As can be seen above, the getter
correctly returns a center point of @samp{(5, 5)}.

The @samp{center} property is then set to a new value of @samp{(15, 15)}, which
moves the square up and to the right, to the new position shown by the
orange square in the diagram below. Setting the @samp{center} property calls
the setter for @samp{center}, which modifies the @samp{x} and @samp{y} values of the
stored @samp{origin} property, and moves the square to its new position.

@image{_images/computedProperties_2x,,,,png}

@menu
* Shorthand Setter Declaration::
* Read-Only Computed Properties::
@end menu

@node Shorthand Setter Declaration
@subsection Shorthand Setter Declaration

If a computed property's setter does not define a name for the new value
to be set, a default name of @samp{newValue} is used. Here's an alternative
version of the @samp{Rect} structure, which takes advantage of this shorthand
notation:

@example
struct AlternativeRect @{
    var origin = Point()
    var size = Size()
    var center: Point @{
        get @{
            let centerX = origin.x + (size.width / 2)
            let centerY = origin.y + (size.height / 2)
            return Point(x: centerX, y: centerY)
        @}
        set @{
            origin.x = newValue.x - (size.width / 2)
            origin.y = newValue.y - (size.height / 2)
        @}
    @}
@}
@end example

@node Read-Only Computed Properties
@subsection Read-Only Computed Properties

A computed property with a getter but no setter is known as a @emph{read-only
computed property}. A read-only computed property always returns a
value, and can be accessed through dot syntax, but cannot be set to a
different value.

Note

You must declare computed properties---including read-only computed
properties---as variable properties with the @samp{var} keyword, because
their value is not fixed. The @samp{let} keyword is only used for constant
properties, to indicate that their values cannot be changed once they
are set as part of instance initialization.

You can simplify the declaration of a read-only computed property by
removing the @samp{get} keyword and its braces:

@example
struct Cuboid @{
    var width = 0.0, height = 0.0, depth = 0.0
    var volume: Double @{
        return width * height * depth
    @}
@}
let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)
print("the volume of fourByFiveByTwo is \(fourByFiveByTwo.volume)")
// Prints "the volume of fourByFiveByTwo is 40.0"
@end example

This example defines a new structure called @samp{Cuboid}, which represents a
3D rectangular box with @samp{width}, @samp{height}, and @samp{depth} properties. This
structure also has a read-only computed property called @samp{volume}, which
calculates and returns the current volume of the cuboid. It doesn't make
sense for @samp{volume} to be settable, because it would be ambiguous as to
which values of @samp{width}, @samp{height}, and @samp{depth} should be used for a
particular @samp{volume} value. Nonetheless, it is useful for a @samp{Cuboid} to
provide a read-only computed property to enable external users to
discover its current calculated volume.

@node Property Observers
@section Property Observers

Property observers observe and respond to changes in a property's value.
Property observers are called every time a property's value is set, even
if the new value is the same as the property's current value.

You can add property observers to any stored properties you define,
except for lazy stored properties. You can also add property observers
to any inherited property (whether stored or computed) by overriding the
property within a subclass. You don't need to define property observers
for nonoverridden computed properties, because you can observe and
respond to changes to their value in the computed property's setter.
Property overriding is described in
@ref{Overriding}.

You have the option to define either or both of these observers on a
property:

@itemize
@item
@samp{willSet} is called just before the value is stored.

@item
@samp{didSet} is called immediately after the new value is stored.
@end itemize

If you implement a @samp{willSet} observer, it's passed the new property
value as a constant parameter. You can specify a name for this parameter
as part of your @samp{willSet} implementation. If you don't write the
parameter name and parentheses within your implementation, the parameter
is made available with a default parameter name of @samp{newValue}.

Similarly, if you implement a @samp{didSet} observer, it's passed a constant
parameter containing the old property value. You can name the parameter
or use the default parameter name of @samp{oldValue}. If you assign a value
to a property within its own @samp{didSet} observer, the new value that you
assign replaces the one that was just set.

Note

The @samp{willSet} and @samp{didSet} observers of superclass properties are called
when a property is set in a subclass initializer, after the superclass
initializer has been called. They are not called while a class is
setting its own properties, before the superclass initializer has been
called.

For more information about initializer delegation, see
@ref{Initializer Delegation for Value Types}
and @ref{Initializer Delegation for Class Types, , Initializer Delegation for Class
Types}.

Here's an example of @samp{willSet} and @samp{didSet} in action. The example below
defines a new class called @samp{StepCounter}, which tracks the total number
of steps that a person takes while walking. This class might be used
with input data from a pedometer or other step counter to keep track of
a person's exercise during their daily routine.

@example
class StepCounter @{
    var totalSteps: Int = 0 @{
        willSet(newTotalSteps) @{
            print("About to set totalSteps to \(newTotalSteps)")
        @}
        didSet @{
            if totalSteps > oldValue @{
                print("Added \(totalSteps - oldValue) steps")
            @}
        @}
    @}
@}
let stepCounter = StepCounter()
stepCounter.totalSteps = 200
// About to set totalSteps to 200
// Added 200 steps
stepCounter.totalSteps = 360
// About to set totalSteps to 360
// Added 160 steps
stepCounter.totalSteps = 896
// About to set totalSteps to 896
// Added 536 steps
@end example

The @samp{StepCounter} class declares a @samp{totalSteps} property of type @samp{Int}.
This is a stored property with @samp{willSet} and @samp{didSet} observers.

The @samp{willSet} and @samp{didSet} observers for @samp{totalSteps} are called
whenever the property is assigned a new value. This is true even if the
new value is the same as the current value.

This example's @samp{willSet} observer uses a custom parameter name of
@samp{newTotalSteps} for the upcoming new value. In this example, it simply
prints out the value that is about to be set.

The @samp{didSet} observer is called after the value of @samp{totalSteps} is
updated. It compares the new value of @samp{totalSteps} against the old
value. If the total number of steps has increased, a message is printed
to indicate how many new steps have been taken. The @samp{didSet} observer
does not provide a custom parameter name for the old value, and the
default name of @samp{oldValue} is used instead.

Note

If you pass a property that has observers to a function as an in-out
parameter, the @samp{willSet} and @samp{didSet} observers are always called. This
is because of the copy-in copy-out memory model for in-out parameters:
The value is always written back to the property at the end of the
function. For a detailed discussion of the behavior of in-out
parameters, see @ref{In-Out Parameters, , In-Out
Parameters}.

@node Global and Local Variables
@section Global and Local Variables

The capabilities described above for computing and observing properties
are also available to @emph{global variables} and @emph{local variables}. Global
variables are variables that are defined outside of any function,
method, closure, or type context. Local variables are variables that are
defined within a function, method, or closure context.

The global and local variables you have encountered in previous chapters
have all been @emph{stored variables}. Stored variables, like stored
properties, provide storage for a value of a certain type and allow that
value to be set and retrieved.

However, you can also define @emph{computed variables} and define observers
for stored variables, in either a global or local scope. Computed
variables calculate their value, rather than storing it, and they are
written in the same way as computed properties.

Note

Global constants and variables are always computed lazily, in a similar
manner to @ref{Lazy Stored Properties}. Unlike
lazy stored properties, global constants and variables do not need to be
marked with the @samp{lazy} modifier.

Local constants and variables are never computed lazily.

@node Type Properties
@section Type Properties

Instance properties are properties that belong to an instance of a
particular type. Every time you create a new instance of that type, it
has its own set of property values, separate from any other instance.

You can also define properties that belong to the type itself, not to
any one instance of that type. There will only ever be one copy of these
properties, no matter how many instances of that type you create. These
kinds of properties are called @emph{type properties}.

Type properties are useful for defining values that are universal to
@emph{all} instances of a particular type, such as a constant property that
all instances can use (like a static constant in C), or a variable
property that stores a value that is global to all instances of that
type (like a static variable in C).

Stored type properties can be variables or constants. Computed type
properties are always declared as variable properties, in the same way
as computed instance properties.

Note

Unlike stored instance properties, you must always give stored type
properties a default value. This is because the type itself does not
have an initializer that can assign a value to a stored type property at
initialization time.

Stored type properties are lazily initialized on their first access.
They are guaranteed to be initialized only once, even when accessed by
multiple threads simultaneously, and they do not need to be marked with
the @samp{lazy} modifier.

@menu
* Type Property Syntax::
* Querying and Setting Type Properties::
@end menu

@node Type Property Syntax
@subsection Type Property Syntax

In C and Objective-C, you define static constants and variables
associated with a type as @emph{global} static variables. In Swift, however,
type properties are written as part of the type's definition, within the
type's outer curly braces, and each type property is explicitly scoped
to the type it supports.

You define type properties with the @samp{static} keyword. For computed type
properties for class types, you can use the @samp{class} keyword instead to
allow subclasses to override the superclass's implementation. The
example below shows the syntax for stored and computed type properties:

@example
struct SomeStructure @{
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int @{
        return 1
    @}
@}
enum SomeEnumeration @{
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int @{
        return 6
    @}
@}
class SomeClass @{
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int @{
        return 27
    @}
    class var overrideableComputedTypeProperty: Int @{
        return 107
    @}
@}
@end example

Note

The computed type property examples above are for read-only computed
type properties, but you can also define read-write computed type
properties with the same syntax as for computed instance properties.

@node Querying and Setting Type Properties
@subsection Querying and Setting Type Properties

Type properties are queried and set with dot syntax, just like instance
properties. However, type properties are queried and set on the @emph{type},
not on an instance of that type. For example:

@example
print(SomeStructure.storedTypeProperty)
// Prints "Some value."
SomeStructure.storedTypeProperty = "Another value."
print(SomeStructure.storedTypeProperty)
// Prints "Another value."
print(SomeEnumeration.computedTypeProperty)
// Prints "6"
print(SomeClass.computedTypeProperty)
// Prints "27"
@end example

The examples that follow use two stored type properties as part of a
structure that models an audio level meter for a number of audio
channels. Each channel has an integer audio level between @samp{0} and @samp{10}
inclusive.

The figure below illustrates how two of these audio channels can be
combined to model a stereo audio level meter. When a channel's audio
level is @samp{0}, none of the lights for that channel are lit. When the
audio level is @samp{10}, all of the lights for that channel are lit. In this
figure, the left channel has a current level of @samp{9}, and the right
channel has a current level of @samp{7}:

@image{_images/staticPropertiesVUMeter_2x,,,,png}
The audio channels described above are represented by instances of the
@samp{AudioChannel} structure:

@example
struct AudioChannel @{
    static let thresholdLevel = 10
    static var maxInputLevelForAllChannels = 0
    var currentLevel: Int = 0 @{
        didSet @{
            if currentLevel > AudioChannel.thresholdLevel @{
                // cap the new audio level to the threshold level
                currentLevel = AudioChannel.thresholdLevel
            @}
            if currentLevel > AudioChannel.maxInputLevelForAllChannels @{
                // store this as the new overall maximum input level
                AudioChannel.maxInputLevelForAllChannels = currentLevel
            @}
        @}
    @}
@}
@end example

The @samp{AudioChannel} structure defines two stored type properties to
support its functionality. The first, @samp{thresholdLevel}, defines the
maximum threshold value an audio level can take. This is a constant
value of @samp{10} for all @samp{AudioChannel} instances. If an audio signal comes
in with a higher value than @samp{10}, it will be capped to this threshold
value (as described below).

The second type property is a variable stored property called
@samp{maxInputLevelForAllChannels}. This keeps track of the maximum input
value that has been received by @emph{any} @samp{AudioChannel} instance. It starts
with an initial value of @samp{0}.

The @samp{AudioChannel} structure also defines a stored instance property
called @samp{currentLevel}, which represents the channel's current audio
level on a scale of @samp{0} to @samp{10}.

The @samp{currentLevel} property has a @samp{didSet} property observer to check
the value of @samp{currentLevel} whenever it is set. This observer performs
two checks:

@itemize
@item
If the new value of @samp{currentLevel} is greater than the allowed
@samp{thresholdLevel}, the property observer caps @samp{currentLevel} to
@samp{thresholdLevel}.

@item
If the new value of @samp{currentLevel} (after any capping) is higher than
any value previously received by @emph{any} @samp{AudioChannel} instance, the
property observer stores the new @samp{currentLevel} value in the
@samp{maxInputLevelForAllChannels} type property.
@end itemize

Note

In the first of these two checks, the @samp{didSet} observer sets
@samp{currentLevel} to a different value. This does not, however, cause the
observer to be called again.

You can use the @samp{AudioChannel} structure to create two new audio
channels called @samp{leftChannel} and @samp{rightChannel}, to represent the audio
levels of a stereo sound system:

@example
var leftChannel = AudioChannel()
var rightChannel = AudioChannel()
@end example

If you set the @samp{currentLevel} of the @emph{left} channel to @samp{7}, you can see
that the @samp{maxInputLevelForAllChannels} type property is updated to equal
@samp{7}:

@example
leftChannel.currentLevel = 7
print(leftChannel.currentLevel)
// Prints "7"
print(AudioChannel.maxInputLevelForAllChannels)
// Prints "7"
@end example

If you try to set the @samp{currentLevel} of the @emph{right} channel to @samp{11}, you
can see that the right channel's @samp{currentLevel} property is capped to
the maximum value of @samp{10}, and the @samp{maxInputLevelForAllChannels} type
property is updated to equal @samp{10}:

@example
rightChannel.currentLevel = 11
print(rightChannel.currentLevel)
// Prints "10"
print(AudioChannel.maxInputLevelForAllChannels)
// Prints "10"
@end example

@node Methods
@chapter Methods

@emph{Methods} are functions that are associated with a particular type.
Classes, structures, and enumerations can all define instance methods,
which encapsulate specific tasks and functionality for working with an
instance of a given type. Classes, structures, and enumerations can also
define type methods, which are associated with the type itself. Type
methods are similar to class methods in Objective-C.

The fact that structures and enumerations can define methods in Swift is
a major difference from C and Objective-C. In Objective-C, classes are
the only types that can define methods. In Swift, you can choose whether
to define a class, structure, or enumeration, and still have the
flexibility to define methods on the type you create.

@menu
* Instance Methods::
* Type Methods::
@end menu

@node Instance Methods
@section Instance Methods

@emph{Instance methods} are functions that belong to instances of a
particular class, structure, or enumeration. They support the
functionality of those instances, either by providing ways to access and
modify instance properties, or by providing functionality related to the
instance's purpose. Instance methods have exactly the same syntax as
functions, as described in @ref{Functions}.

You write an instance method within the opening and closing braces of
the type it belongs to. An instance method has implicit access to all
other instance methods and properties of that type. An instance method
can be called only on a specific instance of the type it belongs to. It
cannot be called in isolation without an existing instance.

Here's an example that defines a simple @samp{Counter} class, which can be
used to count the number of times an action occurs:

@example
class Counter @{
    var count = 0
    func increment() @{
        count += 1
    @}
    func increment(by amount: Int) @{
        count += amount
    @}
    func reset() @{
        count = 0
    @}
@}
@end example

The @samp{Counter} class defines three instance methods:

@itemize
@item
@samp{increment()} increments the counter by @samp{1}.

@item
@samp{increment(by: Int)} increments the counter by a specified integer
amount.

@item
@samp{reset()} resets the counter to zero.
@end itemize

The @samp{Counter} class also declares a variable property, @samp{count}, to keep
track of the current counter value.

You call instance methods with the same dot syntax as properties:

@example
let counter = Counter()
// the initial counter value is 0
counter.increment()
// the counter's value is now 1
counter.increment(by: 5)
// the counter's value is now 6
counter.reset()
// the counter's value is now 0
@end example

Function parameters can have both a name (for use within the function's
body) and an argument label (for use when calling the function), as
described in @ref{Function Argument Labels and Parameter Names, , Function Argument Labels and
Parameter Names}. The same is true for method parameters, because
methods are just functions that are associated with a type.

@menu
* The self Property::
* Modifying Value Types from Within Instance Methods::
* Assigning to self Within a Mutating Method::
@end menu

@node The self Property
@subsection The self Property

Every instance of a type has an implicit property called @samp{self}, which
is exactly equivalent to the instance itself. You use the @samp{self}
property to refer to the current instance within its own instance
methods.

The @samp{increment()} method in the example above could have been written
like this:

@example
func increment() @{
    self.count += 1
@}
@end example

In practice, you don't need to write @samp{self} in your code very often. If
you don't explicitly write @samp{self}, Swift assumes that you are referring
to a property or method of the current instance whenever you use a known
property or method name within a method. This assumption is demonstrated
by the use of @samp{count} (rather than @samp{self.count}) inside the three
instance methods for @samp{Counter}.

The main exception to this rule occurs when a parameter name for an
instance method has the same name as a property of that instance. In
this situation, the parameter name takes precedence, and it becomes
necessary to refer to the property in a more qualified way. You use the
@samp{self} property to distinguish between the parameter name and the
property name.

Here, @samp{self} disambiguates between a method parameter called @samp{x} and an
instance property that is also called @samp{x}:

@example
struct Point @{
    var x = 0.0, y = 0.0
    func isToTheRightOf(x: Double) -> Bool @{
        return self.x > x
    @}
@}
let somePoint = Point(x: 4.0, y: 5.0)
if somePoint.isToTheRightOf(x: 1.0) @{
    print("This point is to the right of the line where x == 1.0")
@}
// Prints "This point is to the right of the line where x == 1.0"
@end example

Without the @samp{self} prefix, Swift would assume that both uses of @samp{x}
referred to the method parameter called @samp{x}.

@node Modifying Value Types from Within Instance Methods
@subsection Modifying Value Types from Within Instance Methods

Structures and enumerations are @emph{value types}. By default, the
properties of a value type cannot be modified from within its instance
methods.

However, if you need to modify the properties of your structure or
enumeration within a particular method, you can opt in to @emph{mutating}
behavior for that method. The method can then mutate (that is, change)
its properties from within the method, and any changes that it makes are
written back to the original structure when the method ends. The method
can also assign a completely new instance to its implicit @samp{self}
property, and this new instance will replace the existing one when the
method ends.

You can opt in to this behavior by placing the @samp{mutating} keyword before
the @samp{func} keyword for that method:

@example
struct Point @{
    var x = 0.0, y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) @{
        x += deltaX
        y += deltaY
    @}
@}
var somePoint = Point(x: 1.0, y: 1.0)
somePoint.moveBy(x: 2.0, y: 3.0)
print("The point is now at (\(somePoint.x), \(somePoint.y))")
// Prints "The point is now at (3.0, 4.0)"
@end example

The @samp{Point} structure above defines a mutating @samp{moveBy(x:y:)} method,
which moves a @samp{Point} instance by a certain amount. Instead of returning
a new point, this method actually modifies the point on which it is
called. The @samp{mutating} keyword is added to its definition to enable it
to modify its properties.

Note that you cannot call a mutating method on a constant of structure
type, because its properties cannot be changed, even if they are
variable properties, as described in @ref{Stored Properties of Constant Structure Instances}.

@example
let fixedPoint = Point(x: 3.0, y: 3.0)
fixedPoint.moveBy(x: 2.0, y: 3.0)
// this will report an error
@end example

@node Assigning to self Within a Mutating Method
@subsection Assigning to self Within a Mutating Method

Mutating methods can assign an entirely new instance to the implicit
@samp{self} property. The @samp{Point} example shown above could have been written
in the following way instead:

@example
struct Point @{
    var x = 0.0, y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) @{
        self = Point(x: x + deltaX, y: y + deltaY)
    @}
@}
@end example

This version of the mutating @samp{moveBy(x:y:)} method creates a new
structure whose @samp{x} and @samp{y} values are set to the target location. The
end result of calling this alternative version of the method will be
exactly the same as for calling the earlier version.

Mutating methods for enumerations can set the implicit @samp{self} parameter
to be a different case from the same enumeration:

@example
enum TriStateSwitch @{
    case off, low, high
    mutating func next() @{
        switch self @{
        case .off:
            self = .low
        case .low:
            self = .high
        case .high:
            self = .off
        @}
    @}
@}
var ovenLight = TriStateSwitch.low
ovenLight.next()
// ovenLight is now equal to .high
ovenLight.next()
// ovenLight is now equal to .off
@end example

This example defines an enumeration for a three-state switch. The switch
cycles between three different power states (@samp{off}, @samp{low} and @samp{high})
every time its @samp{next()} method is called.

@node Type Methods
@section Type Methods

Instance methods, as described above, are methods that are called on an
instance of a particular type. You can also define methods that are
called on the type itself. These kinds of methods are called @emph{type
methods}. You indicate type methods by writing the @samp{static} keyword
before the method's @samp{func} keyword. Classes may also use the @samp{class}
keyword to allow subclasses to override the superclass's implementation
of that method.

Note

In Objective-C, you can define type-level methods only for Objective-C
classes. In Swift, you can define type-level methods for all classes,
structures, and enumerations. Each type method is explicitly scoped to
the type it supports.

Type methods are called with dot syntax, like instance methods. However,
you call type methods on the type, not on an instance of that type.
Here's how you call a type method on a class called @samp{SomeClass}:

@example
class SomeClass @{
    class func someTypeMethod() @{
        // type method implementation goes here
    @}
@}
SomeClass.someTypeMethod()
@end example

Within the body of a type method, the implicit @samp{self} property refers to
the type itself, rather than an instance of that type. This means that
you can use @samp{self} to disambiguate between type properties and type
method parameters, just as you do for instance properties and instance
method parameters.

More generally, any unqualified method and property names that you use
within the body of a type method will refer to other type-level methods
and properties. A type method can call another type method with the
other method's name, without needing to prefix it with the type name.
Similarly, type methods on structures and enumerations can access type
properties by using the type property's name without a type name prefix.

The example below defines a structure called @samp{LevelTracker}, which
tracks a player's progress through the different levels or stages of a
game. It is a single-player game, but can store information for multiple
players on a single device.

All of the game's levels (apart from level one) are locked when the game
is first played. Every time a player finishes a level, that level is
unlocked for all players on the device. The @samp{LevelTracker} structure
uses type properties and methods to keep track of which levels of the
game have been unlocked. It also tracks the current level for an
individual player.

@example
struct LevelTracker @{
    static var highestUnlockedLevel = 1
    var currentLevel = 1

    static func unlock(_ level: Int) @{
        if level > highestUnlockedLevel @{ highestUnlockedLevel = level @}
    @}

    static func isUnlocked(_ level: Int) -> Bool @{
        return level <= highestUnlockedLevel
    @}

    @@discardableResult
    mutating func advance(to level: Int) -> Bool @{
        if LevelTracker.isUnlocked(level) @{
            currentLevel = level
            return true
        @} else @{
            return false
        @}
    @}
@}
@end example

The @samp{LevelTracker} structure keeps track of the highest level that any
player has unlocked. This value is stored in a type property called
@samp{highestUnlockedLevel}.

@samp{LevelTracker} also defines two type functions to work with the
@samp{highestUnlockedLevel} property. The first is a type function called
@samp{unlock(_:)}, which updates the value of @samp{highestUnlockedLevel} whenever
a new level is unlocked. The second is a convenience type function
called @samp{isUnlocked(_:)}, which returns @samp{true} if a particular level
number is already unlocked. (Note that these type methods can access the
@samp{highestUnlockedLevel} type property without your needing to write it as
@samp{LevelTracker.highestUnlockedLevel}.)

In addition to its type property and type methods, @samp{LevelTracker} tracks
an individual player's progress through the game. It uses an instance
property called @samp{currentLevel} to track the level that a player is
currently playing.

To help manage the @samp{currentLevel} property, @samp{LevelTracker} defines an
instance method called @samp{advance(to:)}. Before updating @samp{currentLevel},
this method checks whether the requested new level is already unlocked.
The @samp{advance(to:)} method returns a Boolean value to indicate whether or
not it was actually able to set @samp{currentLevel}. Because it's not
necessarily a mistake for code that calls the @samp{advance(to:)} method to
ignore the return value, this function is marked with the
@samp{@@discardableResult} attribute. For more information about this
attribute, see Attributes.

The @samp{LevelTracker} structure is used with the @samp{Player} class, shown
below, to track and update the progress of an individual player:

@example
class Player @{
    var tracker = LevelTracker()
    let playerName: String
    func complete(level: Int) @{
        LevelTracker.unlock(level + 1)
        tracker.advance(to: level + 1)
    @}
    init(name: String) @{
        playerName = name
    @}
@}
@end example

The @samp{Player} class creates a new instance of @samp{LevelTracker} to track
that player's progress. It also provides a method called
@samp{complete(level:)}, which is called whenever a player completes a
particular level. This method unlocks the next level for all players and
updates the player's progress to move them to the next level. (The
Boolean return value of @samp{advance(to:)} is ignored, because the level is
known to have been unlocked by the call to @samp{LevelTracker.unlock(_:)} on
the previous line.)

You can create an instance of the @samp{Player} class for a new player, and
see what happens when the player completes level one:

@example
var player = Player(name: "Argyrios")
player.complete(level: 1)
print("highest unlocked level is now \(LevelTracker.highestUnlockedLevel)")
// Prints "highest unlocked level is now 2"
@end example

If you create a second player, whom you try to move to a level that is
not yet unlocked by any player in the game, the attempt to set the
player's current level fails:

@example
player = Player(name: "Beto")
if player.tracker.advance(to: 6) @{
    print("player is now on level 6")
@} else @{
    print("level 6 has not yet been unlocked")
@}
// Prints "level 6 has not yet been unlocked"
@end example

@node Subscripts
@chapter Subscripts

Classes, structures, and enumerations can define @emph{subscripts}, which are
shortcuts for accessing the member elements of a collection, list, or
sequence. You use subscripts to set and retrieve values by index without
needing separate methods for setting and retrieval. For example, you
access elements in an @samp{Array} instance as @samp{someArray[index]} and
elements in a @samp{Dictionary} instance as @samp{someDictionary[key]}.

You can define multiple subscripts for a single type, and the
appropriate subscript overload to use is selected based on the type of
index value you pass to the subscript. Subscripts are not limited to a
single dimension, and you can define subscripts with multiple input
parameters to suit your custom type's needs.

@menu
* Subscript Syntax::
* Subscript Usage::
* Subscript Options::
@end menu

@node Subscript Syntax
@section Subscript Syntax

Subscripts enable you to query instances of a type by writing one or
more values in square brackets after the instance name. Their syntax is
similar to both instance method syntax and computed property syntax. You
write subscript definitions with the @samp{subscript} keyword, and specify
one or more input parameters and a return type, in the same way as
instance methods. Unlike instance methods, subscripts can be read-write
or read-only. This behavior is communicated by a getter and setter in
the same way as for computed properties:

@example
subscript(index: Int) -> Int @{
    get @{
        // return an appropriate subscript value here
    @}
    set(newValue) @{
        // perform a suitable setting action here
    @}
@}
@end example

The type of @samp{newValue} is the same as the return value of the subscript.
As with computed properties, you can choose not to specify the setter's
@samp{(newValue)} parameter. A default parameter called @samp{newValue} is
provided to your setter if you do not provide one yourself.

As with read-only computed properties, you can simplify the declaration
of a read-only subscript by removing the @samp{get} keyword and its braces:

@example
subscript(index: Int) -> Int @{
    // return an appropriate subscript value here
@}
@end example

Here's an example of a read-only subscript implementation, which defines
a @samp{TimesTable} structure to represent an @emph{n}-times-table of integers:

@example
struct TimesTable @{
    let multiplier: Int
    subscript(index: Int) -> Int @{
        return multiplier * index
    @}
@}
let threeTimesTable = TimesTable(multiplier: 3)
print("six times three is \(threeTimesTable[6])")
// Prints "six times three is 18"
@end example

In this example, a new instance of @samp{TimesTable} is created to represent
the three-times-table. This is indicated by passing a value of @samp{3} to
the structure's @samp{initializer} as the value to use for the instance's
@samp{multiplier} parameter.

You can query the @samp{threeTimesTable} instance by calling its subscript,
as shown in the call to @samp{threeTimesTable[6]}. This requests the sixth
entry in the three-times-table, which returns a value of @samp{18}, or @samp{3}
times @samp{6}.

Note

An @emph{n}-times-table is based on a fixed mathematical rule. It is not
appropriate to set @samp{threeTimesTable[someIndex]} to a new value, and so
the subscript for @samp{TimesTable} is defined as a read-only subscript.

@node Subscript Usage
@section Subscript Usage

The exact meaning of “subscript” depends on the context in which it is
used. Subscripts are typically used as a shortcut for accessing the
member elements in a collection, list, or sequence. You are free to
implement subscripts in the most appropriate way for your particular
class or structure's functionality.

For example, Swift's @samp{Dictionary} type implements a subscript to set and
retrieve the values stored in a @samp{Dictionary} instance. You can set a
value in a dictionary by providing a key of the dictionary's key type
within subscript brackets, and assigning a value of the dictionary's
value type to the subscript:

@example
var numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
numberOfLegs["bird"] = 2
@end example

The example above defines a variable called @samp{numberOfLegs} and
initializes it with a dictionary literal containing three key-value
pairs. The type of the @samp{numberOfLegs} dictionary is inferred to be
@samp{[String: Int]}. After creating the dictionary, this example uses
subscript assignment to add a @samp{String} key of @samp{"bird"} and an @samp{Int}
value of @samp{2} to the dictionary.

For more information about @samp{Dictionary} subscripting, see
@ref{Accessing and Modifying a Dictionary}.

Note

Swift's @samp{Dictionary} type implements its key-value subscripting as a
subscript that takes and returns an @emph{optional} type. For the
@samp{numberOfLegs} dictionary above, the key-value subscript takes and
returns a value of type @samp{Int?}, or “optional int”. The @samp{Dictionary} type
uses an optional subscript type to model the fact that not every key
will have a value, and to give a way to delete a value for a key by
assigning a @samp{nil} value for that key.

@node Subscript Options
@section Subscript Options

Subscripts can take any number of input parameters, and these input
parameters can be of any type. Subscripts can also return any type.
Subscripts can use variadic parameters, but they can't use in-out
parameters or provide default parameter values.

A class or structure can provide as many subscript implementations as it
needs, and the appropriate subscript to be used will be inferred based
on the types of the value or values that are contained within the
subscript brackets at the point that the subscript is used. This
definition of multiple subscripts is known as @emph{subscript overloading}.

While it is most common for a subscript to take a single parameter, you
can also define a subscript with multiple parameters if it is
appropriate for your type. The following example defines a @samp{Matrix}
structure, which represents a two-dimensional matrix of @samp{Double} values.
The @samp{Matrix} structure's subscript takes two integer parameters:

@example
struct Matrix @{
    let rows: Int, columns: Int
    var grid: [Double]
    init(rows: Int, columns: Int) @{
        self.rows = rows
        self.columns = columns
        grid = Array(repeating: 0.0, count: rows * columns)
    @}
    func indexIsValid(row: Int, column: Int) -> Bool @{
        return row >= 0 && row < rows && column >= 0 && column < columns
    @}
    subscript(row: Int, column: Int) -> Double @{
        get @{
            assert(indexIsValid(row: row, column: column), "Index out of range")
            return grid[(row * columns) + column]
        @}
        set @{
            assert(indexIsValid(row: row, column: column), "Index out of range")
            grid[(row * columns) + column] = newValue
        @}
    @}
@}
@end example

@samp{Matrix} provides an initializer that takes two parameters called @samp{rows}
and @samp{columns}, and creates an array that is large enough to store
@samp{rows * columns} values of type @samp{Double}. Each position in the matrix is
given an initial value of @samp{0.0}. To achieve this, the array's size, and
an initial cell value of @samp{0.0}, are passed to an array initializer that
creates and initializes a new array of the correct size. This
initializer is described in more detail in
@ref{Creating an Array with a Default Value, , Creating an Array with a Default
Value}.

You can construct a new @samp{Matrix} instance by passing an appropriate row
and column count to its initializer:

@example
var matrix = Matrix(rows: 2, columns: 2)
@end example

The example above creates a new @samp{Matrix} instance with two rows and two
columns. The @samp{grid} array for this @samp{Matrix} instance is effectively a
flattened version of the matrix, as read from top left to bottom right:

@image{_images/subscriptMatrix01_2x,,,,png}
Values in the matrix can be set by passing row and column values into
the subscript, separated by a comma:

@example
matrix[0, 1] = 1.5
matrix[1, 0] = 3.2
@end example

These two statements call the subscript's setter to set a value of @samp{1.5}
in the top right position of the matrix (where @samp{row} is @samp{0} and @samp{column}
is @samp{1}), and @samp{3.2} in the bottom left position (where @samp{row} is @samp{1} and
@samp{column} is @samp{0}):

@image{_images/subscriptMatrix02_2x,,,,png}
The @samp{Matrix} subscript's getter and setter both contain an assertion to
check that the subscript's @samp{row} and @samp{column} values are valid. To
assist with these assertions, @samp{Matrix} includes a convenience method
called @samp{indexIsValid(row:column:)}, which checks whether the requested
@samp{row} and @samp{column} are inside the bounds of the matrix:

@example
func indexIsValid(row: Int, column: Int) -> Bool @{
    return row >= 0 && row < rows && column >= 0 && column < columns
@}
@end example

An assertion is triggered if you try to access a subscript that is
outside of the matrix bounds:

@example
let someValue = matrix[2, 2]
// this triggers an assert, because [2, 2] is outside of the matrix bounds
@end example

@node Inheritance
@chapter Inheritance

A class can @emph{inherit} methods, properties, and other characteristics
from another class. When one class inherits from another, the inheriting
class is known as a @emph{subclass}, and the class it inherits from is known
as its @emph{superclass}. Inheritance is a fundamental behavior that
differentiates classes from other types in Swift.

Classes in Swift can call and access methods, properties, and subscripts
belonging to their superclass and can provide their own overriding
versions of those methods, properties, and subscripts to refine or
modify their behavior. Swift helps to ensure your overrides are correct
by checking that the override definition has a matching superclass
definition.

Classes can also add property observers to inherited properties in order
to be notified when the value of a property changes. Property observers
can be added to any property, regardless of whether it was originally
defined as a stored or computed property.

@menu
* Defining a Base Class::
* Subclassing::
* Overriding::
* Preventing Overrides::
@end menu

@node Defining a Base Class
@section Defining a Base Class

Any class that does not inherit from another class is known as a @emph{base
class}.

Note

Swift classes do not inherit from a universal base class. Classes you
define without specifying a superclass automatically become base classes
for you to build upon.

The example below defines a base class called @samp{Vehicle}. This base class
defines a stored property called @samp{currentSpeed}, with a default value of
@samp{0.0} (inferring a property type of @samp{Double}). The @samp{currentSpeed}
property's value is used by a read-only computed @samp{String} property
called @samp{description} to create a description of the vehicle.

The @samp{Vehicle} base class also defines a method called @samp{makeNoise}. This
method does not actually do anything for a base @samp{Vehicle} instance, but
will be customized by subclasses of @samp{Vehicle} later on:

@example
class Vehicle @{
    var currentSpeed = 0.0
    var description: String @{
        return "traveling at \(currentSpeed) miles per hour"
    @}
    func makeNoise() @{
        // do nothing - an arbitrary vehicle doesn't necessarily make a noise
    @}
@}
@end example

You create a new instance of @samp{Vehicle} with @emph{initializer syntax}, which
is written as a type name followed by empty parentheses:

@example
let someVehicle = Vehicle()
@end example

Having created a new @samp{Vehicle} instance, you can access its
@samp{description} property to print a human-readable description of the
vehicle's current speed:

@example
print("Vehicle: \(someVehicle.description)")
// Vehicle: traveling at 0.0 miles per hour
@end example

The @samp{Vehicle} class defines common characteristics for an arbitrary
vehicle, but is not much use in itself. To make it more useful, you need
to refine it to describe more specific kinds of vehicles.

@node Subclassing
@section Subclassing

@emph{Subclassing} is the act of basing a new class on an existing class. The
subclass inherits characteristics from the existing class, which you can
then refine. You can also add new characteristics to the subclass.

To indicate that a subclass has a superclass, write the subclass name
before the superclass name, separated by a colon:

@example
class SomeSubclass: SomeSuperclass @{
    // subclass definition goes here
@}
@end example

The following example defines a subclass called @samp{Bicycle}, with a
superclass of @samp{Vehicle}:

@example
class Bicycle: Vehicle @{
    var hasBasket = false
@}
@end example

The new @samp{Bicycle} class automatically gains all of the characteristics
of @samp{Vehicle}, such as its @samp{currentSpeed} and @samp{description} properties
and its @samp{makeNoise()} method.

In addition to the characteristics it inherits, the @samp{Bicycle} class
defines a new stored property, @samp{hasBasket}, with a default value of
@samp{false} (inferring a type of @samp{Bool} for the property).

By default, any new @samp{Bicycle} instance you create will not have a
basket. You can set the @samp{hasBasket} property to @samp{true} for a particular
@samp{Bicycle} instance after that instance is created:

@example
let bicycle = Bicycle()
bicycle.hasBasket = true
@end example

You can also modify the inherited @samp{currentSpeed} property of a @samp{Bicycle}
instance, and query the instance's inherited @samp{description} property:

@example
bicycle.currentSpeed = 15.0
print("Bicycle: \(bicycle.description)")
// Bicycle: traveling at 15.0 miles per hour
@end example

Subclasses can themselves be subclassed. The next example creates a
subclass of @samp{Bicycle} for a two-seater bicycle known as a “tandem”:

@example
class Tandem: Bicycle @{
    var currentNumberOfPassengers = 0
@}
@end example

@samp{Tandem} inherits all of the properties and methods from @samp{Bicycle},
which in turn inherits all of the properties and methods from @samp{Vehicle}.
The @samp{Tandem} subclass also adds a new stored property called
@samp{currentNumberOfPassengers}, with a default value of @samp{0}.

If you create an instance of @samp{Tandem}, you can work with any of its new
and inherited properties, and query the read-only @samp{description} property
it inherits from @samp{Vehicle}:

@example
let tandem = Tandem()
tandem.hasBasket = true
tandem.currentNumberOfPassengers = 2
tandem.currentSpeed = 22.0
print("Tandem: \(tandem.description)")
// Tandem: traveling at 22.0 miles per hour
@end example

@node Overriding
@section Overriding

A subclass can provide its own custom implementation of an instance
method, type method, instance property, type property, or subscript that
it would otherwise inherit from a superclass. This is known as
@emph{overriding}.

@findex override
To override a characteristic that would otherwise be inherited, you
prefix your overriding definition with the @samp{override} keyword. Doing so
clarifies that you intend to provide an override and have not provided a
matching definition by mistake. Overriding by accident can cause
unexpected behavior, and any overrides without the @samp{override} keyword
are diagnosed as an error when your code is compiled.

The @samp{override} keyword also prompts the Swift compiler to check that
your overriding class's superclass (or one of its parents) has a
declaration that matches the one you provided for the override. This
check ensures that your overriding definition is correct.

@menu
* Accessing Superclass Methods, Properties, and Subscripts: Accessing Superclass Methods Properties and Subscripts.
* Overriding Methods::
* Overriding Properties::
@end menu

@node Accessing Superclass Methods Properties and Subscripts
@subsection Accessing Superclass Methods, Properties, and Subscripts

When you provide a method, property, or subscript override for a
subclass, it is sometimes useful to use the existing superclass
implementation as part of your override. For example, you can refine the
behavior of that existing implementation, or store a modified value in
an existing inherited variable.

Where this is appropriate, you access the superclass version of a
method, property, or subscript by using the @samp{super} prefix:

@itemize
@item
An overridden method named @samp{someMethod()} can call the superclass
version of @samp{someMethod()} by calling @samp{super.someMethod()} within the
overriding method implementation.

@item
An overridden property called @samp{someProperty} can access the superclass
version of @samp{someProperty} as @samp{super.someProperty} within the
overriding getter or setter implementation.

@item
An overridden subscript for @samp{someIndex} can access the superclass
version of the same subscript as @samp{super[someIndex]} from within the
overriding subscript implementation.
@end itemize

@node Overriding Methods
@subsection Overriding Methods

You can override an inherited instance or type method to provide a
tailored or alternative implementation of the method within your
subclass.

The following example defines a new subclass of @samp{Vehicle} called
@samp{Train}, which overrides the @samp{makeNoise()} method that @samp{Train} inherits
from @samp{Vehicle}:

@example
class Train: Vehicle @{
    override func makeNoise() @{
        print("Choo Choo")
    @}
@}
@end example

If you create a new instance of @samp{Train} and call its @samp{makeNoise()}
method, you can see that the @samp{Train} subclass version of the method is
called:

@example
let train = Train()
train.makeNoise()
// Prints "Choo Choo"
@end example

@node Overriding Properties
@subsection Overriding Properties

You can override an inherited instance or type property to provide your
own custom getter and setter for that property, or to add property
observers to enable the overriding property to observe when the
underlying property value changes.

@enumerate
@item
Overriding Property Getters and Setters


You can provide a custom getter (and setter, if appropriate) to override
@emph{any} inherited property, regardless of whether the inherited property
is implemented as a stored or computed property at source. The stored or
computed nature of an inherited property is not known by a subclass---it
only knows that the inherited property has a certain name and type. You
must always state both the name and the type of the property you are
overriding, to enable the compiler to check that your override matches a
superclass property with the same name and type.

You can present an inherited read-only property as a read-write property
by providing both a getter and a setter in your subclass property
override. You cannot, however, present an inherited read-write property
as a read-only property.

Note

If you provide a setter as part of a property override, you must also
provide a getter for that override. If you don't want to modify the
inherited property's value within the overriding getter, you can simply
pass through the inherited value by returning @samp{super.someProperty} from
the getter, where @samp{someProperty} is the name of the property you are
overriding.

The following example defines a new class called @samp{Car}, which is a
subclass of @samp{Vehicle}. The @samp{Car} class introduces a new stored property
called @samp{gear}, with a default integer value of @samp{1}. The @samp{Car} class also
overrides the @samp{description} property it inherits from @samp{Vehicle}, to
provide a custom description that includes the current gear:

@example
class Car: Vehicle @{
    var gear = 1
    override var description: String @{
        return super.description + " in gear \(gear)"
    @}
@}
@end example

The override of the @samp{description} property starts by calling
@samp{super.description}, which returns the @samp{Vehicle} class's @samp{description}
property. The @samp{Car} class's version of @samp{description} then adds some
extra text onto the end of this description to provide information about
the current gear.

If you create an instance of the @samp{Car} class and set its @samp{gear} and
@samp{currentSpeed} properties, you can see that its @samp{description} property
returns the tailored description defined within the @samp{Car} class:

@example
let car = Car()
car.currentSpeed = 25.0
car.gear = 3
print("Car: \(car.description)")
// Car: traveling at 25.0 miles per hour in gear 3
@end example

@item
Overriding Property Observers


You can use property overriding to add property observers to an
inherited property. This enables you to be notified when the value of an
inherited property changes, regardless of how that property was
originally implemented. For more information on property observers, see
@ref{Property Observers}.

Note

You cannot add property observers to inherited constant stored
properties or inherited read-only computed properties. The value of
these properties cannot be set, and so it is not appropriate to provide
a @samp{willSet} or @samp{didSet} implementation as part of an override.

Note also that you cannot provide both an overriding setter and an
overriding property observer for the same property. If you want to
observe changes to a property's value, and you are already providing a
custom setter for that property, you can simply observe any value
changes from within the custom setter.

The following example defines a new class called @samp{AutomaticCar}, which
is a subclass of @samp{Car}. The @samp{AutomaticCar} class represents a car with
an automatic gearbox, which automatically selects an appropriate gear to
use based on the current speed:

@example
class AutomaticCar: Car @{
    override var currentSpeed: Double @{
        didSet @{
            gear = Int(currentSpeed / 10.0) + 1
        @}
    @}
@}
@end example

Whenever you set the @samp{currentSpeed} property of an @samp{AutomaticCar}
instance, the property's @samp{didSet} observer sets the instance's @samp{gear}
property to an appropriate choice of gear for the new speed.
Specifically, the property observer chooses a gear that is the new
@samp{currentSpeed} value divided by @samp{10}, rounded down to the nearest
integer, plus @samp{1}. A speed of @samp{35.0} produces a gear of @samp{4}:

@example
let automatic = AutomaticCar()
automatic.currentSpeed = 35.0
print("AutomaticCar: \(automatic.description)")
// AutomaticCar: traveling at 35.0 miles per hour in gear 4
@end example
@end enumerate

@node Preventing Overrides
@section Preventing Overrides

You can prevent a method, property, or subscript from being overridden
by marking it as @emph{final}. Do this by writing the @samp{final} modifier before
the method, property, or subscript's introducer keyword (such as
@samp{final var}, @samp{final func}, @samp{final class func}, and @samp{final subscript}).

Any attempt to override a final method, property, or subscript in a
subclass is reported as a compile-time error. Methods, properties, or
subscripts that you add to a class in an extension can also be marked as
final within the extension's definition.

You can mark an entire class as final by writing the @samp{final} modifier
before the @samp{class} keyword in its class definition (@samp{final class}). Any
attempt to subclass a final class is reported as a compile-time error.

@node Initialization
@chapter Initialization

@emph{Initialization} is the process of preparing an instance of a class,
structure, or enumeration for use. This process involves setting an
initial value for each stored property on that instance and performing
any other setup or initialization that is required before the new
instance is ready for use.

You implement this initialization process by defining @emph{initializers},
which are like special methods that can be called to create a new
instance of a particular type. Unlike Objective-C initializers, Swift
initializers do not return a value. Their primary role is to ensure that
new instances of a type are correctly initialized before they are used
for the first time.

Instances of class types can also implement a @emph{deinitializer}, which
performs any custom cleanup just before an instance of that class is
deallocated. For more information about deinitializers, see
@ref{Deinitialization}.

@menu
* Setting Initial Values for Stored Properties::
* Customizing Initialization::
* Default Initializers::
* Initializer Delegation for Value Types::
* Class Inheritance and Initialization::
* Failable Initializers::
* Required Initializers::
* Setting a Default Property Value with a Closure or Function::
@end menu

@node Setting Initial Values for Stored Properties
@section Setting Initial Values for Stored Properties

Classes and structures @emph{must} set all of their stored properties to an
appropriate initial value by the time an instance of that class or
structure is created. Stored properties cannot be left in an
indeterminate state.

You can set an initial value for a stored property within an
initializer, or by assigning a default property value as part of the
property's definition. These actions are described in the following
sections.

Note

When you assign a default value to a stored property, or set its initial
value within an initializer, the value of that property is set directly,
without calling any property observers.

@menu
* Initializers::
* Default Property Values::
@end menu

@node Initializers
@subsection Initializers

@findex init
@emph{Initializers} are called to create a new instance of a particular type.
In its simplest form, an initializer is like an instance method with no
parameters, written using the @samp{init} keyword:

@example
init() @{
    // perform some initialization here
@}
@end example

The example below defines a new structure called @samp{Fahrenheit} to store
temperatures expressed in the Fahrenheit scale. The @samp{Fahrenheit}
structure has one stored property, @samp{temperature}, which is of type
@samp{Double}:

@example
struct Fahrenheit @{
    var temperature: Double
    init() @{
        temperature = 32.0
    @}
@}
var f = Fahrenheit()
print("The default temperature is \(f.temperature)° Fahrenheit")
// Prints "The default temperature is 32.0° Fahrenheit"
@end example

The structure defines a single initializer, @samp{init}, with no parameters,
which initializes the stored temperature with a value of @samp{32.0} (the
freezing point of water in degrees Fahrenheit).

@node Default Property Values
@subsection Default Property Values

You can set the initial value of a stored property from within an
initializer, as shown above. Alternatively, specify a @emph{default property
value} as part of the property's declaration. You specify a default
property value by assigning an initial value to the property when it is
defined.

Note

If a property always takes the same initial value, provide a default
value rather than setting a value within an initializer. The end result
is the same, but the default value ties the property's initialization
more closely to its declaration. It makes for shorter, clearer
initializers and enables you to infer the type of the property from its
default value. The default value also makes it easier for you to take
advantage of default initializers and initializer inheritance, as
described later in this chapter.

You can write the @samp{Fahrenheit} structure from above in a simpler form by
providing a default value for its @samp{temperature} property at the point
that the property is declared:

@example
struct Fahrenheit @{
    var temperature = 32.0
@}
@end example

@node Customizing Initialization
@section Customizing Initialization

You can customize the initialization process with input parameters and
optional property types, or by assigning constant properties during
initialization, as described in the following sections.

@menu
* Initialization Parameters::
* Parameter Names and Argument Labels::
* Initializer Parameters Without Argument Labels::
* Optional Property Types::
* Assigning Constant Properties During Initialization::
@end menu

@node Initialization Parameters
@subsection Initialization Parameters

You can provide @emph{initialization parameters} as part of an initializer's
definition, to define the types and names of values that customize the
initialization process. Initialization parameters have the same
capabilities and syntax as function and method parameters.

The following example defines a structure called @samp{Celsius}, which stores
temperatures expressed in degrees Celsius. The @samp{Celsius} structure
implements two custom initializers called @samp{init(fromFahrenheit:)} and
@samp{init(fromKelvin:)}, which initialize a new instance of the structure
with a value from a different temperature scale:

@example
struct Celsius @{
    var temperatureInCelsius: Double
    init(fromFahrenheit fahrenheit: Double) @{
        temperatureInCelsius = (fahrenheit - 32.0) / 1.8
    @}
    init(fromKelvin kelvin: Double) @{
        temperatureInCelsius = kelvin - 273.15
    @}
@}
let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)
// boilingPointOfWater.temperatureInCelsius is 100.0
let freezingPointOfWater = Celsius(fromKelvin: 273.15)
// freezingPointOfWater.temperatureInCelsius is 0.0
@end example

The first initializer has a single initialization parameter with an
argument label of @samp{fromFahrenheit} and a parameter name of @samp{fahrenheit}.
The second initializer has a single initialization parameter with an
argument label of @samp{fromKelvin} and a parameter name of @samp{kelvin}. Both
initializers convert their single argument into the corresponding
Celsius value and store this value in a property called
@samp{temperatureInCelsius}.

@node Parameter Names and Argument Labels
@subsection Parameter Names and Argument Labels

As with function and method parameters, initialization parameters can
have both a parameter name for use within the initializer's body and an
argument label for use when calling the initializer.

However, initializers do not have an identifying function name before
their parentheses in the way that functions and methods do. Therefore,
the names and types of an initializer's parameters play a particularly
important role in identifying which initializer should be called.
Because of this, Swift provides an automatic argument label for @emph{every}
parameter in an initializer if you don't provide one.

The following example defines a structure called @samp{Color}, with three
constant properties called @samp{red}, @samp{green}, and @samp{blue}. These properties
store a value between @samp{0.0} and @samp{1.0} to indicate the amount of red,
green, and blue in the color.

@samp{Color} provides an initializer with three appropriately named
parameters of type @samp{Double} for its red, green, and blue components.
@samp{Color} also provides a second initializer with a single @samp{white}
parameter, which is used to provide the same value for all three color
components.

@example
struct Color @{
    let red, green, blue: Double
    init(red: Double, green: Double, blue: Double) @{
        self.red = red
        self.green = green
        self.blue = blue
    @}
    init(white: Double) @{
        red = white
        green = white
        blue = white
    @}
@}
@end example

Both initializers can be used to create a new @samp{Color} instance, by
providing named values for each initializer parameter:

@example
let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)
let halfGray = Color(white: 0.5)
@end example

Note that it is not possible to call these initializers without using
argument labels. Argument labels must always be used in an initializer
if they are defined, and omitting them is a compile-time error:

@example
let veryGreen = Color(0.0, 1.0, 0.0)
// this reports a compile-time error - argument labels are required
@end example

@node Initializer Parameters Without Argument Labels
@subsection Initializer Parameters Without Argument Labels

If you do not want to use an argument label for an initializer
parameter, write an underscore (@samp{_}) instead of an explicit argument
label for that parameter to override the default behavior.

Here's an expanded version of the @samp{Celsius} example from
@ref{Initialization Parameters} above, with
an additional initializer to create a new @samp{Celsius} instance from a
@samp{Double} value that is already in the Celsius scale:

@example
struct Celsius @{
    var temperatureInCelsius: Double
    init(fromFahrenheit fahrenheit: Double) @{
        temperatureInCelsius = (fahrenheit - 32.0) / 1.8
    @}
    init(fromKelvin kelvin: Double) @{
        temperatureInCelsius = kelvin - 273.15
    @}
    init(_ celsius: Double) @{
        temperatureInCelsius = celsius
    @}
@}
let bodyTemperature = Celsius(37.0)
// bodyTemperature.temperatureInCelsius is 37.0
@end example

The initializer call @samp{Celsius(37.0)} is clear in its intent without the
need for an argument label. It is therefore appropriate to write this
initializer as @samp{init(_ celsius: Double)} so that it can be called by
providing an unnamed @samp{Double} value.

@node Optional Property Types
@subsection Optional Property Types

If your custom type has a stored property that is logically allowed to
have “no value”---perhaps because its value cannot be set during
initialization, or because it is allowed to have “no value” at some
later point---declare the property with an @emph{optional} type. Properties
of optional type are automatically initialized with a value of @samp{nil},
indicating that the property is deliberately intended to have “no value
yet” during initialization.

The following example defines a class called @samp{SurveyQuestion}, with an
optional @samp{String} property called @samp{response}:

@example
class SurveyQuestion @{
    var text: String
    var response: String?
    init(text: String) @{
        self.text = text
    @}
    func ask() @{
        print(text)
    @}
@}
let cheeseQuestion = SurveyQuestion(text: "Do you like cheese?")
cheeseQuestion.ask()
// Prints "Do you like cheese?"
cheeseQuestion.response = "Yes, I do like cheese."
@end example

The response to a survey question cannot be known until it is asked, and
so the @samp{response} property is declared with a type of @samp{String?}, or
“optional @samp{String=”. It is automatically assigned a default value of
=nil}, meaning “no string yet”, when a new instance of @samp{SurveyQuestion}
is initialized.

@node Assigning Constant Properties During Initialization
@subsection Assigning Constant Properties During Initialization

You can assign a value to a constant property at any point during
initialization, as long as it is set to a definite value by the time
initialization finishes. Once a constant property is assigned a value,
it can't be further modified.

Note

For class instances, a constant property can be modified during
initialization only by the class that introduces it. It cannot be
modified by a subclass.

You can revise the @samp{SurveyQuestion} example from above to use a constant
property rather than a variable property for the @samp{text} property of the
question, to indicate that the question does not change once an instance
of @samp{SurveyQuestion} is created. Even though the @samp{text} property is now a
constant, it can still be set within the class's initializer:

@example
class SurveyQuestion @{
    let text: String
    var response: String?
    init(text: String) @{
        self.text = text
    @}
    func ask() @{
        print(text)
    @}
@}
let beetsQuestion = SurveyQuestion(text: "How about beets?")
beetsQuestion.ask()
// Prints "How about beets?"
beetsQuestion.response = "I also like beets. (But not with cheese.)"
@end example

@node Default Initializers
@section Default Initializers

Swift provides a @emph{default initializer} for any structure or class that
provides default values for all of its properties and does not provide
at least one initializer itself. The default initializer simply creates
a new instance with all of its properties set to their default values.

This example defines a class called @samp{ShoppingListItem}, which
encapsulates the name, quantity, and purchase state of an item in a
shopping list:

@example
class ShoppingListItem @{
    var name: String?
    var quantity = 1
    var purchased = false
@}
var item = ShoppingListItem()
@end example

Because all properties of the @samp{ShoppingListItem} class have default
values, and because it is a base class with no superclass,
@samp{ShoppingListItem} automatically gains a default initializer
implementation that creates a new instance with all of its properties
set to their default values. (The @samp{name} property is an optional
@samp{String} property, and so it automatically receives a default value of
@samp{nil}, even though this value is not written in the code.) The example
above uses the default initializer for the @samp{ShoppingListItem} class to
create a new instance of the class with initializer syntax, written as
@samp{ShoppingListItem()}, and assigns this new instance to a variable called
@samp{item}.

@menu
* Memberwise Initializers for Structure Types: Memberwise Initializers for Structure Types 1.
@end menu

@node Memberwise Initializers for Structure Types 1
@subsection Memberwise Initializers for Structure Types

Structure types automatically receive a @emph{memberwise initializer} if they
do not define any of their own custom initializers. Unlike a default
initializer, the structure receives a memberwise initializer even if it
has stored properties that do not have default values.

The memberwise initializer is a shorthand way to initialize the member
properties of new structure instances. Initial values for the properties
of the new instance can be passed to the memberwise initializer by name.

The example below defines a structure called @samp{Size} with two properties
called @samp{width} and @samp{height}. Both properties are inferred to be of type
@samp{Double} by assigning a default value of @samp{0.0}.

The @samp{Size} structure automatically receives an @samp{init(width:height:)}
memberwise initializer, which you can use to initialize a new @samp{Size}
instance:

@example
struct Size @{
    var width = 0.0, height = 0.0
@}
let twoByTwo = Size(width: 2.0, height: 2.0)
@end example

@node Initializer Delegation for Value Types
@section Initializer Delegation for Value Types

Initializers can call other initializers to perform part of an
instance's initialization. This process, known as @emph{initializer
delegation}, avoids duplicating code across multiple initializers.

The rules for how initializer delegation works, and for what forms of
delegation are allowed, are different for value types and class types.
Value types (structures and enumerations) do not support inheritance,
and so their initializer delegation process is relatively simple,
because they can only delegate to another initializer that they provide
themselves. Classes, however, can inherit from other classes, as
described in @ref{Inheritance}. This means that
classes have additional responsibilities for ensuring that all stored
properties they inherit are assigned a suitable value during
initialization. These responsibilities are described in
@ref{Class Inheritance and Initialization}
below.

For value types, you use @samp{self.init} to refer to other initializers from
the same value type when writing your own custom initializers. You can
call @samp{self.init} only from within an initializer.

Note that if you define a custom initializer for a value type, you will
no longer have access to the default initializer (or the memberwise
initializer, if it is a structure) for that type. This constraint
prevents a situation in which additional essential setup provided in a
more complex initializer is accidentally circumvented by someone using
one of the automatic initializers.

Note

If you want your custom value type to be initializable with the default
initializer and memberwise initializer, and also with your own custom
initializers, write your custom initializers in an extension rather than
as part of the value type's original implementation. For more
information, see @ref{Extensions}.

The following example defines a custom @samp{Rect} structure to represent a
geometric rectangle. The example requires two supporting structures
called @samp{Size} and @samp{Point}, both of which provide default values of @samp{0.0}
for all of their properties:

@example
struct Size @{
    var width = 0.0, height = 0.0
@}
struct Point @{
    var x = 0.0, y = 0.0
@}
@end example

You can initialize the @samp{Rect} structure below in one of three ways---by
using its default zero-initialized @samp{origin} and @samp{size} property values,
by providing a specific origin point and size, or by providing a
specific center point and size. These initialization options are
represented by three custom initializers that are part of the @samp{Rect}
structure's definition:

@example
struct Rect @{
    var origin = Point()
    var size = Size()
    init() @{@}
    init(origin: Point, size: Size) @{
        self.origin = origin
        self.size = size
    @}
    init(center: Point, size: Size) @{
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    @}
@}
@end example

The first @samp{Rect} initializer, @samp{init()}, is functionally the same as the
default initializer that the structure would have received if it did not
have its own custom initializers. This initializer has an empty body,
represented by an empty pair of curly braces @samp{@{@}}. Calling this
initializer returns a @samp{Rect} instance whose @samp{origin} and @samp{size}
properties are both initialized with the default values of
@samp{Point(x: 0.0, y: 0.0)} and @samp{Size(width: 0.0, height: 0.0)} from their
property definitions:

@example
let basicRect = Rect()
// basicRect's origin is (0.0, 0.0) and its size is (0.0, 0.0)
@end example

The second @samp{Rect} initializer, @samp{init(origin:size:)}, is functionally the
same as the memberwise initializer that the structure would have
received if it did not have its own custom initializers. This
initializer simply assigns the @samp{origin} and @samp{size} argument values to
the appropriate stored properties:

@example
let originRect = Rect(origin: Point(x: 2.0, y: 2.0),
                      size: Size(width: 5.0, height: 5.0))
// originRect's origin is (2.0, 2.0) and its size is (5.0, 5.0)
@end example

The third @samp{Rect} initializer, @samp{init(center:size:)}, is slightly more
complex. It starts by calculating an appropriate origin point based on a
@samp{center} point and a @samp{size} value. It then calls (or @emph{delegates}) to the
@samp{init(origin:size:)} initializer, which stores the new origin and size
values in the appropriate properties:

@example
let centerRect = Rect(center: Point(x: 4.0, y: 4.0), size: Size(width: 3.0, height: 3.0))
// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)
@end example

The @samp{init(center:size:)} initializer could have assigned the new values
of @samp{origin} and @samp{size} to the appropriate properties itself. However, it
is more convenient (and clearer in intent) for the @samp{init(center:size:)}
initializer to take advantage of an existing initializer that already
provides exactly that functionality.

Note

For an alternative way to write this example without defining the
@samp{init()} and @samp{init(origin:size:)} initializers yourself, see
@ref{Extensions}.

@node Class Inheritance and Initialization
@section Class Inheritance and Initialization

All of a class's stored properties---including any properties the class
inherits from its superclass---@emph{must} be assigned an initial value
during initialization.

Swift defines two kinds of initializers for class types to help ensure
all stored properties receive an initial value. These are known as
designated initializers and convenience initializers.

@menu
* Designated Initializers and Convenience Initializers::
* Syntax for Designated and Convenience Initializers::
* Initializer Delegation for Class Types::
* Two-Phase Initialization::
* Initializer Inheritance and Overriding::
* Automatic Initializer Inheritance::
* Designated and Convenience Initializers in Action::
@end menu

@node Designated Initializers and Convenience Initializers
@subsection Designated Initializers and Convenience Initializers

@emph{Designated initializers} are the primary initializers for a class. A
designated initializer fully initializes all properties introduced by
that class and calls an appropriate superclass initializer to continue
the initialization process up the superclass chain.

Classes tend to have very few designated initializers, and it is quite
common for a class to have only one. Designated initializers are
“funnel” points through which initialization takes place, and through
which the initialization process continues up the superclass chain.

Every class must have at least one designated initializer. In some
cases, this requirement is satisfied by inheriting one or more
designated initializers from a superclass, as described in
@ref{Automatic Initializer Inheritance}
below.

@emph{Convenience initializers} are secondary, supporting initializers for a
class. You can define a convenience initializer to call a designated
initializer from the same class as the convenience initializer with some
of the designated initializer's parameters set to default values. You
can also define a convenience initializer to create an instance of that
class for a specific use case or input value type.

You do not have to provide convenience initializers if your class does
not require them. Create convenience initializers whenever a shortcut to
a common initialization pattern will save time or make initialization of
the class clearer in intent.

@node Syntax for Designated and Convenience Initializers
@subsection Syntax for Designated and Convenience Initializers

Designated initializers for classes are written in the same way as
simple initializers for value types:

@example
init(parameters) @{
    statements
@}
@end example

Convenience initializers are written in the same style, but with the
@samp{convenience} modifier placed before the @samp{init} keyword, separated by a
space:

@example
convenience init(parameters) @{
    statements
@}
@end example

@node Initializer Delegation for Class Types
@subsection Initializer Delegation for Class Types

To simplify the relationships between designated and convenience
initializers, Swift applies the following three rules for delegation
calls between initializers:

@table @asis
@item @strong{Rule 1}
A designated initializer must call a designated
initializer from its immediate superclass.

@item @strong{Rule 2}
A convenience initializer must call another initializer
from the @emph{same} class.

@item @strong{Rule 3}
A convenience initializer must ultimately call a
designated initializer.
@end table

A simple way to remember this is:

@itemize
@item
Designated initializers must always delegate @emph{up}.

@item
Convenience initializers must always delegate @emph{across}.
@end itemize

These rules are illustrated in the figure below:

@image{_images/initializerDelegation01_2x,,,,png}
Here, the superclass has a single designated initializer and two
convenience initializers. One convenience initializer calls another
convenience initializer, which in turn calls the single designated
initializer. This satisfies rules 2 and 3 from above. The superclass
does not itself have a further superclass, and so rule 1 does not apply.

The subclass in this figure has two designated initializers and one
convenience initializer. The convenience initializer must call one of
the two designated initializers, because it can only call another
initializer from the same class. This satisfies rules 2 and 3 from
above. Both designated initializers must call the single designated
initializer from the superclass, to satisfy rule 1 from above.

Note

These rules don't affect how users of your classes @emph{create} instances of
each class. Any initializer in the diagram above can be used to create a
fully-initialized instance of the class they belong to. The rules only
affect how you write the implementation of the class's initializers.

The figure below shows a more complex class hierarchy for four classes.
It illustrates how the designated initializers in this hierarchy act as
“funnel” points for class initialization, simplifying the
interrelationships among classes in the chain:

@image{_images/initializerDelegation02_2x,,,,png}

@node Two-Phase Initialization
@subsection Two-Phase Initialization

Class initialization in Swift is a two-phase process. In the first
phase, each stored property is assigned an initial value by the class
that introduced it. Once the initial state for every stored property has
been determined, the second phase begins, and each class is given the
opportunity to customize its stored properties further before the new
instance is considered ready for use.

The use of a two-phase initialization process makes initialization safe,
while still giving complete flexibility to each class in a class
hierarchy. Two-phase initialization prevents property values from being
accessed before they are initialized, and prevents property values from
being set to a different value by another initializer unexpectedly.

Note

Swift's two-phase initialization process is similar to initialization in
Objective-C. The main difference is that during phase 1, Objective-C
assigns zero or null values (such as @samp{0} or @samp{nil}) to every property.
Swift's initialization flow is more flexible in that it lets you set
custom initial values, and can cope with types for which @samp{0} or @samp{nil} is
not a valid default value.

Swift's compiler performs four helpful safety-checks to make sure that
two-phase initialization is completed without error:

@table @asis
@item @strong{Safety check 1}
A designated initializer must ensure that all of
the properties introduced by its class are initialized before it
delegates up to a superclass initializer.
@end table

As mentioned above, the memory for an object is only considered fully
initialized once the initial state of all of its stored properties is
known. In order for this rule to be satisfied, a designated initializer
must make sure that all of its own properties are initialized before it
hands off up the chain.

@table @asis
@item @strong{Safety check 2}
A designated initializer must delegate up to a
superclass initializer before assigning a value to an inherited
property. If it doesn't, the new value the designated initializer
assigns will be overwritten by the superclass as part of its own
initialization.

@item @strong{Safety check 3}
A convenience initializer must delegate to another
initializer before assigning a value to @emph{any} property (including
properties defined by the same class). If it doesn't, the new value
the convenience initializer assigns will be overwritten by its own
class's designated initializer.

@item @strong{Safety check 4}
An initializer cannot call any instance methods,
read the values of any instance properties, or refer to @samp{self} as a
value until after the first phase of initialization is complete.
@end table

The class instance is not fully valid until the first phase ends.
Properties can only be accessed, and methods can only be called, once
the class instance is known to be valid at the end of the first phase.

Here's how two-phase initialization plays out, based on the four safety
checks above:

@strong{Phase 1}

@itemize
@item
A designated or convenience initializer is called on a class.

@item
Memory for a new instance of that class is allocated. The memory is
not yet initialized.

@item
A designated initializer for that class confirms that all stored
properties introduced by that class have a value. The memory for these
stored properties is now initialized.

@item
The designated initializer hands off to a superclass initializer to
perform the same task for its own stored properties.

@item
This continues up the class inheritance chain until the top of the
chain is reached.

@item
Once the top of the chain is reached, and the final class in the chain
has ensured that all of its stored properties have a value, the
instance's memory is considered to be fully initialized, and phase 1
is complete.
@end itemize

@strong{Phase 2}

@itemize
@item
Working back down from the top of the chain, each designated
initializer in the chain has the option to customize the instance
further. Initializers are now able to access @samp{self} and can modify its
properties, call its instance methods, and so on.

@item
Finally, any convenience initializers in the chain have the option to
customize the instance and to work with @samp{self}.
@end itemize

Here's how phase 1 looks for an initialization call for a hypothetical
subclass and superclass:

@image{_images/twoPhaseInitialization01_2x,,,,png}
In this example, initialization begins with a call to a convenience
initializer on the subclass. This convenience initializer cannot yet
modify any properties. It delegates across to a designated initializer
from the same class.

The designated initializer makes sure that all of the subclass's
properties have a value, as per safety check 1. It then calls a
designated initializer on its superclass to continue the initialization
up the chain.

The superclass's designated initializer makes sure that all of the
superclass properties have a value. There are no further superclasses to
initialize, and so no further delegation is needed.

As soon as all properties of the superclass have an initial value, its
memory is considered fully initialized, and phase 1 is complete.

Here's how phase 2 looks for the same initialization call:

@image{_images/twoPhaseInitialization02_2x,,,,png}
The superclass's designated initializer now has an opportunity to
customize the instance further (although it does not have to).

Once the superclass's designated initializer is finished, the subclass's
designated initializer can perform additional customization (although
again, it does not have to).

Finally, once the subclass's designated initializer is finished, the
convenience initializer that was originally called can perform
additional customization.

@node Initializer Inheritance and Overriding
@subsection Initializer Inheritance and Overriding

Unlike subclasses in Objective-C, Swift subclasses do not inherit their
superclass initializers by default. Swift's approach prevents a
situation in which a simple initializer from a superclass is inherited
by a more specialized subclass and is used to create a new instance of
the subclass that is not fully or correctly initialized.

Note

Superclass initializers @emph{are} inherited in certain circumstances, but
only when it is safe and appropriate to do so. For more information, see
@ref{Automatic Initializer Inheritance}
below.

If you want a custom subclass to present one or more of the same
initializers as its superclass, you can provide a custom implementation
of those initializers within the subclass.

When you write a subclass initializer that matches a superclass
@emph{designated} initializer, you are effectively providing an override of
that designated initializer. Therefore, you must write the @samp{override}
modifier before the subclass's initializer definition. This is true even
if you are overriding an automatically provided default initializer, as
described in @ref{Default Initializers}.

As with an overridden property, method or subscript, the presence of the
@samp{override} modifier prompts Swift to check that the superclass has a
matching designated initializer to be overridden, and validates that the
parameters for your overriding initializer have been specified as
intended.

Note

You always write the @samp{override} modifier when overriding a superclass
designated initializer, even if your subclass's implementation of the
initializer is a convenience initializer.

Conversely, if you write a subclass initializer that matches a
superclass @emph{convenience} initializer, that superclass convenience
initializer can never be called directly by your subclass, as per the
rules described above in @ref{Initializer Delegation for Class Types, , Initializer
Delegation for Class Types}. Therefore, your subclass is not (strictly
speaking) providing an override of the superclass initializer. As a
result, you do not write the @samp{override} modifier when providing a
matching implementation of a superclass convenience initializer.

The example below defines a base class called @samp{Vehicle}. This base class
declares a stored property called @samp{numberOfWheels}, with a default @samp{Int}
value of @samp{0}. The @samp{numberOfWheels} property is used by a computed
property called @samp{description} to create a @samp{String} description of the
vehicle's characteristics:

@example
class Vehicle @{
    var numberOfWheels = 0
    var description: String @{
        return "\(numberOfWheels) wheel(s)"
    @}
@}
@end example

The @samp{Vehicle} class provides a default value for its only stored
property, and does not provide any custom initializers itself. As a
result, it automatically receives a default initializer, as described in
@ref{Default Initializers}. The default
initializer (when available) is always a designated initializer for a
class, and can be used to create a new @samp{Vehicle} instance with a
@samp{numberOfWheels} of @samp{0}:

@example
let vehicle = Vehicle()
print("Vehicle: \(vehicle.description)")
// Vehicle: 0 wheel(s)
@end example

The next example defines a subclass of @samp{Vehicle} called @samp{Bicycle}:

@example
class Bicycle: Vehicle @{
    override init() @{
        super.init()
        numberOfWheels = 2
    @}
@}
@end example

The @samp{Bicycle} subclass defines a custom designated initializer,
@samp{init()}. This designated initializer matches a designated initializer
from the superclass of @samp{Bicycle}, and so the @samp{Bicycle} version of this
initializer is marked with the @samp{override} modifier.

The @samp{init()} initializer for @samp{Bicycle} starts by calling @samp{super.init()},
which calls the default initializer for the @samp{Bicycle} class's
superclass, @samp{Vehicle}. This ensures that the @samp{numberOfWheels} inherited
property is initialized by @samp{Vehicle} before @samp{Bicycle} has the
opportunity to modify the property. After calling @samp{super.init()}, the
original value of @samp{numberOfWheels} is replaced with a new value of @samp{2}.

If you create an instance of @samp{Bicycle}, you can call its inherited
@samp{description} computed property to see how its @samp{numberOfWheels} property
has been updated:

@example
let bicycle = Bicycle()
print("Bicycle: \(bicycle.description)")
// Bicycle: 2 wheel(s)
@end example

If a subclass initializer performs no customization in phase 2 of the
initialization process, and the superclass has a zero-argument
designated initializer, you can omit a call to @samp{super.init()} after
assigning values to all of the subclass's stored properties.

This example defines another subclass of @samp{Vehicle}, called @samp{Hoverboard}.
In its initializer, the @samp{Hoverboard} class sets only its @samp{color}
property. Instead of making an explicit call to @samp{super.init()}, this
initializer relies on an implicit call to its superclass's initializer
to complete the process.

@example
class Hoverboard: Vehicle @{
    var color: String
    init(color: String) @{
        self.color = color
        // super.init() implicitly called here
    @}
    override var description: String @{
        return "\(super.description) in a beautiful \(color)"
    @}
@}
@end example

An instance of @samp{Hoverboard} uses the default number of wheels supplied
by the @samp{Vehicle} initializer.

@example
let hoverboard = Hoverboard(color: "silver")
print("Hoverboard: \(hoverboard.description)")
// Hoverboard: 0 wheel(s) in a beautiful silver
@end example

Note

Subclasses can modify inherited variable properties during
initialization, but can not modify inherited constant properties.

@node Automatic Initializer Inheritance
@subsection Automatic Initializer Inheritance

As mentioned above, subclasses do not inherit their superclass
initializers by default. However, superclass initializers @emph{are}
automatically inherited if certain conditions are met. In practice, this
means that you do not need to write initializer overrides in many common
scenarios, and can inherit your superclass initializers with minimal
effort whenever it is safe to do so.

Assuming that you provide default values for any new properties you
introduce in a subclass, the following two rules apply:

@table @asis
@item @strong{Rule 1}
If your subclass doesn't define any designated
initializers, it automatically inherits all of its superclass
designated initializers.

@item @strong{Rule 2}
If your subclass provides an implementation of @emph{all} of
its superclass designated initializers---either by inheriting them as
per rule 1, or by providing a custom implementation as part of its
definition---then it automatically inherits all of the superclass
convenience initializers.
@end table

These rules apply even if your subclass adds further convenience
initializers.

Note

A subclass can implement a superclass designated initializer as a
subclass convenience initializer as part of satisfying rule 2.

@node Designated and Convenience Initializers in Action
@subsection Designated and Convenience Initializers in Action

The following example shows designated initializers, convenience
initializers, and automatic initializer inheritance in action. This
example defines a hierarchy of three classes called @samp{Food},
@samp{RecipeIngredient}, and @samp{ShoppingListItem}, and demonstrates how their
initializers interact.

The base class in the hierarchy is called @samp{Food}, which is a simple
class to encapsulate the name of a foodstuff. The @samp{Food} class
introduces a single @samp{String} property called @samp{name} and provides two
initializers for creating @samp{Food} instances:

@example
class Food @{
    var name: String
    init(name: String) @{
        self.name = name
    @}
    convenience init() @{
        self.init(name: "[Unnamed]")
    @}
@}
@end example

The figure below shows the initializer chain for the @samp{Food} class:

@image{_images/initializersExample01_2x,,,,png}
Classes do not have a default memberwise initializer, and so the @samp{Food}
class provides a designated initializer that takes a single argument
called @samp{name}. This initializer can be used to create a new @samp{Food}
instance with a specific name:

@example
let namedMeat = Food(name: "Bacon")
// namedMeat's name is "Bacon"
@end example

The @samp{init(name: String)} initializer from the @samp{Food} class is provided
as a @emph{designated} initializer, because it ensures that all stored
properties of a new @samp{Food} instance are fully initialized. The @samp{Food}
class does not have a superclass, and so the @samp{init(name: String)}
initializer does not need to call @samp{super.init()} to complete its
initialization.

The @samp{Food} class also provides a @emph{convenience} initializer, @samp{init()},
with no arguments. The @samp{init()} initializer provides a default
placeholder name for a new food by delegating across to the @samp{Food}
class's @samp{init(name: String)} with a @samp{name} value of @samp{[Unnamed]}:

@example
let mysteryMeat = Food()
// mysteryMeat's name is "[Unnamed]"
@end example

The second class in the hierarchy is a subclass of @samp{Food} called
@samp{RecipeIngredient}. The @samp{RecipeIngredient} class models an ingredient in
a cooking recipe. It introduces an @samp{Int} property called @samp{quantity} (in
addition to the @samp{name} property it inherits from @samp{Food}) and defines two
initializers for creating @samp{RecipeIngredient} instances:

@example
class RecipeIngredient: Food @{
    var quantity: Int
    init(name: String, quantity: Int) @{
        self.quantity = quantity
        super.init(name: name)
    @}
    override convenience init(name: String) @{
        self.init(name: name, quantity: 1)
    @}
@}
@end example

The figure below shows the initializer chain for the @samp{RecipeIngredient}
class:

@image{_images/initializersExample02_2x,,,,png}
The @samp{RecipeIngredient} class has a single designated initializer,
@samp{init(name: String, quantity: Int)}, which can be used to populate all
of the properties of a new @samp{RecipeIngredient} instance. This initializer
starts by assigning the passed @samp{quantity} argument to the @samp{quantity}
property, which is the only new property introduced by
@samp{RecipeIngredient}. After doing so, the initializer delegates up to the
@samp{init(name: String)} initializer of the @samp{Food} class. This process
satisfies safety check 1 from @ref{Two-Phase Initialization, , Two-Phase
Initialization} above.

@samp{RecipeIngredient} also defines a convenience initializer,
@samp{init(name: String)}, which is used to create a @samp{RecipeIngredient}
instance by name alone. This convenience initializer assumes a quantity
of @samp{1} for any @samp{RecipeIngredient} instance that is created without an
explicit quantity. The definition of this convenience initializer makes
@samp{RecipeIngredient} instances quicker and more convenient to create, and
avoids code duplication when creating several single-quantity
@samp{RecipeIngredient} instances. This convenience initializer simply
delegates across to the class's designated initializer, passing in a
@samp{quantity} value of @samp{1}.

The @samp{init(name: String)} convenience initializer provided by
@samp{RecipeIngredient} takes the same parameters as the @samp{init(name: String)}
@emph{designated} initializer from @samp{Food}. Because this convenience
initializer overrides a designated initializer from its superclass, it
must be marked with the @samp{override} modifier (as described in
@ref{Initializer Inheritance and Overriding, , Initializer Inheritance and
Overriding}).

Even though @samp{RecipeIngredient} provides the @samp{init(name: String)}
initializer as a convenience initializer, @samp{RecipeIngredient} has
nonetheless provided an implementation of all of its superclass's
designated initializers. Therefore, @samp{RecipeIngredient} automatically
inherits all of its superclass's convenience initializers too.

In this example, the superclass for @samp{RecipeIngredient} is @samp{Food}, which
has a single convenience initializer called @samp{init()}. This initializer
is therefore inherited by @samp{RecipeIngredient}. The inherited version of
@samp{init()} functions in exactly the same way as the @samp{Food} version, except
that it delegates to the @samp{RecipeIngredient} version of
@samp{init(name: String)} rather than the @samp{Food} version.

All three of these initializers can be used to create new
@samp{RecipeIngredient} instances:

@example
let oneMysteryItem = RecipeIngredient()
let oneBacon = RecipeIngredient(name: "Bacon")
let sixEggs = RecipeIngredient(name: "Eggs", quantity: 6)
@end example

The third and final class in the hierarchy is a subclass of
@samp{RecipeIngredient} called @samp{ShoppingListItem}. The @samp{ShoppingListItem}
class models a recipe ingredient as it appears in a shopping list.

Every item in the shopping list starts out as “unpurchased”. To
represent this fact, @samp{ShoppingListItem} introduces a Boolean property
called @samp{purchased}, with a default value of @samp{false}. @samp{ShoppingListItem}
also adds a computed @samp{description} property, which provides a textual
description of a @samp{ShoppingListItem} instance:

@example
class ShoppingListItem: RecipeIngredient @{
    var purchased = false
    var description: String @{
        var output = "\(quantity) x \(name)"
        output += purchased ? " ✔" : " ✘"
        return output
    @}
@}
@end example

Note

@samp{ShoppingListItem} does not define an initializer to provide an initial
value for @samp{purchased}, because items in a shopping list (as modeled
here) always start out unpurchased.

Because it provides a default value for all of the properties it
introduces and does not define any initializers itself,
@samp{ShoppingListItem} automatically inherits @emph{all} of the designated and
convenience initializers from its superclass.

The figure below shows the overall initializer chain for all three
classes:

@image{_images/initializersExample03_2x,,,,png}
You can use all three of the inherited initializers to create a new
@samp{ShoppingListItem} instance:

@example
var breakfastList = [
  ShoppingListItem(),
  ShoppingListItem(name: "Bacon"),
  ShoppingListItem(name: "Eggs", quantity: 6),
]
breakfastList[0].name = "Orange juice"
breakfastList[0].purchased = true
for item in breakfastList @{
    print(item.description)
@}
// 1 x Orange juice ✔
// 1 x Bacon ✘
// 6 x Eggs ✘
@end example

Here, a new array called @samp{breakfastList} is created from an array
literal containing three new @samp{ShoppingListItem} instances. The type of
the array is inferred to be @samp{[ShoppingListItem]}. After the array is
created, the name of the @samp{ShoppingListItem} at the start of the array is
changed from @samp{"[Unnamed]"} to @samp{"Orange juice"} and it is marked as
having been purchased. Printing the description of each item in the
array shows that their default states have been set as expected.

@node Failable Initializers
@section Failable Initializers

It is sometimes useful to define a class, structure, or enumeration for
which initialization can fail. This failure might be triggered by
invalid initialization parameter values, the absence of a required
external resource, or some other condition that prevents initialization
from succeeding.

To cope with initialization conditions that can fail, define one or more
failable initializers as part of a class, structure, or enumeration
definition. You write a failable initializer by placing a question mark
after the @samp{init} keyword (@samp{init?}).

Note

You cannot define a failable and a nonfailable initializer with the same
parameter types and names.

A failable initializer creates an @emph{optional} value of the type it
initializes. You write @samp{return nil} within a failable initializer to
indicate a point at which initialization failure can be triggered.

Note

Strictly speaking, initializers do not return a value. Rather, their
role is to ensure that @samp{self} is fully and correctly initialized by the
time that initialization ends. Although you write @samp{return nil} to
trigger an initialization failure, you do not use the @samp{return} keyword
to indicate initialization success.

For instance, failable initializers are implemented for numeric type
conversions. To ensure conversion between numeric types maintains the
value exactly, use the @samp{init(exactly:)} initializer. If the type
conversion cannot maintain the value, the initializer fails.

@example
let wholeNumber: Double = 12345.0
let pi = 3.14159

if let valueMaintained = Int(exactly: wholeNumber) @{
    print("\(wholeNumber) conversion to Int maintains value of \(valueMaintained)")
@}
// Prints "12345.0 conversion to Int maintains value of 12345"

let valueChanged = Int(exactly: pi)
// valueChanged is of type Int?, not Int

if valueChanged == nil @{
    print("\(pi) conversion to Int does not maintain value")
@}
// Prints "3.14159 conversion to Int does not maintain value"
@end example

The example below defines a structure called @samp{Animal}, with a constant
@samp{String} property called @samp{species}. The @samp{Animal} structure also defines
a failable initializer with a single parameter called @samp{species}. This
initializer checks if the @samp{species} value passed to the initializer is
an empty string. If an empty string is found, an initialization failure
is triggered. Otherwise, the @samp{species} property's value is set, and
initialization succeeds:

@example
struct Animal @{
    let species: String
    init?(species: String) @{
        if species.isEmpty @{ return nil @}
        self.species = species
    @}
@}
@end example

You can use this failable initializer to try to initialize a new
@samp{Animal} instance and to check if initialization succeeded:

@example
let someCreature = Animal(species: "Giraffe")
// someCreature is of type Animal?, not Animal

if let giraffe = someCreature @{
    print("An animal was initialized with a species of \(giraffe.species)")
@}
// Prints "An animal was initialized with a species of Giraffe"
@end example

If you pass an empty string value to the failable initializer's
@samp{species} parameter, the initializer triggers an initialization failure:

@example
let anonymousCreature = Animal(species: "")
// anonymousCreature is of type Animal?, not Animal

if anonymousCreature == nil @{
    print("The anonymous creature could not be initialized")
@}
// Prints "The anonymous creature could not be initialized"
@end example

Note

Checking for an empty string value (such as @samp{""} rather than
@samp{"Giraffe"}) is not the same as checking for @samp{nil} to indicate the
absence of an @emph{optional} @samp{String} value. In the example above, an empty
string (@samp{""}) is a valid, non-optional @samp{String}. However, it is not
appropriate for an animal to have an empty string as the value of its
@samp{species} property. To model this restriction, the failable initializer
triggers an initialization failure if an empty string is found.

@menu
* Failable Initializers for Enumerations::
* Failable Initializers for Enumerations with Raw Values::
* Propagation of Initialization Failure::
* Overriding a Failable Initializer::
* The init! Failable Initializer::
@end menu

@node Failable Initializers for Enumerations
@subsection Failable Initializers for Enumerations

You can use a failable initializer to select an appropriate enumeration
case based on one or more parameters. The initializer can then fail if
the provided parameters do not match an appropriate enumeration case.

The example below defines an enumeration called @samp{TemperatureUnit}, with
three possible states (@samp{kelvin}, @samp{celsius}, and @samp{fahrenheit}). A
failable initializer is used to find an appropriate enumeration case for
a @samp{Character} value representing a temperature symbol:

@example
enum TemperatureUnit @{
    case kelvin, celsius, fahrenheit
    init?(symbol: Character) @{
        switch symbol @{
        case "K":
            self = .kelvin
        case "C":
            self = .celsius
        case "F":
            self = .fahrenheit
        default:
            return nil
        @}
    @}
@}
@end example

You can use this failable initializer to choose an appropriate
enumeration case for the three possible states and to cause
initialization to fail if the parameter does not match one of these
states:

@example
let fahrenheitUnit = TemperatureUnit(symbol: "F")
if fahrenheitUnit != nil @{
    print("This is a defined temperature unit, so initialization succeeded.")
@}
// Prints "This is a defined temperature unit, so initialization succeeded."

let unknownUnit = TemperatureUnit(symbol: "X")
if unknownUnit == nil @{
    print("This is not a defined temperature unit, so initialization failed.")
@}
// Prints "This is not a defined temperature unit, so initialization failed."
@end example

@node Failable Initializers for Enumerations with Raw Values
@subsection Failable Initializers for Enumerations with Raw Values

Enumerations with raw values automatically receive a failable
initializer, @samp{init?(rawValue:)}, that takes a parameter called
@samp{rawValue} of the appropriate raw-value type and selects a matching
enumeration case if one is found, or triggers an initialization failure
if no matching value exists.

You can rewrite the @samp{TemperatureUnit} example from above to use raw
values of type @samp{Character} and to take advantage of the
@samp{init?(rawValue:)} initializer:

@example
enum TemperatureUnit: Character @{
    case kelvin = "K", celsius = "C", fahrenheit = "F"
@}

let fahrenheitUnit = TemperatureUnit(rawValue: "F")
if fahrenheitUnit != nil @{
    print("This is a defined temperature unit, so initialization succeeded.")
@}
// Prints "This is a defined temperature unit, so initialization succeeded."

let unknownUnit = TemperatureUnit(rawValue: "X")
if unknownUnit == nil @{
    print("This is not a defined temperature unit, so initialization failed.")
@}
// Prints "This is not a defined temperature unit, so initialization failed."
@end example

@node Propagation of Initialization Failure
@subsection Propagation of Initialization Failure

A failable initializer of a class, structure, or enumeration can
delegate across to another failable initializer from the same class,
structure, or enumeration. Similarly, a subclass failable initializer
can delegate up to a superclass failable initializer.

In either case, if you delegate to another initializer that causes
initialization to fail, the entire initialization process fails
immediately, and no further initialization code is executed.

Note

A failable initializer can also delegate to a nonfailable initializer.
Use this approach if you need to add a potential failure state to an
existing initialization process that does not otherwise fail.

The example below defines a subclass of @samp{Product} called @samp{CartItem}. The
@samp{CartItem} class models an item in an online shopping cart. @samp{CartItem}
introduces a stored constant property called @samp{quantity} and ensures that
this property always has a value of at least @samp{1}:

@example
class Product @{
    let name: String
    init?(name: String) @{
        if name.isEmpty @{ return nil @}
        self.name = name
    @}
@}

class CartItem: Product @{
    let quantity: Int
    init?(name: String, quantity: Int) @{
        if quantity < 1 @{ return nil @}
        self.quantity = quantity
        super.init(name: name)
    @}
@}
@end example

The failable initializer for @samp{CartItem} starts by validating that it has
received a @samp{quantity} value of @samp{1} or more. If the @samp{quantity} is
invalid, the entire initialization process fails immediately and no
further initialization code is executed. Likewise, the failable
initializer for @samp{Product} checks the @samp{name} value, and the initializer
process fails immediately if @samp{name} is the empty string.

If you create a @samp{CartItem} instance with a nonempty name and a quantity
of @samp{1} or more, initialization succeeds:

@example
if let twoSocks = CartItem(name: "sock", quantity: 2) @{
    print("Item: \(twoSocks.name), quantity: \(twoSocks.quantity)")
@}
// Prints "Item: sock, quantity: 2"
@end example

If you try to create a @samp{CartItem} instance with a @samp{quantity} value of
@samp{0}, the @samp{CartItem} initializer causes initialization to fail:

@example
if let zeroShirts = CartItem(name: "shirt", quantity: 0) @{
    print("Item: \(zeroShirts.name), quantity: \(zeroShirts.quantity)")
@} else @{
    print("Unable to initialize zero shirts")
@}
// Prints "Unable to initialize zero shirts"
@end example

Similarly, if you try to create a @samp{CartItem} instance with an empty
@samp{name} value, the superclass @samp{Product} initializer causes initialization
to fail:

@example
if let oneUnnamed = CartItem(name: "", quantity: 1) @{
    print("Item: \(oneUnnamed.name), quantity: \(oneUnnamed.quantity)")
@} else @{
    print("Unable to initialize one unnamed product")
@}
// Prints "Unable to initialize one unnamed product"
@end example

@node Overriding a Failable Initializer
@subsection Overriding a Failable Initializer

You can override a superclass failable initializer in a subclass, just
like any other initializer. Alternatively, you can override a superclass
failable initializer with a subclass @emph{nonfailable} initializer. This
enables you to define a subclass for which initialization cannot fail,
even though initialization of the superclass is allowed to fail.

Note that if you override a failable superclass initializer with a
nonfailable subclass initializer, the only way to delegate up to the
superclass initializer is to force-unwrap the result of the failable
superclass initializer.

Note

You can override a failable initializer with a nonfailable initializer
but not the other way around.

The example below defines a class called @samp{Document}. This class models a
document that can be initialized with a @samp{name} property that is either a
nonempty string value or @samp{nil}, but cannot be an empty string:

@example
class Document @{
    var name: String?
    // this initializer creates a document with a nil name value
    init() @{@}
    // this initializer creates a document with a nonempty name value
    init?(name: String) @{
        if name.isEmpty @{ return nil @}
        self.name = name
    @}
@}
@end example

The next example defines a subclass of @samp{Document} called
@samp{AutomaticallyNamedDocument}. The @samp{AutomaticallyNamedDocument} subclass
overrides both of the designated initializers introduced by @samp{Document}.
These overrides ensure that an @samp{AutomaticallyNamedDocument} instance has
an initial @samp{name} value of @samp{"[Untitled]"} if the instance is initialized
without a name, or if an empty string is passed to the @samp{init(name:)}
initializer:

@example
class AutomaticallyNamedDocument: Document @{
    override init() @{
        super.init()
        self.name = "[Untitled]"
    @}
    override init(name: String) @{
        super.init()
        if name.isEmpty @{
            self.name = "[Untitled]"
        @} else @{
            self.name = name
        @}
    @}
@}
@end example

The @samp{AutomaticallyNamedDocument} overrides its superclass's failable
@samp{init?(name:)} initializer with a nonfailable @samp{init(name:)} initializer.
Because @samp{AutomaticallyNamedDocument} copes with the empty string case in
a different way than its superclass, its initializer does not need to
fail, and so it provides a nonfailable version of the initializer
instead.

You can use forced unwrapping in an initializer to call a failable
initializer from the superclass as part of the implementation of a
subclass's nonfailable initializer. For example, the @samp{UntitledDocument}
subclass below is always named @samp{"[Untitled]"}, and it uses the failable
@samp{init(name:)} initializer from its superclass during initialization.

@example
class UntitledDocument: Document @{
    override init() @{
        super.init(name: "[Untitled]")!
    @}
@}
@end example

In this case, if the @samp{init(name:)} initializer of the superclass were
ever called with an empty string as the name, the forced unwrapping
operation would result in a runtime error. However, because it's called
with a string constant, you can see that the initializer won't fail, so
no runtime error can occur in this case.

@node The init! Failable Initializer
@subsection The init! Failable Initializer

You typically define a failable initializer that creates an optional
instance of the appropriate type by placing a question mark after the
@samp{init} keyword (@samp{init?}). Alternatively, you can define a failable
initializer that creates an implicitly unwrapped optional instance of
the appropriate type. Do this by placing an exclamation mark after the
@samp{init} keyword (@samp{init!}) instead of a question mark.

You can delegate from @samp{init?} to @samp{init!} and vice versa, and you can
override @samp{init?} with @samp{init!} and vice versa. You can also delegate from
@samp{init} to @samp{init!}, although doing so will trigger an assertion if the
@samp{init!} initializer causes initialization to fail.

@node Required Initializers
@section Required Initializers

@findex required
Write the @samp{required} modifier before the definition of a class
initializer to indicate that every subclass of the class must implement
that initializer:

@example
class SomeClass @{
    required init() @{
        // initializer implementation goes here
    @}
@}
@end example

You must also write the @samp{required} modifier before every subclass
implementation of a required initializer, to indicate that the
initializer requirement applies to further subclasses in the chain. You
do not write the @samp{override} modifier when overriding a required
designated initializer:

@example
class SomeSubclass: SomeClass @{
    required init() @{
        // subclass implementation of the required initializer goes here
    @}
@}
@end example

Note

You do not have to provide an explicit implementation of a required
initializer if you can satisfy the requirement with an inherited
initializer.

@node Setting a Default Property Value with a Closure or Function
@section Setting a Default Property Value with a Closure or Function

If a stored property's default value requires some customization or
setup, you can use a closure or global function to provide a customized
default value for that property. Whenever a new instance of the type
that the property belongs to is initialized, the closure or function is
called, and its return value is assigned as the property's default
value.

These kinds of closures or functions typically create a temporary value
of the same type as the property, tailor that value to represent the
desired initial state, and then return that temporary value to be used
as the property's default value.

Here's a skeleton outline of how a closure can be used to provide a
default property value:

@example
class SomeClass @{
    let someProperty: SomeType = @{
        // create a default value for someProperty inside this closure
        // someValue must be of the same type as SomeType
        return someValue
    @}()
@}
@end example

Note that the closure's end curly brace is followed by an empty pair of
parentheses. This tells Swift to execute the closure immediately. If you
omit these parentheses, you are trying to assign the closure itself to
the property, and not the return value of the closure.

Note

If you use a closure to initialize a property, remember that the rest of
the instance has not yet been initialized at the point that the closure
is executed. This means that you cannot access any other property values
from within your closure, even if those properties have default values.
You also cannot use the implicit @samp{self} property, or call any of the
instance's methods.

The example below defines a structure called @samp{Chessboard}, which models
a board for the game of chess. Chess is played on an 8 x 8 board, with
alternating black and white squares.

@image{_images/chessBoard_2x,,,,png}
To represent this game board, the @samp{Chessboard} structure has a single
property called @samp{boardColors}, which is an array of 64 @samp{Bool} values. A
value of @samp{true} in the array represents a black square and a value of
@samp{false} represents a white square. The first item in the array
represents the top left square on the board and the last item in the
array represents the bottom right square on the board.

The @samp{boardColors} array is initialized with a closure to set up its
color values:

@example
struct Chessboard @{
    let boardColors: [Bool] = @{
        var temporaryBoard = [Bool]()
        var isBlack = false
        for i in 1...8 @{
            for j in 1...8 @{
                temporaryBoard.append(isBlack)
                isBlack = !isBlack
            @}
            isBlack = !isBlack
        @}
        return temporaryBoard
    @}()
    func squareIsBlackAt(row: Int, column: Int) -> Bool @{
        return boardColors[(row * 8) + column]
    @}
@}
@end example

Whenever a new @samp{Chessboard} instance is created, the closure is
executed, and the default value of @samp{boardColors} is calculated and
returned. The closure in the example above calculates and sets the
appropriate color for each square on the board in a temporary array
called @samp{temporaryBoard}, and returns this temporary array as the
closure's return value once its setup is complete. The returned array
value is stored in @samp{boardColors} and can be queried with the
@samp{squareIsBlackAt(row:column:)} utility function:

@example
let board = Chessboard()
print(board.squareIsBlackAt(row: 0, column: 1))
// Prints "true"
print(board.squareIsBlackAt(row: 7, column: 7))
// Prints "false"
@end example

@node Deinitialization
@chapter Deinitialization

@findex deinit
A @emph{deinitializer} is called immediately before a class instance is
deallocated. You write deinitializers with the @samp{deinit} keyword, similar
to how initializers are written with the @samp{init} keyword. Deinitializers
are only available on class types.

@menu
* How Deinitialization Works::
* Deinitializers in Action::
@end menu

@node How Deinitialization Works
@section How Deinitialization Works

Swift automatically deallocates your instances when they are no longer
needed, to free up resources. Swift handles the memory management of
instances through @emph{automatic reference counting} (@emph{ARC}), as described
in @ref{Automatic Reference Counting}.
Typically you don't need to perform manual cleanup when your instances
are deallocated. However, when you are working with your own resources,
you might need to perform some additional cleanup yourself. For example,
if you create a custom class to open a file and write some data to it,
you might need to close the file before the class instance is
deallocated.

Class definitions can have at most one deinitializer per class. The
deinitializer does not take any parameters and is written without
parentheses:

@example
deinit @{
 // perform the deinitialization
@}
@end example


Deinitializers are called automatically, just before instance
deallocation takes place. You are not allowed to call a deinitializer
yourself. Superclass deinitializers are inherited by their subclasses,
and the superclass deinitializer is called automatically at the end of a
subclass deinitializer implementation. Superclass deinitializers are
always called, even if a subclass does not provide its own
deinitializer.

Because an instance is not deallocated until after its deinitializer is
called, a deinitializer can access all properties of the instance it is
called on and can modify its behavior based on those properties (such as
looking up the name of a file that needs to be closed).

@node Deinitializers in Action
@section Deinitializers in Action

Here's an example of a deinitializer in action. This example defines two
new types, @samp{Bank} and @samp{Player}, for a simple game. The @samp{Bank} class
manages a made-up currency, which can never have more than 10,000 coins
in circulation. There can only ever be one @samp{Bank} in the game, and so
the @samp{Bank} is implemented as a class with type properties and methods to
store and manage its current state:

@example
class Bank @{
    static var coinsInBank = 10_000
    static func distribute(coins numberOfCoinsRequested: Int) -> Int @{
        let numberOfCoinsToVend = min(numberOfCoinsRequested, coinsInBank)
        coinsInBank -= numberOfCoinsToVend
        return numberOfCoinsToVend
    @}
    static func receive(coins: Int) @{
        coinsInBank += coins
    @}
@}
@end example

@samp{Bank} keeps track of the current number of coins it holds with its
@samp{coinsInBank} property. It also offers two
methods---@samp{distribute(coins:)} and @samp{receive(coins:)}---to handle the
distribution and collection of coins.

The @samp{distribute(coins:)} method checks that there are enough coins in
the bank before distributing them. If there are not enough coins, @samp{Bank}
returns a smaller number than the number that was requested (and returns
zero if no coins are left in the bank). It returns an integer value to
indicate the actual number of coins that were provided.

The @samp{receive(coins:)} method simply adds the received number of coins
back into the bank's coin store.

The @samp{Player} class describes a player in the game. Each player has a
certain number of coins stored in their purse at any time. This is
represented by the player's @samp{coinsInPurse} property:

@example
class Player @{
    var coinsInPurse: Int
    init(coins: Int) @{
        coinsInPurse = Bank.distribute(coins: coins)
    @}
    func win(coins: Int) @{
        coinsInPurse += Bank.distribute(coins: coins)
    @}
    deinit @{
        Bank.receive(coins: coinsInPurse)
    @}
@}
@end example

Each @samp{Player} instance is initialized with a starting allowance of a
specified number of coins from the bank during initialization, although
a @samp{Player} instance may receive fewer than that number if not enough
coins are available.

The @samp{Player} class defines a @samp{win(coins:)} method, which retrieves a
certain number of coins from the bank and adds them to the player's
purse. The @samp{Player} class also implements a deinitializer, which is
called just before a @samp{Player} instance is deallocated. Here, the
deinitializer simply returns all of the player's coins to the bank:

@example
var playerOne: Player? = Player(coins: 100)
print("A new player has joined the game with \(playerOne!.coinsInPurse) coins")
// Prints "A new player has joined the game with 100 coins"
print("There are now \(Bank.coinsInBank) coins left in the bank")
// Prints "There are now 9900 coins left in the bank"
@end example

A new @samp{Player} instance is created, with a request for 100 coins if they
are available. This @samp{Player} instance is stored in an optional @samp{Player}
variable called @samp{playerOne}. An optional variable is used here, because
players can leave the game at any point. The optional lets you track
whether there is currently a player in the game.

Because @samp{playerOne} is an optional, it is qualified with an exclamation
mark (@samp{!}) when its @samp{coinsInPurse} property is accessed to print its
default number of coins, and whenever its @samp{win(coins:)} method is
called:

@example
playerOne!.win(coins: 2_000)
print("PlayerOne won 2000 coins & now has \(playerOne!.coinsInPurse) coins")
// Prints "PlayerOne won 2000 coins & now has 2100 coins"
print("The bank now only has \(Bank.coinsInBank) coins left")
// Prints "The bank now only has 7900 coins left"
@end example

Here, the player has won 2,000 coins. The player's purse now contains
2,100 coins, and the bank has only 7,900 coins left.

@example
playerOne = nil
print("PlayerOne has left the game")
// Prints "PlayerOne has left the game"
print("The bank now has \(Bank.coinsInBank) coins")
// Prints "The bank now has 10000 coins"
@end example

The player has now left the game. This is indicated by setting the
optional @samp{playerOne} variable to @samp{nil}, meaning “no @samp{Player} instance.”
At the point that this happens, the @samp{playerOne} variable's reference to
the @samp{Player} instance is broken. No other properties or variables are
still referring to the @samp{Player} instance, and so it is deallocated in
order to free up its memory. Just before this happens, its deinitializer
is called automatically, and its coins are returned to the bank.

@node Optional Chaining
@chapter Optional Chaining

@emph{Optional chaining} is a process for querying and calling properties,
methods, and subscripts on an optional that might currently be @samp{nil}. If
the optional contains a value, the property, method, or subscript call
succeeds; if the optional is @samp{nil}, the property, method, or subscript
call returns @samp{nil}. Multiple queries can be chained together, and the
entire chain fails gracefully if any link in the chain is @samp{nil}.

Note

Optional chaining in Swift is similar to messaging @samp{nil} in Objective-C,
but in a way that works for any type, and that can be checked for
success or failure.

@menu
* Optional Chaining as an Alternative to Forced Unwrapping::
* Defining Model Classes for Optional Chaining::
* Accessing Properties Through Optional Chaining::
* Calling Methods Through Optional Chaining::
* Accessing Subscripts Through Optional Chaining::
* Linking Multiple Levels of Chaining::
* Chaining on Methods with Optional Return Values::
@end menu

@node Optional Chaining as an Alternative to Forced Unwrapping
@section Optional Chaining as an Alternative to Forced Unwrapping

You specify optional chaining by placing a question mark (@samp{?}) after the
optional value on which you wish to call a property, method or subscript
if the optional is non-@samp{nil}. This is very similar to placing an
exclamation mark (@samp{!}) after an optional value to force the unwrapping
of its value. The main difference is that optional chaining fails
gracefully when the optional is @samp{nil}, whereas forced unwrapping
triggers a runtime error when the optional is @samp{nil}.

To reflect the fact that optional chaining can be called on a @samp{nil}
value, the result of an optional chaining call is always an optional
value, even if the property, method, or subscript you are querying
returns a non-optional value. You can use this optional return value to
check whether the optional chaining call was successful (the returned
optional contains a value), or did not succeed due to a @samp{nil} value in
the chain (the returned optional value is @samp{nil}).

Specifically, the result of an optional chaining call is of the same
type as the expected return value, but wrapped in an optional. A
property that normally returns an @samp{Int} will return an @samp{Int?} when
accessed through optional chaining.

The next several code snippets demonstrate how optional chaining differs
from forced unwrapping and enables you to check for success.

First, two classes called @samp{Person} and @samp{Residence} are defined:

@example
class Person @{
    var residence: Residence?
@}

class Residence @{
    var numberOfRooms = 1
@}
@end example

@samp{Residence} instances have a single @samp{Int} property called
@samp{numberOfRooms}, with a default value of @samp{1}. @samp{Person} instances have an
optional @samp{residence} property of type @samp{Residence?}.

If you create a new @samp{Person} instance, its @samp{residence} property is
default initialized to @samp{nil}, by virtue of being optional. In the code
below, @samp{john} has a @samp{residence} property value of @samp{nil}:

@example
let john = Person()
@end example

If you try to access the @samp{numberOfRooms} property of this person's
@samp{residence}, by placing an exclamation mark after @samp{residence} to force
the unwrapping of its value, you trigger a runtime error, because there
is no @samp{residence} value to unwrap:

@example
let roomCount = john.residence!.numberOfRooms
// this triggers a runtime error
@end example

The code above succeeds when @samp{john.residence} has a non-@samp{nil} value and
will set @samp{roomCount} to an @samp{Int} value containing the appropriate number
of rooms. However, this code always triggers a runtime error when
@samp{residence} is @samp{nil}, as illustrated above.

Optional chaining provides an alternative way to access the value of
@samp{numberOfRooms}. To use optional chaining, use a question mark in place
of the exclamation mark:

@example
if let roomCount = john.residence?.numberOfRooms @{
    print("John's residence has \(roomCount) room(s).")
@} else @{
    print("Unable to retrieve the number of rooms.")
@}
// Prints "Unable to retrieve the number of rooms."
@end example

This tells Swift to “chain” on the optional @samp{residence} property and to
retrieve the value of @samp{numberOfRooms} if @samp{residence} exists.

Because the attempt to access @samp{numberOfRooms} has the potential to fail,
the optional chaining attempt returns a value of type @samp{Int?}, or
“optional @samp{Int=”. When =residence} is @samp{nil}, as in the example above,
this optional @samp{Int} will also be @samp{nil}, to reflect the fact that it was
not possible to access @samp{numberOfRooms}. The optional @samp{Int} is accessed
through optional binding to unwrap the integer and assign the
non-optional value to the @samp{roomCount} variable.

Note that this is true even though @samp{numberOfRooms} is a non-optional
@samp{Int}. The fact that it is queried through an optional chain means that
the call to @samp{numberOfRooms} will always return an @samp{Int?} instead of an
@samp{Int}.

You can assign a @samp{Residence} instance to @samp{john.residence}, so that it no
longer has a @samp{nil} value:

@example
john.residence = Residence()
@end example

@samp{john.residence} now contains an actual @samp{Residence} instance, rather
than @samp{nil}. If you try to access @samp{numberOfRooms} with the same optional
chaining as before, it will now return an @samp{Int?} that contains the
default @samp{numberOfRooms} value of @samp{1}:

@example
if let roomCount = john.residence?.numberOfRooms @{
    print("John's residence has \(roomCount) room(s).")
@} else @{
    print("Unable to retrieve the number of rooms.")
@}
// Prints "John's residence has 1 room(s)."
@end example

@node Defining Model Classes for Optional Chaining
@section Defining Model Classes for Optional Chaining

You can use optional chaining with calls to properties, methods, and
subscripts that are more than one level deep. This enables you to drill
down into subproperties within complex models of interrelated types, and
to check whether it is possible to access properties, methods, and
subscripts on those subproperties.

The code snippets below define four model classes for use in several
subsequent examples, including examples of multilevel optional chaining.
These classes expand upon the @samp{Person} and @samp{Residence} model from above
by adding a @samp{Room} and @samp{Address} class, with associated properties,
methods, and subscripts.

The @samp{Person} class is defined in the same way as before:

@example
class Person @{
    var residence: Residence?
@}
@end example

The @samp{Residence} class is more complex than before. This time, the
@samp{Residence} class defines a variable property called @samp{rooms}, which is
initialized with an empty array of type @samp{[Room]}:

@example
class Residence @{
    var rooms = [Room]()
    var numberOfRooms: Int @{
        return rooms.count
    @}
    subscript(i: Int) -> Room @{
        get @{
            return rooms[i]
        @}
        set @{
            rooms[i] = newValue
        @}
    @}
    func printNumberOfRooms() @{
        print("The number of rooms is \(numberOfRooms)")
    @}
    var address: Address?
@}
@end example

Because this version of @samp{Residence} stores an array of @samp{Room} instances,
its @samp{numberOfRooms} property is implemented as a computed property, not
a stored property. The computed @samp{numberOfRooms} property simply returns
the value of the @samp{count} property from the @samp{rooms} array.

As a shortcut to accessing its @samp{rooms} array, this version of
@samp{Residence} provides a read-write subscript that provides access to the
room at the requested index in the @samp{rooms} array.

This version of @samp{Residence} also provides a method called
@samp{printNumberOfRooms}, which simply prints the number of rooms in the
residence.

Finally, @samp{Residence} defines an optional property called @samp{address}, with
a type of @samp{Address?}. The @samp{Address} class type for this property is
defined below.

The @samp{Room} class used for the @samp{rooms} array is a simple class with one
property called @samp{name}, and an initializer to set that property to a
suitable room name:

@example
class Room @{
    let name: String
    init(name: String) @{ self.name = name @}
@}
@end example

The final class in this model is called @samp{Address}. This class has three
optional properties of type @samp{String?}. The first two properties,
@samp{buildingName} and @samp{buildingNumber}, are alternative ways to identify a
particular building as part of an address. The third property, @samp{street},
is used to name the street for that address:

@example
class Address @{
    var buildingName: String?
    var buildingNumber: String?
    var street: String?
    func buildingIdentifier() -> String? @{
        if let buildingNumber = buildingNumber, let street = street @{
            return "\(buildingNumber) \(street)"
        @} else if buildingName != nil @{
            return buildingName
        @} else @{
            return nil
        @}
    @}
@}
@end example

The @samp{Address} class also provides a method called
@samp{buildingIdentifier()}, which has a return type of @samp{String?}. This
method checks the properties of the address and returns @samp{buildingName}
if it has a value, or @samp{buildingNumber} concatenated with @samp{street} if
both have values, or @samp{nil} otherwise.

@node Accessing Properties Through Optional Chaining
@section Accessing Properties Through Optional Chaining

As demonstrated in @ref{Optional Chaining as an Alternative to Forced Unwrapping, , Optional Chaining as
an Alternative to Forced Unwrapping}, you can use optional chaining to
access a property on an optional value, and to check if that property
access is successful.

Use the classes defined above to create a new @samp{Person} instance, and try
to access its @samp{numberOfRooms} property as before:

@example
let john = Person()
if let roomCount = john.residence?.numberOfRooms @{
    print("John's residence has \(roomCount) room(s).")
@} else @{
    print("Unable to retrieve the number of rooms.")
@}
// Prints "Unable to retrieve the number of rooms."
@end example

Because @samp{john.residence} is @samp{nil}, this optional chaining call fails in
the same way as before.

You can also attempt to set a property's value through optional
chaining:

@example
let someAddress = Address()
someAddress.buildingNumber = "29"
someAddress.street = "Acacia Road"
john.residence?.address = someAddress
@end example

In this example, the attempt to set the @samp{address} property of
@samp{john.residence} will fail, because @samp{john.residence} is currently @samp{nil}.

The assignment is part of the optional chaining, which means none of the
code on the right-hand side of the @samp{=} operator is evaluated. In the
previous example, it's not easy to see that @samp{someAddress} is never
evaluated, because accessing a constant doesn't have any side effects.
The listing below does the same assignment, but it uses a function to
create the address. The function prints “Function was called” before
returning a value, which lets you see whether the right-hand side of the
@samp{=} operator was evaluated.

@example
func createAddress() -> Address @{
    print("Function was called.")

    let someAddress = Address()
    someAddress.buildingNumber = "29"
    someAddress.street = "Acacia Road"

    return someAddress
@}
john.residence?.address = createAddress()
@end example

You can tell that the @samp{createAddress()} function isn't called, because
nothing is printed.

@node Calling Methods Through Optional Chaining
@section Calling Methods Through Optional Chaining

You can use optional chaining to call a method on an optional value, and
to check whether that method call is successful. You can do this even if
that method does not define a return value.

The @samp{printNumberOfRooms()} method on the @samp{Residence} class prints the
current value of @samp{numberOfRooms}. Here's how the method looks:

@example
func printNumberOfRooms() @{
    print("The number of rooms is \(numberOfRooms)")
@}
@end example

This method does not specify a return type. However, functions and
methods with no return type have an implicit return type of @samp{Void}, as
described in @ref{Functions Without Return Values, , Functions Without Return
Values}. This means that they return a value of @samp{()}, or an empty
tuple.

If you call this method on an optional value with optional chaining, the
method's return type will be @samp{Void?}, not @samp{Void}, because return values
are always of an optional type when called through optional chaining.
This enables you to use an @samp{if} statement to check whether it was
possible to call the @samp{printNumberOfRooms()} method, even though the
method does not itself define a return value. Compare the return value
from the @samp{printNumberOfRooms} call against @samp{nil} to see if the method
call was successful:

@example
if john.residence?.printNumberOfRooms() != nil @{
    print("It was possible to print the number of rooms.")
@} else @{
    print("It was not possible to print the number of rooms.")
@}
// Prints "It was not possible to print the number of rooms."
@end example

The same is true if you attempt to set a property through optional
chaining. The example above in
@ref{Accessing Properties Through Optional Chaining, , Accessing Properties Through Optional
Chaining} attempts to set an @samp{address} value for @samp{john.residence}, even
though the @samp{residence} property is @samp{nil}. Any attempt to set a property
through optional chaining returns a value of type @samp{Void?}, which enables
you to compare against @samp{nil} to see if the property was set
successfully:

@example
if (john.residence?.address = someAddress) != nil @{
    print("It was possible to set the address.")
@} else @{
    print("It was not possible to set the address.")
@}
// Prints "It was not possible to set the address."
@end example

@node Accessing Subscripts Through Optional Chaining
@section Accessing Subscripts Through Optional Chaining

You can use optional chaining to try to retrieve and set a value from a
subscript on an optional value, and to check whether that subscript call
is successful.

Note

When you access a subscript on an optional value through optional
chaining, you place the question mark @emph{before} the subscript's brackets,
not after. The optional chaining question mark always follows
immediately after the part of the expression that is optional.

The example below tries to retrieve the name of the first room in the
@samp{rooms} array of the @samp{john.residence} property using the subscript
defined on the @samp{Residence} class. Because @samp{john.residence} is currently
@samp{nil}, the subscript call fails:

@example
if let firstRoomName = john.residence?[0].name @{
    print("The first room name is \(firstRoomName).")
@} else @{
    print("Unable to retrieve the first room name.")
@}
// Prints "Unable to retrieve the first room name."
@end example

The optional chaining question mark in this subscript call is placed
immediately after @samp{john.residence}, before the subscript brackets,
because @samp{john.residence} is the optional value on which optional
chaining is being attempted.

Similarly, you can try to set a new value through a subscript with
optional chaining:

@example
john.residence?[0] = Room(name: "Bathroom")
@end example

This subscript setting attempt also fails, because @samp{residence} is
currently @samp{nil}.

If you create and assign an actual @samp{Residence} instance to
@samp{john.residence}, with one or more @samp{Room} instances in its @samp{rooms}
array, you can use the @samp{Residence} subscript to access the actual items
in the @samp{rooms} array through optional chaining:

@example
let johnsHouse = Residence()
johnsHouse.rooms.append(Room(name: "Living Room"))
johnsHouse.rooms.append(Room(name: "Kitchen"))
john.residence = johnsHouse

if let firstRoomName = john.residence?[0].name @{
    print("The first room name is \(firstRoomName).")
@} else @{
    print("Unable to retrieve the first room name.")
@}
// Prints "The first room name is Living Room."
@end example

@menu
* Accessing Subscripts of Optional Type::
@end menu

@node Accessing Subscripts of Optional Type
@subsection Accessing Subscripts of Optional Type

If a subscript returns a value of optional type---such as the key
subscript of Swift's @samp{Dictionary} type---place a question mark @emph{after}
the subscript's closing bracket to chain on its optional return value:

@example
var testScores = ["Dave": [86, 82, 84], "Bev": [79, 94, 81]]
testScores["Dave"]?[0] = 91
testScores["Bev"]?[0] += 1
testScores["Brian"]?[0] = 72
// the "Dave" array is now [91, 82, 84] and the "Bev" array is now [80, 94, 81]
@end example

The example above defines a dictionary called @samp{testScores}, which
contains two key-value pairs that map a @samp{String} key to an array of
@samp{Int} values. The example uses optional chaining to set the first item
in the @samp{"Dave"} array to @samp{91}; to increment the first item in the
@samp{"Bev"} array by @samp{1}; and to try to set the first item in an array for a
key of @samp{"Brian"}. The first two calls succeed, because the @samp{testScores}
dictionary contains keys for @samp{"Dave"} and @samp{"Bev"}. The third call fails,
because the @samp{testScores} dictionary does not contain a key for
@samp{"Brian"}.

@node Linking Multiple Levels of Chaining
@section Linking Multiple Levels of Chaining

You can link together multiple levels of optional chaining to drill down
to properties, methods, and subscripts deeper within a model. However,
multiple levels of optional chaining do not add more levels of
optionality to the returned value.

To put it another way:

@itemize
@item
If the type you are trying to retrieve is not optional, it will become
optional because of the optional chaining.

@item
If the type you are trying to retrieve is @emph{already} optional, it will
not become @emph{more} optional because of the chaining.
@end itemize

Therefore:

@itemize
@item
If you try to retrieve an @samp{Int} value through optional chaining, an
@samp{Int?} is always returned, no matter how many levels of chaining are
used.

@item
Similarly, if you try to retrieve an @samp{Int?} value through optional
chaining, an @samp{Int?} is always returned, no matter how many levels of
chaining are used.
@end itemize

The example below tries to access the @samp{street} property of the @samp{address}
property of the @samp{residence} property of @samp{john}. There are @emph{two} levels
of optional chaining in use here, to chain through the @samp{residence} and
@samp{address} properties, both of which are of optional type:

@example
if let johnsStreet = john.residence?.address?.street @{
    print("John's street name is \(johnsStreet).")
@} else @{
    print("Unable to retrieve the address.")
@}
// Prints "Unable to retrieve the address."
@end example

The value of @samp{john.residence} currently contains a valid @samp{Residence}
instance. However, the value of @samp{john.residence.address} is currently
@samp{nil}. Because of this, the call to @samp{john.residence?.address?.street}
fails.

Note that in the example above, you are trying to retrieve the value of
the @samp{street} property. The type of this property is @samp{String?}. The
return value of @samp{john.residence?.address?.street} is therefore also
@samp{String?}, even though two levels of optional chaining are applied in
addition to the underlying optional type of the property.

If you set an actual @samp{Address} instance as the value for
@samp{john.residence.address}, and set an actual value for the address's
@samp{street} property, you can access the value of the @samp{street} property
through multilevel optional chaining:

@example
let johnsAddress = Address()
johnsAddress.buildingName = "The Larches"
johnsAddress.street = "Laurel Street"
john.residence?.address = johnsAddress

if let johnsStreet = john.residence?.address?.street @{
    print("John's street name is \(johnsStreet).")
@} else @{
    print("Unable to retrieve the address.")
@}
// Prints "John's street name is Laurel Street."
@end example

In this example, the attempt to set the @samp{address} property of
@samp{john.residence} will succeed, because the value of @samp{john.residence}
currently contains a valid @samp{Residence} instance.

@node Chaining on Methods with Optional Return Values
@section Chaining on Methods with Optional Return Values

The previous example shows how to retrieve the value of a property of
optional type through optional chaining. You can also use optional
chaining to call a method that returns a value of optional type, and to
chain on that method's return value if needed.

The example below calls the @samp{Address} class's @samp{buildingIdentifier()}
method through optional chaining. This method returns a value of type
@samp{String?}. As described above, the ultimate return type of this method
call after optional chaining is also @samp{String?}:

@example
if let buildingIdentifier = john.residence?.address?.buildingIdentifier() @{
    print("John's building identifier is \(buildingIdentifier).")
@}
// Prints "John's building identifier is The Larches."
@end example

If you want to perform further optional chaining on this method's return
value, place the optional chaining question mark @emph{after} the method's
parentheses:

@example
if let beginsWithThe =
     john.residence?.address?.buildingIdentifier()?.hasPrefix("The") @{
    if beginsWithThe @{
        print("John's building identifier begins with \"The\".")
    @} else @{
        print("John's building identifier does not begin with \"The\".")
    @}
@}
// Prints "John's building identifier begins with "The"."
@end example

Note

In the example above, you place the optional chaining question mark
@emph{after} the parentheses, because the optional value you are chaining on
is the @samp{buildingIdentifier()} method's return value, and not the
@samp{buildingIdentifier()} method itself.

@node Error Handling 2
@chapter Error Handling

@emph{Error handling} is the process of responding to and recovering from
error conditions in your program. Swift provides first-class support for
throwing, catching, propagating, and manipulating recoverable errors at
runtime.

Some operations aren't guaranteed to always complete execution or
produce a useful output. Optionals are used to represent the absence of
a value, but when an operation fails, it's often useful to understand
what caused the failure, so that your code can respond accordingly.

As an example, consider the task of reading and processing data from a
file on disk. There are a number of ways this task can fail, including
the file not existing at the specified path, the file not having read
permissions, or the file not being encoded in a compatible format.
Distinguishing among these different situations allows a program to
resolve some errors and to communicate to the user any errors it can't
resolve.

Note

Error handling in Swift interoperates with error handling patterns that
use the @samp{NSError} class in Cocoa and Objective-C. For more information
about this class, see
@uref{https://developer.apple.com/documentation/swift/cocoa_design_patterns/handling_cocoa_errors_in_swift, Handling
Cocoa Errors in Swift}
[@uref{https://developer.apple.com/documentation/swift/cocoa_design_patterns/handling_cocoa_errors_in_swift}].

@menu
* Representing and Throwing Errors::
* Handling Errors::
* Specifying Cleanup Actions::
@end menu

@node Representing and Throwing Errors
@section Representing and Throwing Errors

In Swift, errors are represented by values of types that conform to the
@samp{Error} protocol. This empty protocol indicates that a type can be used
for error handling.

Swift enumerations are particularly well suited to modeling a group of
related error conditions, with associated values allowing for additional
information about the nature of an error to be communicated. For
example, here's how you might represent the error conditions of
operating a vending machine inside a game:

@example
enum VendingMachineError: Error @{
    case invalidSelection
    case insufficientFunds(coinsNeeded: Int)
    case outOfStock
@}
@end example

Throwing an error lets you indicate that something unexpected happened
and the normal flow of execution can't continue. You use a @samp{throw}
statement to throw an error. For example, the following code throws an
error to indicate that five additional coins are needed by the vending
machine:

@example
throw VendingMachineError.insufficientFunds(coinsNeeded: 5)
@end example

@node Handling Errors
@section Handling Errors

When an error is thrown, some surrounding piece of code must be
responsible for handling the error---for example, by correcting the
problem, trying an alternative approach, or informing the user of the
failure.

There are four ways to handle errors in Swift. You can propagate the
error from a function to the code that calls that function, handle the
error using a @samp{do}-@samp{catch} statement, handle the error as an optional
value, or assert that the error will not occur. Each approach is
described in a section below.

When a function throws an error, it changes the flow of your program, so
it's important that you can quickly identify places in your code that
can throw errors. To identify these places in your code, write the @samp{try}
keyword---or the @samp{try?} or @samp{try!} variation---before a piece of code
that calls a function, method, or initializer that can throw an error.
These keywords are described in the sections below.

Note

Error handling in Swift resembles exception handling in other languages,
with the use of the @samp{try}, @samp{catch} and @samp{throw} keywords. Unlike
exception handling in many languages---including Objective-C---error
handling in Swift does not involve unwinding the call stack, a process
that can be computationally expensive. As such, the performance
characteristics of a @samp{throw} statement are comparable to those of a
@samp{return} statement.

@menu
* Propagating Errors Using Throwing Functions::
* Handling Errors Using Do-Catch::
* Converting Errors to Optional Values::
* Disabling Error Propagation::
@end menu

@node Propagating Errors Using Throwing Functions
@subsection Propagating Errors Using Throwing Functions

To indicate that a function, method, or initializer can throw an error,
you write the @samp{throws} keyword in the function's declaration after its
parameters. A function marked with @samp{throws} is called a @emph{throwing
function}. If the function specifies a return type, you write the
@samp{throws} keyword before the return arrow (@samp{->}).

@example
func canThrowErrors() throws -> String

func cannotThrowErrors() -> String
@end example

A throwing function propagates errors that are thrown inside of it to
the scope from which it's called.

Note

Only throwing functions can propagate errors. Any errors thrown inside a
nonthrowing function must be handled inside the function.

In the example below, the @samp{VendingMachine} class has a
@samp{vend(itemNamed:)} method that throws an appropriate
@samp{VendingMachineError} if the requested item is not available, is out of
stock, or has a cost that exceeds the current deposited amount:

@example
struct Item @{
    var price: Int
    var count: Int
@}

class VendingMachine @{
    var inventory = [
      "Candy Bar": Item(price: 12, count: 7),
      "Chips": Item(price: 10, count: 4),
      "Pretzels": Item(price: 7, count: 11)
    ]
    var coinsDeposited = 0

    func vend(itemNamed name: String) throws @{
        guard let item = inventory[name] else @{
            throw VendingMachineError.invalidSelection
        @}

        guard item.count > 0 else @{
            throw VendingMachineError.outOfStock
        @}

        guard item.price <= coinsDeposited else @{
            throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)
        @}

        coinsDeposited -= item.price

        var newItem = item
        newItem.count -= 1
        inventory[name] = newItem

        print("Dispensing \(name)")
    @}
@}
@end example

The implementation of the @samp{vend(itemNamed:)} method uses @samp{guard}
statements to exit the method early and throw appropriate errors if any
of the requirements for purchasing a snack aren't met. Because a @samp{throw}
statement immediately transfers program control, an item will be vended
only if all of these requirements are met.

Because the @samp{vend(itemNamed:)} method propagates any errors it throws,
any code that calls this method must either handle the errors---using a
@samp{do}-@samp{catch} statement, @samp{try?}, or @samp{try!}---or continue to propagate
them. For example, the @samp{buyFavoriteSnack(person:vendingMachine:)} in the
example below is also a throwing function, and any errors that the
@samp{vend(itemNamed:)} method throws will propagate up to the point where
the @samp{buyFavoriteSnack(person:vendingMachine:)} function is called.

@example
let favoriteSnacks = [
  "Alice": "Chips",
  "Bob": "Licorice",
  "Eve": "Pretzels",
]
func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws @{
    let snackName = favoriteSnacks[person] ?? "Candy Bar"
    try vendingMachine.vend(itemNamed: snackName)
@}
@end example

In this example, the @samp{buyFavoriteSnack(person: vendingMachine:)}
function looks up a given person's favorite snack and tries to buy it
for them by calling the @samp{vend(itemNamed:)} method. Because the
@samp{vend(itemNamed:)} method can throw an error, it's called with the @samp{try}
keyword in front of it.

Throwing initializers can propagate errors in the same way as throwing
functions. For example, the initializer for the @samp{PurchasedSnack}
structure in the listing below calls a throwing function as part of the
initialization process, and it handles any errors that it encounters by
propagating them to its caller.

@example
struct PurchasedSnack @{
    let name: String
    init(name: String, vendingMachine: VendingMachine) throws @{
        try vendingMachine.vend(itemNamed: name)
        self.name = name
    @}
@}
@end example

@node Handling Errors Using Do-Catch
@subsection Handling Errors Using Do-Catch

You use a @samp{do}-@samp{catch} statement to handle errors by running a block of
code. If an error is thrown by the code in the @samp{do} clause, it is
matched against the @samp{catch} clauses to determine which one of them can
handle the error.

Here is the general form of a @samp{do}-@samp{catch} statement:

@example
do @{
    try expression
    statements
@} catch pattern 1 @{
    statements
@} catch pattern 2 where condition @{
    statements
@} catch @{
    statements
@}
@end example

You write a pattern after @samp{catch} to indicate what errors that clause
can handle. If a @samp{catch} clause doesn't have a pattern, the clause
matches any error and binds the error to a local constant named @samp{error}.
For more information about pattern matching, see Patterns.

For example, the following code matches against all three cases of the
@samp{VendingMachineError} enumeration.

@example
var vendingMachine = VendingMachine()
vendingMachine.coinsDeposited = 8
do @{
    try buyFavoriteSnack(person: "Alice", vendingMachine: vendingMachine)
    print("Success! Yum.")
@} catch VendingMachineError.invalidSelection @{
    print("Invalid Selection.")
@} catch VendingMachineError.outOfStock @{
    print("Out of Stock.")
@} catch VendingMachineError.insufficientFunds(let coinsNeeded) @{
    print("Insufficient funds. Please insert an additional
            \(coinsNeeded) coins.")
@} catch @{
    print("Unexpected error: \(error).")
@}
// Prints "Insufficient funds. Please insert an additional 2 coins."
@end example

In the above example, the @samp{buyFavoriteSnack(person:vendingMachine:)}
function is called in a @samp{try} expression, because it can throw an error.
If an error is thrown, execution immediately transfers to the @samp{catch}
clauses, which decide whether to allow propagation to continue. If no
pattern is matched, the error gets caught by the final @samp{catch} clause
and is bound to a local @samp{error} constant. If no error is thrown, the
remaining statements in the @samp{do} statement are executed.

The @samp{catch} clauses don't have to handle every possible error that the
code in the @samp{do} clause can throw. If none of the @samp{catch} clauses handle
the error, the error propagates to the surrounding scope. However, the
propagated error must be handled by @emph{some} surrounding scope. In a
nonthrowing function, an enclosing @samp{do}-@samp{catch} clause must handle the
error. In a throwing function, either an enclosing @samp{do}-@samp{catch} clause
or the caller must handle the error. If the error propagates to the
top-level scope without being handled, you'll get a runtime error.

For example, the above example can be written so any error that isn't a
@samp{VendingMachineError} is instead caught by the calling function:

@example
func nourish(with item: String) throws @{
    do @{
        try vendingMachine.vend(itemNamed: item)
    @} catch is VendingMachineError @{
        print("Invalid selection, out of stock, or not enough money.")
    @}
@}

do @{
    try nourish(with: "Beet-Flavored Chips")
@} catch @{
    print("Unexpected non-vending-machine-related error: \(error)")
@}
// Prints "Invalid selection, out of stock, or not enough money."
@end example

In the @samp{nourish(with:)} function, if @samp{vend(itemNamed:)} throws an error
that's one of the cases of the @samp{VendingMachineError} enumeration,
@samp{nourish(with:)} handles the error by printing a message. Otherwise,
@samp{nourish(with:)} propagates the error to its call site. The error is
then caught by the general @samp{catch} clause.

@node Converting Errors to Optional Values
@subsection Converting Errors to Optional Values

You use @samp{try?} to handle an error by converting it to an optional value.
If an error is thrown while evaluating the @samp{try?} expression, the value
of the expression is @samp{nil}. For example, in the following code @samp{x} and
@samp{y} have the same value and behavior:

@example
func someThrowingFunction() throws -> Int @{
    // ...
@}

let x = try? someThrowingFunction()

let y: Int?
do @{
    y = try someThrowingFunction()
@} catch @{
    y = nil
@}
@end example

If @samp{someThrowingFunction()} throws an error, the value of @samp{x} and @samp{y} is
@samp{nil}. Otherwise, the value of @samp{x} and @samp{y} is the value that the
function returned. Note that @samp{x} and @samp{y} are an optional of whatever
type @samp{someThrowingFunction()} returns. Here the function returns an
integer, so @samp{x} and @samp{y} are optional integers.

Using @samp{try?} lets you write concise error handling code when you want to
handle all errors in the same way. For example, the following code uses
several approaches to fetch data, or returns @samp{nil} if all of the
approaches fail.

@example
func fetchData() -> Data? @{
    if let data = try? fetchDataFromDisk() @{ return data @}
    if let data = try? fetchDataFromServer() @{ return data @}
    return nil
@}
@end example

@node Disabling Error Propagation
@subsection Disabling Error Propagation

Sometimes you know a throwing function or method won't, in fact, throw
an error at runtime. On those occasions, you can write @samp{try!} before the
expression to disable error propagation and wrap the call in a runtime
assertion that no error will be thrown. If an error actually is thrown,
you'll get a runtime error.

For example, the following code uses a @samp{loadImage(atPath:)} function,
which loads the image resource at a given path or throws an error if the
image can't be loaded. In this case, because the image is shipped with
the application, no error will be thrown at runtime, so it is
appropriate to disable error propagation.

@example
let photo = try! loadImage(atPath: "./Resources/John Appleseed.jpg")
@end example

@node Specifying Cleanup Actions
@section Specifying Cleanup Actions

You use a @samp{defer} statement to execute a set of statements just before
code execution leaves the current block of code. This statement lets you
do any necessary cleanup that should be performed regardless of @emph{how}
execution leaves the current block of code---whether it leaves because
an error was thrown or because of a statement such as @samp{return} or
@samp{break}. For example, you can use a @samp{defer} statement to ensure that
file descriptors are closed and manually allocated memory is freed.

A @samp{defer} statement defers execution until the current scope is exited.
This statement consists of the @samp{defer} keyword and the statements to be
executed later. The deferred statements may not contain any code that
would transfer control out of the statements, such as a @samp{break} or a
@samp{return} statement, or by throwing an error. Deferred actions are
executed in the reverse of the order that they're written in your source
code. That is, the code in the first @samp{defer} statement executes last,
the code in the second @samp{defer} statement executes second to last, and so
on. The last @samp{defer} statement in source code order executes first.

@example
func processFile(filename: String) throws @{
    if exists(filename) @{
        let file = open(filename)
        defer @{
            close(file)
        @}
        while let line = try file.readline() @{
            // Work with the file.
        @}
        // close(file) is called here, at the end of the scope.
    @}
@}
@end example

The above example uses a @samp{defer} statement to ensure that the @samp{open(_:)}
function has a corresponding call to @samp{close(_:)}.

Note

You can use a @samp{defer} statement even when no error handling code is
involved.

@node Type Casting
@chapter Type Casting

@emph{Type casting} is a way to check the type of an instance, or to treat
that instance as a different superclass or subclass from somewhere else
in its own class hierarchy.

Type casting in Swift is implemented with the @samp{is} and @samp{as} operators.
These two operators provide a simple and expressive way to check the
type of a value or cast a value to a different type.

You can also use type casting to check whether a type conforms to a
protocol, as described in @ref{Checking for Protocol Conformance}.

@menu
* Defining a Class Hierarchy for Type Casting::
* Checking Type::
* Downcasting::
* Type Casting for Any and AnyObject::
@end menu

@node Defining a Class Hierarchy for Type Casting
@section Defining a Class Hierarchy for Type Casting

You can use type casting with a hierarchy of classes and subclasses to
check the type of a particular class instance and to cast that instance
to another class within the same hierarchy. The three code snippets
below define a hierarchy of classes and an array containing instances of
those classes, for use in an example of type casting.

The first snippet defines a new base class called @samp{MediaItem}. This
class provides basic functionality for any kind of item that appears in
a digital media library. Specifically, it declares a @samp{name} property of
type @samp{String}, and an @samp{init name} initializer. (It is assumed that all
media items, including all movies and songs, will have a name.)

@example
class MediaItem @{
    var name: String
    init(name: String) @{
        self.name = name
    @}
@}
@end example

The next snippet defines two subclasses of @samp{MediaItem}. The first
subclass, @samp{Movie}, encapsulates additional information about a movie or
film. It adds a @samp{director} property on top of the base @samp{MediaItem}
class, with a corresponding initializer. The second subclass, @samp{Song},
adds an @samp{artist} property and initializer on top of the base class:

@example
class Movie: MediaItem @{
    var director: String
    init(name: String, director: String) @{
        self.director = director
        super.init(name: name)
    @}
@}

class Song: MediaItem @{
    var artist: String
    init(name: String, artist: String) @{
        self.artist = artist
        super.init(name: name)
    @}
@}
@end example

The final snippet creates a constant array called @samp{library}, which
contains two @samp{Movie} instances and three @samp{Song} instances. The type of
the @samp{library} array is inferred by initializing it with the contents of
an array literal. Swift's type checker is able to deduce that @samp{Movie}
and @samp{Song} have a common superclass of @samp{MediaItem}, and so it infers a
type of @samp{[MediaItem]} for the @samp{library} array:

@example
let library = [
  Movie(name: "Casablanca", director: "Michael Curtiz"),
  Song(name: "Blue Suede Shoes", artist: "Elvis Presley"),
  Movie(name: "Citizen Kane", director: "Orson Welles"),
  Song(name: "The One And Only", artist: "Chesney Hawkes"),
  Song(name: "Never Gonna Give You Up", artist: "Rick Astley")
]
// the type of "library" is inferred to be [MediaItem]
@end example

The items stored in @samp{library} are still @samp{Movie} and @samp{Song} instances
behind the scenes. However, if you iterate over the contents of this
array, the items you receive back are typed as @samp{MediaItem}, and not as
@samp{Movie} or @samp{Song}. In order to work with them as their native type, you
need to @emph{check} their type, or @emph{downcast} them to a different type, as
described below.

@node Checking Type
@section Checking Type

Use the @emph{type check operator} (@samp{is}) to check whether an instance is of
a certain subclass type. The type check operator returns @samp{true} if the
instance is of that subclass type and @samp{false} if it is not.

The example below defines two variables, @samp{movieCount} and @samp{songCount},
which count the number of @samp{Movie} and @samp{Song} instances in the @samp{library}
array:

@example
var movieCount = 0
var songCount = 0

for item in library @{
    if item is Movie @{
        movieCount += 1
    @} else if item is Song @{
        songCount += 1
    @}
@}

print("Media library contains \(movieCount) movies and \(songCount) songs")
// Prints "Media library contains 2 movies and 3 songs"
@end example

This example iterates through all items in the @samp{library} array. On each
pass, the @samp{for}-@samp{in} loop sets the @samp{item} constant to the next
@samp{MediaItem} in the array.

@samp{item is Movie} returns @samp{true} if the current @samp{MediaItem} is a @samp{Movie}
instance and @samp{false} if it is not. Similarly, @samp{item is Song} checks
whether the item is a @samp{Song} instance. At the end of the @samp{for}-@samp{in}
loop, the values of @samp{movieCount} and @samp{songCount} contain a count of how
many @samp{MediaItem} instances were found of each type.

@node Downcasting
@section Downcasting

A constant or variable of a certain class type may actually refer to an
instance of a subclass behind the scenes. Where you believe this is the
case, you can try to @emph{downcast} to the subclass type with a @emph{type cast
operator} (@samp{as?} or @samp{as!}).

Because downcasting can fail, the type cast operator comes in two
different forms. The conditional form, @samp{as?}, returns an optional value
of the type you are trying to downcast to. The forced form, @samp{as!},
attempts the downcast and force-unwraps the result as a single compound
action.

Use the conditional form of the type cast operator (@samp{as?}) when you are
not sure if the downcast will succeed. This form of the operator will
always return an optional value, and the value will be @samp{nil} if the
downcast was not possible. This enables you to check for a successful
downcast.

Use the forced form of the type cast operator (@samp{as!}) only when you are
sure that the downcast will always succeed. This form of the operator
will trigger a runtime error if you try to downcast to an incorrect
class type.

The example below iterates over each @samp{MediaItem} in @samp{library}, and
prints an appropriate description for each item. To do this, it needs to
access each item as a true @samp{Movie} or @samp{Song}, and not just as a
@samp{MediaItem}. This is necessary in order for it to be able to access the
@samp{director} or @samp{artist} property of a @samp{Movie} or @samp{Song} for use in the
description.

In this example, each item in the array might be a @samp{Movie}, or it might
be a @samp{Song}. You don't know in advance which actual class to use for
each item, and so it is appropriate to use the conditional form of the
type cast operator (@samp{as?}) to check the downcast each time through the
loop:

@example
for item in library @{
    if let movie = item as? Movie @{
        print("Movie: \(movie.name), dir. \(movie.director)")
    @} else if let song = item as? Song @{
        print("Song: \(song.name), by \(song.artist)")
    @}
@}

// Movie: Casablanca, dir. Michael Curtiz
// Song: Blue Suede Shoes, by Elvis Presley
// Movie: Citizen Kane, dir. Orson Welles
// Song: The One And Only, by Chesney Hawkes
// Song: Never Gonna Give You Up, by Rick Astley
@end example

The example starts by trying to downcast the current @samp{item} as a
@samp{Movie}. Because @samp{item} is a @samp{MediaItem} instance, it's possible that it
@emph{might} be a @samp{Movie}; equally, it's also possible that it might be a
@samp{Song}, or even just a base @samp{MediaItem}. Because of this uncertainty,
the @samp{as?} form of the type cast operator returns an @emph{optional} value
when attempting to downcast to a subclass type. The result of
@samp{item as? Movie} is of type @samp{Movie?}, or “optional =Movie=”.

Downcasting to @samp{Movie} fails when applied to the @samp{Song} instances in the
library array. To cope with this, the example above uses optional
binding to check whether the optional @samp{Movie} actually contains a value
(that is, to find out whether the downcast succeeded.) This optional
binding is written “=if let movie = item as? Movie=”, which can be read
as:

“Try to access @samp{item} as a @samp{Movie}. If this is successful, set a new
temporary constant called @samp{movie} to the value stored in the returned
optional @samp{Movie}.”

If the downcasting succeeds, the properties of @samp{movie} are then used to
print a description for that @samp{Movie} instance, including the name of its
@samp{director}. A similar principle is used to check for @samp{Song} instances,
and to print an appropriate description (including @samp{artist} name)
whenever a @samp{Song} is found in the library.

Note

Casting does not actually modify the instance or change its values. The
underlying instance remains the same; it is simply treated and accessed
as an instance of the type to which it has been cast.

@node Type Casting for Any and AnyObject
@section Type Casting for Any and AnyObject

Swift provides two special types for working with nonspecific types:

@itemize
@item
@samp{Any} can represent an instance of any type at all, including function
types.

@item
@samp{AnyObject} can represent an instance of any class type.
@end itemize

Use @samp{Any} and @samp{AnyObject} only when you explicitly need the behavior and
capabilities they provide. It is always better to be specific about the
types you expect to work with in your code.

Here's an example of using @samp{Any} to work with a mix of different types,
including function types and nonclass types. The example creates an
array called @samp{things}, which can store values of type @samp{Any}:

@example
var things = [Any]()

things.append(0)
things.append(0.0)
things.append(42)
things.append(3.14159)
things.append("hello")
things.append((3.0, 5.0))
things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))
things.append(@{ (name: String) -> String in "Hello, \(name)" @})
@end example

The @samp{things} array contains two @samp{Int} values, two @samp{Double} values, a
@samp{String} value, a tuple of type @samp{(Double, Double)}, the movie
“Ghostbusters”, and a closure expression that takes a @samp{String} value and
returns another @samp{String} value.

To discover the specific type of a constant or variable that is known
only to be of type @samp{Any} or @samp{AnyObject}, you can use an @samp{is} or @samp{as}
pattern in a @samp{switch} statement's cases. The example below iterates over
the items in the @samp{things} array and queries the type of each item with a
@samp{switch} statement. Several of the @samp{switch} statement's cases bind their
matched value to a constant of the specified type to enable its value to
be printed:

@example
for thing in things @{
    switch thing @{
    case 0 as Int:
        print("zero as an Int")
    case 0 as Double:
        print("zero as a Double")
    case let someInt as Int:
        print("an integer value of \(someInt)")
    case let someDouble as Double where someDouble > 0:
        print("a positive double value of \(someDouble)")
    case is Double:
        print("some other double value that I don't want to print")
    case let someString as String:
        print("a string value of \"\(someString)\"")
    case let (x, y) as (Double, Double):
        print("an (x, y) point at \(x), \(y)")
    case let movie as Movie:
        print("a movie called \(movie.name), dir. \(movie.director)")
    case let stringConverter as (String) -> String:
        print(stringConverter("Michael"))
    default:
        print("something else")
    @}
@}

// zero as an Int
// zero as a Double
// an integer value of 42
// a positive double value of 3.14159
// a string value of "hello"
// an (x, y) point at 3.0, 5.0
// a movie called Ghostbusters, dir. Ivan Reitman
// Hello, Michael
@end example

Note

The @samp{Any} type represents values of any type, including optional types.
Swift gives you a warning if you use an optional value where a value of
type @samp{Any} is expected. If you really do need to use an optional value
as an @samp{Any} value, you can use the @samp{as} operator to explicitly cast the
optional to @samp{Any}, as shown below.

@example
let optionalNumber: Int? = 3
things.append(optionalNumber) // Warning
things.append(optionalNumber as Any) // No warning
@end example

@node Nested Types
@chapter Nested Types

Enumerations are often created to support a specific class or
structure's functionality. Similarly, it can be convenient to define
utility classes and structures purely for use within the context of a
more complex type. To accomplish this, Swift enables you to define
@emph{nested types}, whereby you nest supporting enumerations, classes, and
structures within the definition of the type they support.

To nest a type within another type, write its definition within the
outer braces of the type it supports. Types can be nested to as many
levels as are required.

@menu
* Nested Types in Action::
* Referring to Nested Types::
@end menu

@node Nested Types in Action
@section Nested Types in Action

The example below defines a structure called @samp{BlackjackCard}, which
models a playing card as used in the game of Blackjack. The
@samp{BlackjackCard} structure contains two nested enumeration types called
@samp{Suit} and @samp{Rank}.

In Blackjack, the Ace cards have a value of either one or eleven. This
feature is represented by a structure called @samp{Values}, which is nested
within the @samp{Rank} enumeration:

@example
struct BlackjackCard @{

    // nested Suit enumeration
    enum Suit: Character @{
        case spades = "♠", hearts = "♡", diamonds = "♢", clubs = "♣"
    @}

    // nested Rank enumeration
    enum Rank: Int @{
        case two = 2, three, four, five, six, seven, eight, nine, ten
        case jack, queen, king, ace
        struct Values @{
            let first: Int, second: Int?
        @}
        var values: Values @{
            switch self @{
            case .ace:
                return Values(first: 1, second: 11)
            case .jack, .queen, .king:
                return Values(first: 10, second: nil)
            default:
                return Values(first: self.rawValue, second: nil)
            @}
        @}
    @}

    // BlackjackCard properties and methods
    let rank: Rank, suit: Suit
    var description: String @{
        var output = "suit is \(suit.rawValue),"
        output += " value is \(rank.values.first)"
        if let second = rank.values.second @{
            output += " or \(second)"
        @}
        return output
    @}
@}
@end example

The @samp{Suit} enumeration describes the four common playing card suits,
together with a raw @samp{Character} value to represent their symbol.

The @samp{Rank} enumeration describes the thirteen possible playing card
ranks, together with a raw @samp{Int} value to represent their face value.
(This raw @samp{Int} value is not used for the Jack, Queen, King, and Ace
cards.)

As mentioned above, the @samp{Rank} enumeration defines a further nested
structure of its own, called @samp{Values}. This structure encapsulates the
fact that most cards have one value, but the Ace card has two values.
The @samp{Values} structure defines two properties to represent this:

@itemize
@item
@samp{first}, of type @samp{Int}

@item
@samp{second}, of type @samp{Int?}, or “optional =Int=”
@end itemize

@samp{Rank} also defines a computed property, @samp{values}, which returns an
instance of the @samp{Values} structure. This computed property considers the
rank of the card and initializes a new @samp{Values} instance with
appropriate values based on its rank. It uses special values for @samp{jack},
@samp{queen}, @samp{king}, and @samp{ace}. For the numeric cards, it uses the rank's
raw @samp{Int} value.

The @samp{BlackjackCard} structure itself has two properties---@samp{rank} and
@samp{suit}. It also defines a computed property called @samp{description}, which
uses the values stored in @samp{rank} and @samp{suit} to build a description of
the name and value of the card. The @samp{description} property uses optional
binding to check whether there is a second value to display, and if so,
inserts additional description detail for that second value.

Because @samp{BlackjackCard} is a structure with no custom initializers, it
has an implicit memberwise initializer, as described in
@ref{Memberwise Initializers for Structure Types, , Memberwise Initializers for Structure
Types}. You can use this initializer to initialize a new constant
called @samp{theAceOfSpades}:

@example
let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)
print("theAceOfSpades: \(theAceOfSpades.description)")
// Prints "theAceOfSpades: suit is ♠, value is 1 or 11"
@end example

Even though @samp{Rank} and @samp{Suit} are nested within @samp{BlackjackCard}, their
type can be inferred from context, and so the initialization of this
instance is able to refer to the enumeration cases by their case names
(@samp{.ace} and @samp{.spades}) alone. In the example above, the @samp{description}
property correctly reports that the Ace of Spades has a value of @samp{1} or
@samp{11}.

@node Referring to Nested Types
@section Referring to Nested Types

To use a nested type outside of its definition context, prefix its name
with the name of the type it is nested within:

@example
let heartsSymbol = BlackjackCard.Suit.hearts.rawValue
// heartsSymbol is "♡"
@end example

For the example above, this enables the names of @samp{Suit}, @samp{Rank}, and
@samp{Values} to be kept deliberately short, because their names are
naturally qualified by the context in which they are defined.

@node Extensions
@chapter Extensions

@emph{Extensions} add new functionality to an existing class, structure,
enumeration, or protocol type. This includes the ability to extend types
for which you do not have access to the original source code (known as
@emph{retroactive modeling}). Extensions are similar to categories in
Objective-C. (Unlike Objective-C categories, Swift extensions do not
have names.)

Extensions in Swift can:

@itemize
@item
Add computed instance properties and computed type properties

@item
Define instance methods and type methods

@item
Provide new initializers

@item
Define subscripts

@item
Define and use new nested types

@item
Make an existing type conform to a protocol
@end itemize

In Swift, you can even extend a protocol to provide implementations of
its requirements or add additional functionality that conforming types
can take advantage of. For more details, see
@ref{Protocol Extensions}.

Note

Extensions can add new functionality to a type, but they cannot override
existing functionality.

@menu
* Extension Syntax::
* Computed Properties: Computed Properties 1.
* Initializers: Initializers 1.
* Methods: Methods 1.
* Subscripts: Subscripts 1.
* Nested Types: Nested Types 1.
@end menu

@node Extension Syntax
@section Extension Syntax

Declare extensions with the @samp{extension} keyword:

@example
extension SomeType @{
    // new functionality to add to SomeType goes here
@}
@end example

An extension can extend an existing type to make it adopt one or more
protocols. To add protocol conformance, you write the protocol names the
same way as you write them for a class or structure:

@example
extension SomeType: SomeProtocol, AnotherProtocol @{
    // implementation of protocol requirements goes here
@}
@end example

Adding protocol conformance in this way is described in
@ref{Adding Protocol Conformance with an Extension, , Adding Protocol Conformance with an
Extension}.

An extension can be used to extend an existing generic type, as
described in @ref{Extending a Generic Type}. You
can also extend a generic type to conditionally add functionality, as
described in @ref{Extensions with a Generic Where Clause, , Extensions with a Generic Where
Clause}.

Note

If you define an extension to add new functionality to an existing type,
the new functionality will be available on all existing instances of
that type, even if they were created before the extension was defined.

@node Computed Properties 1
@section Computed Properties

Extensions can add computed instance properties and computed type
properties to existing types. This example adds five computed instance
properties to Swift's built-in @samp{Double} type, to provide basic support
for working with distance units:

@example
extension Double @{
    var km: Double @{ return self * 1_000.0 @}
    var m: Double @{ return self @}
    var cm: Double @{ return self / 100.0 @}
    var mm: Double @{ return self / 1_000.0 @}
    var ft: Double @{ return self / 3.28084 @}
@}
let oneInch = 25.4.mm
print("One inch is \(oneInch) meters")
// Prints "One inch is 0.0254 meters"
let threeFeet = 3.ft
print("Three feet is \(threeFeet) meters")
// Prints "Three feet is 0.914399970739201 meters"
@end example

These computed properties express that a @samp{Double} value should be
considered as a certain unit of length. Although they are implemented as
computed properties, the names of these properties can be appended to a
floating-point literal value with dot syntax, as a way to use that
literal value to perform distance conversions.

In this example, a @samp{Double} value of @samp{1.0} is considered to represent
“one meter”. This is why the @samp{m} computed property returns @samp{self}---the
expression @samp{1.m} is considered to calculate a @samp{Double} value of @samp{1.0}.

Other units require some conversion to be expressed as a value measured
in meters. One kilometer is the same as 1,000 meters, so the @samp{km}
computed property multiplies the value by @samp{1_000.00} to convert into a
number expressed in meters. Similarly, there are 3.28084 feet in a
meter, and so the @samp{ft} computed property divides the underlying @samp{Double}
value by @samp{3.28084}, to convert it from feet to meters.

These properties are read-only computed properties, and so they are
expressed without the @samp{get} keyword, for brevity. Their return value is
of type @samp{Double}, and can be used within mathematical calculations
wherever a @samp{Double} is accepted:

@example
let aMarathon = 42.km + 195.m
print("A marathon is \(aMarathon) meters long")
// Prints "A marathon is 42195.0 meters long"
@end example

Note

Extensions can add new computed properties, but they cannot add stored
properties, or add property observers to existing properties.

@node Initializers 1
@section Initializers

Extensions can add new initializers to existing types. This enables you
to extend other types to accept your own custom types as initializer
parameters, or to provide additional initialization options that were
not included as part of the type's original implementation.

Extensions can add new convenience initializers to a class, but they
cannot add new designated initializers or deinitializers to a class.
Designated initializers and deinitializers must always be provided by
the original class implementation.

If you use an extension to add an initializer to a value type that
provides default values for all of its stored properties and does not
define any custom initializers, you can call the default initializer and
memberwise initializer for that value type from within your extension's
initializer. This wouldn't be the case if you had written the
initializer as part of the value type's original implementation, as
described in @ref{Initializer Delegation for Value Types, , Initializer Delegation for
Value Types}.

If you use an extension to add an initializer to a structure that was
declared in another module, the new initializer can't access @samp{self}
until it calls an initializer from the defining module.

The example below defines a custom @samp{Rect} structure to represent a
geometric rectangle. The example also defines two supporting structures
called @samp{Size} and @samp{Point}, both of which provide default values of @samp{0.0}
for all of their properties:

@example
struct Size @{
    var width = 0.0, height = 0.0
@}
struct Point @{
    var x = 0.0, y = 0.0
@}
struct Rect @{
    var origin = Point()
    var size = Size()
@}
@end example

Because the @samp{Rect} structure provides default values for all of its
properties, it receives a default initializer and a memberwise
initializer automatically, as described in
@ref{Default Initializers}. These
initializers can be used to create new @samp{Rect} instances:

@example
let defaultRect = Rect()
let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),
                          size: Size(width: 5.0, height: 5.0))
@end example

You can extend the @samp{Rect} structure to provide an additional initializer
that takes a specific center point and size:

@example
extension Rect @{
    init(center: Point, size: Size) @{
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    @}
@}
@end example

This new initializer starts by calculating an appropriate origin point
based on the provided @samp{center} point and @samp{size} value. The initializer
then calls the structure's automatic memberwise initializer
@samp{init(origin:size:)}, which stores the new origin and size values in the
appropriate properties:

@example
let centerRect = Rect(center: Point(x: 4.0, y: 4.0),
                      size: Size(width: 3.0, height: 3.0))
// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)
@end example

Note

If you provide a new initializer with an extension, you are still
responsible for making sure that each instance is fully initialized once
the initializer completes.

@node Methods 1
@section Methods

Extensions can add new instance methods and type methods to existing
types. The following example adds a new instance method called
@samp{repetitions} to the @samp{Int} type:

@example
extension Int @{
    func repetitions(task: () -> Void) @{
        for _ in 0..<self @{
            task()
        @}
    @}
@}
@end example

The @samp{repetitions(task:)} method takes a single argument of type
@samp{() -> Void}, which indicates a function that has no parameters and does
not return a value.

After defining this extension, you can call the @samp{repetitions(task:)}
method on any integer to perform a task that many number of times:

@example
3.repetitions @{
    print("Hello!")
@}
// Hello!
// Hello!
// Hello!
@end example

@menu
* Mutating Instance Methods::
@end menu

@node Mutating Instance Methods
@subsection Mutating Instance Methods

Instance methods added with an extension can also modify (or @emph{mutate})
the instance itself. Structure and enumeration methods that modify
@samp{self} or its properties must mark the instance method as @samp{mutating},
just like mutating methods from an original implementation.

The example below adds a new mutating method called @samp{square} to Swift's
@samp{Int} type, which squares the original value:

@example
extension Int @{
    mutating func square() @{
        self = self * self
    @}
@}
var someInt = 3
someInt.square()
// someInt is now 9
@end example

@node Subscripts 1
@section Subscripts

Extensions can add new subscripts to an existing type. This example adds
an integer subscript to Swift's built-in @samp{Int} type. This subscript
@samp{[n]} returns the decimal digit @samp{n} places in from the right of the
number:

@itemize
@item
@samp{123456789[0]} returns @samp{9}

@item
@samp{123456789[1]} returns @samp{8}
@end itemize

@dots{}and so on:

@example
extension Int @{
    subscript(digitIndex: Int) -> Int @{
        var decimalBase = 1
        for _ in 0..<digitIndex @{
            decimalBase *= 10
        @}
        return (self / decimalBase) % 10
    @}
@}
746381295[0]
// returns 5
746381295[1]
// returns 9
746381295[2]
// returns 2
746381295[8]
// returns 7
@end example

If the @samp{Int} value does not have enough digits for the requested index,
the subscript implementation returns @samp{0}, as if the number had been
padded with zeros to the left:

@example
746381295[9]
// returns 0, as if you had requested:
0746381295[9]
@end example

@node Nested Types 1
@section Nested Types

Extensions can add new nested types to existing classes, structures, and
enumerations:

@example
extension Int @{
    enum Kind @{
        case negative, zero, positive
    @}
    var kind: Kind @{
        switch self @{
        case 0:
            return .zero
        case let x where x > 0:
            return .positive
        default:
            return .negative
        @}
    @}
@}
@end example

This example adds a new nested enumeration to @samp{Int}. This enumeration,
called @samp{Kind}, expresses the kind of number that a particular integer
represents. Specifically, it expresses whether the number is negative,
zero, or positive.

This example also adds a new computed instance property to @samp{Int}, called
@samp{kind}, which returns the appropriate @samp{Kind} enumeration case for that
integer.

The nested enumeration can now be used with any @samp{Int} value:

@example
func printIntegerKinds(_ numbers: [Int]) @{
    for number in numbers @{
        switch number.kind @{
        case .negative:
            print("- ", terminator: "")
        case .zero:
            print("0 ", terminator: "")
        case .positive:
            print("+ ", terminator: "")
        @}
    @}
    print("")
@}
printIntegerKinds([3, 19, -27, 0, -6, 0, 7])
// Prints "+ + - 0 - 0 + "
@end example

This function, @samp{printIntegerKinds(_:)}, takes an input array of @samp{Int}
values and iterates over those values in turn. For each integer in the
array, the function considers the @samp{kind} computed property for that
integer, and prints an appropriate description.

Note

@samp{number.kind} is already known to be of type @samp{Int.Kind}. Because of
this, all of the @samp{Int.Kind} case values can be written in shorthand form
inside the @samp{switch} statement, such as @samp{.negative} rather than
@samp{Int.Kind.negative}.

@node Protocols
@chapter Protocols

A @emph{protocol} defines a blueprint of methods, properties, and other
requirements that suit a particular task or piece of functionality. The
protocol can then be @emph{adopted} by a class, structure, or enumeration to
provide an actual implementation of those requirements. Any type that
satisfies the requirements of a protocol is said to @emph{conform} to that
protocol.

In addition to specifying requirements that conforming types must
implement, you can extend a protocol to implement some of these
requirements or to implement additional functionality that conforming
types can take advantage of.

@menu
* Protocol Syntax::
* Property Requirements::
* Method Requirements::
* Mutating Method Requirements::
* Initializer Requirements::
* Protocols as Types::
* Delegation::
* Adding Protocol Conformance with an Extension::
* Collections of Protocol Types::
* Protocol Inheritance::
* Class-Only Protocols::
* Protocol Composition::
* Checking for Protocol Conformance::
* Optional Protocol Requirements::
* Protocol Extensions::
@end menu

@node Protocol Syntax
@section Protocol Syntax

You define protocols in a very similar way to classes, structures, and
enumerations:

@example
protocol SomeProtocol @{
    // protocol definition goes here
@}
@end example

Custom types state that they adopt a particular protocol by placing the
protocol's name after the type's name, separated by a colon, as part of
their definition. Multiple protocols can be listed, and are separated by
commas:

@example
struct SomeStructure: FirstProtocol, AnotherProtocol @{
    // structure definition goes here
@}
@end example

If a class has a superclass, list the superclass name before any
protocols it adopts, followed by a comma:

@example
class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol @{
    // class definition goes here
@}
@end example

@node Property Requirements
@section Property Requirements

A protocol can require any conforming type to provide an instance
property or type property with a particular name and type. The protocol
doesn't specify whether the property should be a stored property or a
computed property---it only specifies the required property name and
type. The protocol also specifies whether each property must be gettable
or gettable @emph{and} settable.

If a protocol requires a property to be gettable and settable, that
property requirement can't be fulfilled by a constant stored property or
a read-only computed property. If the protocol only requires a property
to be gettable, the requirement can be satisfied by any kind of
property, and it's valid for the property to be also settable if this is
useful for your own code.

Property requirements are always declared as variable properties,
prefixed with the @samp{var} keyword. Gettable and settable properties are
indicated by writing @samp{@{ get set @}} after their type declaration, and
gettable properties are indicated by writing @samp{@{ get @}}.

@example
protocol SomeProtocol @{
    var mustBeSettable: Int @{ get set @}
    var doesNotNeedToBeSettable: Int @{ get @}
@}
@end example

Always prefix type property requirements with the @samp{static} keyword when
you define them in a protocol. This rule pertains even though type
property requirements can be prefixed with the @samp{class} or @samp{static}
keyword when implemented by a class:

@example
protocol AnotherProtocol @{
    static var someTypeProperty: Int @{ get set @}
@}
@end example

Here's an example of a protocol with a single instance property
requirement:

@example
protocol FullyNamed @{
    var fullName: String @{ get @}
@}
@end example

The @samp{FullyNamed} protocol requires a conforming type to provide a
fully-qualified name. The protocol doesn't specify anything else about
the nature of the conforming type---it only specifies that the type must
be able to provide a full name for itself. The protocol states that any
@samp{FullyNamed} type must have a gettable instance property called
@samp{fullName}, which is of type @samp{String}.

Here's an example of a simple structure that adopts and conforms to the
@samp{FullyNamed} protocol:

@example
struct Person: FullyNamed @{
    var fullName: String
@}
let john = Person(fullName: "John Appleseed")
// john.fullName is "John Appleseed"
@end example

This example defines a structure called @samp{Person}, which represents a
specific named person. It states that it adopts the @samp{FullyNamed}
protocol as part of the first line of its definition.

Each instance of @samp{Person} has a single stored property called
@samp{fullName}, which is of type @samp{String}. This matches the single
requirement of the @samp{FullyNamed} protocol, and means that @samp{Person} has
correctly conformed to the protocol. (Swift reports an error at
compile-time if a protocol requirement is not fulfilled.)

Here's a more complex class, which also adopts and conforms to the
@samp{FullyNamed} protocol:

@example
class Starship: FullyNamed @{
    var prefix: String?
    var name: String
    init(name: String, prefix: String? = nil) @{
        self.name = name
        self.prefix = prefix
    @}
    var fullName: String @{
        return (prefix != nil ? prefix! + " " : "") + name
    @}
@}
var ncc1701 = Starship(name: "Enterprise", prefix: "USS")
// ncc1701.fullName is "USS Enterprise"
@end example

This class implements the @samp{fullName} property requirement as a computed
read-only property for a starship. Each @samp{Starship} class instance stores
a mandatory @samp{name} and an optional @samp{prefix}. The @samp{fullName} property
uses the @samp{prefix} value if it exists, and prepends it to the beginning
of @samp{name} to create a full name for the starship.

@node Method Requirements
@section Method Requirements

Protocols can require specific instance methods and type methods to be
implemented by conforming types. These methods are written as part of
the protocol's definition in exactly the same way as for normal instance
and type methods, but without curly braces or a method body. Variadic
parameters are allowed, subject to the same rules as for normal methods.
Default values, however, can't be specified for method parameters within
a protocol's definition.

As with type property requirements, you always prefix type method
requirements with the @samp{static} keyword when they're defined in a
protocol. This is true even though type method requirements are prefixed
with the @samp{class} or @samp{static} keyword when implemented by a class:

@example
protocol SomeProtocol @{
    static func someTypeMethod()
@}
@end example

The following example defines a protocol with a single instance method
requirement:

@example
protocol RandomNumberGenerator @{
    func random() -> Double
@}
@end example

This protocol, @samp{RandomNumberGenerator}, requires any conforming type to
have an instance method called @samp{random}, which returns a @samp{Double} value
whenever it's called. Although it's not specified as part of the
protocol, it's assumed that this value will be a number from @samp{0.0} up to
(but not including) @samp{1.0}.

The @samp{RandomNumberGenerator} protocol doesn't make any assumptions about
how each random number will be generated---it simply requires the
generator to provide a standard way to generate a new random number.

Here's an implementation of a class that adopts and conforms to the
@samp{RandomNumberGenerator} protocol. This class implements a pseudorandom
number generator algorithm known as a @emph{linear congruential generator}:

@example
class LinearCongruentialGenerator: RandomNumberGenerator @{
    var lastRandom = 42.0
    let m = 139968.0
    let a = 3877.0
    let c = 29573.0
    func random() -> Double @{
        lastRandom = ((lastRandom * a +
                         c).truncatingRemainder(dividingBy:m))
        return lastRandom / m
    @}
@}
let generator = LinearCongruentialGenerator()
print("Here's a random number: \(generator.random())")
// Prints "Here's a random number: 0.3746499199817101"
print("And another one: \(generator.random())")
// Prints "And another one: 0.729023776863283"
@end example

@node Mutating Method Requirements
@section Mutating Method Requirements

It's sometimes necessary for a method to modify (or @emph{mutate}) the
instance it belongs to. For instance methods on value types (that is,
structures and enumerations) you place the @samp{mutating} keyword before a
method's @samp{func} keyword to indicate that the method is allowed to modify
the instance it belongs to and any properties of that instance. This
process is described in @ref{Modifying Value Types from Within Instance Methods, , Modifying Value Types
from Within Instance Methods}.

If you define a protocol instance method requirement that is intended to
mutate instances of any type that adopts the protocol, mark the method
with the @samp{mutating} keyword as part of the protocol's definition. This
enables structures and enumerations to adopt the protocol and satisfy
that method requirement.

Note

If you mark a protocol instance method requirement as @samp{mutating}, you
don't need to write the @samp{mutating} keyword when writing an
implementation of that method for a class. The @samp{mutating} keyword is
only used by structures and enumerations.

The example below defines a protocol called @samp{Togglable}, which defines a
single instance method requirement called @samp{toggle}. As its name
suggests, the @samp{toggle()} method is intended to toggle or invert the
state of any conforming type, typically by modifying a property of that
type.

The @samp{toggle()} method is marked with the @samp{mutating} keyword as part of
the @samp{Togglable} protocol definition, to indicate that the method is
expected to mutate the state of a conforming instance when it's called:

@example
protocol Togglable @{
    mutating func toggle()
@}
@end example

If you implement the @samp{Togglable} protocol for a structure or
enumeration, that structure or enumeration can conform to the protocol
by providing an implementation of the @samp{toggle()} method that is also
marked as @samp{mutating}.

The example below defines an enumeration called @samp{OnOffSwitch}. This
enumeration toggles between two states, indicated by the enumeration
cases @samp{on} and @samp{off}. The enumeration's @samp{toggle} implementation is
marked as @samp{mutating}, to match the @samp{Togglable} protocol's requirements:

@example
enum OnOffSwitch: Togglable @{
    case off, on
    mutating func toggle() @{
        switch self @{
        case .off:
            self = .on
        case .on:
            self = .off
        @}
    @}
@}
var lightSwitch = OnOffSwitch.off
lightSwitch.toggle()
// lightSwitch is now equal to .on
@end example

@node Initializer Requirements
@section Initializer Requirements

Protocols can require specific initializers to be implemented by
conforming types. You write these initializers as part of the protocol's
definition in exactly the same way as for normal initializers, but
without curly braces or an initializer body:

@example
protocol SomeProtocol @{
    init(someParameter: Int)
@}
@end example

@menu
* Class Implementations of Protocol Initializer Requirements::
* Failable Initializer Requirements::
@end menu

@node Class Implementations of Protocol Initializer Requirements
@subsection Class Implementations of Protocol Initializer Requirements

You can implement a protocol initializer requirement on a conforming
class as either a designated initializer or a convenience initializer.
In both cases, you must mark the initializer implementation with the
@samp{required} modifier:

@example
class SomeClass: SomeProtocol @{
    required init(someParameter: Int) @{
        // initializer implementation goes here
    @}
@}
@end example

The use of the @samp{required} modifier ensures that you provide an explicit
or inherited implementation of the initializer requirement on all
subclasses of the conforming class, such that they also conform to the
protocol.

For more information on required initializers, see
@ref{Required Initializers}.

Note

You don't need to mark protocol initializer implementations with the
@samp{required} modifier on classes that are marked with the @samp{final}
modifier, because final classes can't subclassed. For more about the
@samp{final} modifier, see @ref{Preventing Overrides, , Preventing
Overrides}.

If a subclass overrides a designated initializer from a superclass, and
also implements a matching initializer requirement from a protocol, mark
the initializer implementation with both the @samp{required} and @samp{override}
modifiers:

@example
protocol SomeProtocol @{
    init()
@}

class SomeSuperClass @{
    init() @{
        // initializer implementation goes here
    @}
@}

class SomeSubClass: SomeSuperClass, SomeProtocol @{
    // "required" from SomeProtocol conformance; "override" from SomeSuperClass
    required override init() @{
        // initializer implementation goes here
    @}
@}
@end example

@node Failable Initializer Requirements
@subsection Failable Initializer Requirements

Protocols can define failable initializer requirements for conforming
types, as defined in @ref{Failable Initializers, , Failable
Initializers}.

A failable initializer requirement can be satisfied by a failable or
nonfailable initializer on a conforming type. A nonfailable initializer
requirement can be satisfied by a nonfailable initializer or an
implicitly unwrapped failable initializer.

@node Protocols as Types
@section Protocols as Types

Protocols don't actually implement any functionality themselves.
Nonetheless, any protocol you create will become a fully-fledged type
for use in your code.

Because it's a type, you can use a protocol in many places where other
types are allowed, including:

@itemize
@item
As a parameter type or return type in a function, method, or
initializer

@item
As the type of a constant, variable, or property

@item
As the type of items in an array, dictionary, or other container
@end itemize

Note

Because protocols are types, begin their names with a capital letter
(such as @samp{FullyNamed} and @samp{RandomNumberGenerator}) to match the names of
other types in Swift (such as @samp{Int}, @samp{String}, and @samp{Double}).

Here's an example of a protocol used as a type:

@example
class Dice @{
    let sides: Int
    let generator: RandomNumberGenerator
    init(sides: Int, generator: RandomNumberGenerator) @{
        self.sides = sides
        self.generator = generator
    @}
    func roll() -> Int @{
        return Int(generator.random() * Double(sides)) + 1
    @}
@}
@end example

This example defines a new class called @samp{Dice}, which represents an
@emph{n}-sided dice for use in a board game. @samp{Dice} instances have an integer
property called @samp{sides}, which represents how many sides they have, and
a property called @samp{generator}, which provides a random number generator
from which to create dice roll values.

The @samp{generator} property is of type @samp{RandomNumberGenerator}. Therefore,
you can set it to an instance of @emph{any} type that adopts the
@samp{RandomNumberGenerator} protocol. Nothing else is required of the
instance you assign to this property, except that the instance must
adopt the @samp{RandomNumberGenerator} protocol.

@samp{Dice} also has an initializer, to set up its initial state. This
initializer has a parameter called @samp{generator}, which is also of type
@samp{RandomNumberGenerator}. You can pass a value of any conforming type in
to this parameter when initializing a new @samp{Dice} instance.

@samp{Dice} provides one instance method, @samp{roll}, which returns an integer
value between 1 and the number of sides on the dice. This method calls
the generator's @samp{random()} method to create a new random number between
@samp{0.0} and @samp{1.0}, and uses this random number to create a dice roll value
within the correct range. Because @samp{generator} is known to adopt
@samp{RandomNumberGenerator}, it's guaranteed to have a @samp{random()} method to
call.

Here's how the @samp{Dice} class can be used to create a six-sided dice with
a @samp{LinearCongruentialGenerator} instance as its random number generator:

@example
var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())
for _ in 1...5 @{
    print("Random dice roll is \(d6.roll())")
@}
// Random dice roll is 3
// Random dice roll is 5
// Random dice roll is 4
// Random dice roll is 5
// Random dice roll is 4
@end example

@node Delegation
@section Delegation

@emph{Delegation} is a design pattern that enables a class or structure to
hand off (or @emph{delegate}) some of its responsibilities to an instance of
another type. This design pattern is implemented by defining a protocol
that encapsulates the delegated responsibilities, such that a conforming
type (known as a delegate) is guaranteed to provide the functionality
that has been delegated. Delegation can be used to respond to a
particular action, or to retrieve data from an external source without
needing to know the underlying type of that source.

The example below defines two protocols for use with dice-based board
games:

@example
protocol DiceGame @{
    var dice: Dice @{ get @}
    func play()
@}
protocol DiceGameDelegate: AnyObject @{
    func gameDidStart(_ game: DiceGame)
    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)
    func gameDidEnd(_ game: DiceGame)
@}
@end example

The @samp{DiceGame} protocol is a protocol that can be adopted by any game
that involves dice.

The @samp{DiceGameDelegate} protocol can be adopted to track the progress of
a @samp{DiceGame}. To prevent strong reference cycles, delegates are declared
as weak references. For information about weak references, see
@ref{Strong Reference Cycles Between Class Instances, , Strong Reference Cycles
Between Class Instances}. Marking the protocol as class-only lets the
@samp{SnakesAndLadders} class later in this chapter declare that its delegate
must use a weak reference. A class-only protocol is marked by its
inheritance from @samp{AnyObject} as discussed in
@ref{Class-Only Protocols}.

Here's a version of the @emph{Snakes and Ladders} game originally introduced
in @ref{Control Flow}. This version is adapted to use
a @samp{Dice} instance for its dice-rolls; to adopt the @samp{DiceGame} protocol;
and to notify a @samp{DiceGameDelegate} about its progress:

@example
class SnakesAndLadders: DiceGame @{
    let finalSquare = 25
    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())
    var square = 0
    var board: [Int]
    init() @{
        board = Array(repeating: 0, count: finalSquare + 1)
        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
    @}
    weak var delegate: DiceGameDelegate?
    func play() @{
        square = 0
        delegate?.gameDidStart(self)
        gameLoop: while square != finalSquare @{
            let diceRoll = dice.roll()
            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)
            switch square + diceRoll @{
            case finalSquare:
                break gameLoop
            case let newSquare where newSquare > finalSquare:
                continue gameLoop
            default:
                square += diceRoll
                square += board[square]
            @}
        @}
        delegate?.gameDidEnd(self)
    @}
@}
@end example

For a description of the @emph{Snakes and Ladders} gameplay, see
@ref{Break}.

This version of the game is wrapped up as a class called
@samp{SnakesAndLadders}, which adopts the @samp{DiceGame} protocol. It provides a
gettable @samp{dice} property and a @samp{play()} method in order to conform to
the protocol. (The @samp{dice} property is declared as a constant property
because it doesn't need to change after initialization, and the protocol
only requires that it must be gettable.)

The @emph{Snakes and Ladders} game board setup takes place within the class's
@samp{init()} initializer. All game logic is moved into the protocol's @samp{play}
method, which uses the protocol's required @samp{dice} property to provide
its dice roll values.

Note that the @samp{delegate} property is defined as an @emph{optional}
@samp{DiceGameDelegate}, because a delegate isn't required in order to play
the game. Because it's of an optional type, the @samp{delegate} property is
automatically set to an initial value of @samp{nil}. Thereafter, the game
instantiator has the option to set the property to a suitable delegate.
Because the @samp{DiceGameDelegate} protocol is class-only, you can declare
the delegate to be @samp{weak} to prevent reference cycles.

@samp{DiceGameDelegate} provides three methods for tracking the progress of a
game. These three methods have been incorporated into the game logic
within the @samp{play()} method above, and are called when a new game starts,
a new turn begins, or the game ends.

Because the @samp{delegate} property is an @emph{optional} @samp{DiceGameDelegate}, the
@samp{play()} method uses optional chaining each time it calls a method on
the delegate. If the @samp{delegate} property is nil, these delegate calls
fail gracefully and without error. If the @samp{delegate} property is
non-nil, the delegate methods are called, and are passed the
@samp{SnakesAndLadders} instance as a parameter.

This next example shows a class called @samp{DiceGameTracker}, which adopts
the @samp{DiceGameDelegate} protocol:

@example
class DiceGameTracker: DiceGameDelegate @{
    var numberOfTurns = 0
    func gameDidStart(_ game: DiceGame) @{
        numberOfTurns = 0
        if game is SnakesAndLadders @{
            print("Started a new game of Snakes and Ladders")
        @}
        print("The game is using a \(game.dice.sides)-sided dice")
    @}
    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) @{
        numberOfTurns += 1
        print("Rolled a \(diceRoll)")
    @}
    func gameDidEnd(_ game: DiceGame) @{
        print("The game lasted for \(numberOfTurns) turns")
    @}
@}
@end example

@samp{DiceGameTracker} implements all three methods required by
@samp{DiceGameDelegate}. It uses these methods to keep track of the number of
turns a game has taken. It resets a @samp{numberOfTurns} property to zero
when the game starts, increments it each time a new turn begins, and
prints out the total number of turns once the game has ended.

The implementation of @samp{gameDidStart(_:)} shown above uses the @samp{game}
parameter to print some introductory information about the game that is
about to be played. The @samp{game} parameter has a type of @samp{DiceGame}, not
@samp{SnakesAndLadders}, and so @samp{gameDidStart(_:)} can access and use only
methods and properties that are implemented as part of the @samp{DiceGame}
protocol. However, the method is still able to use type casting to query
the type of the underlying instance. In this example, it checks whether
@samp{game} is actually an instance of @samp{SnakesAndLadders} behind the scenes,
and prints an appropriate message if so.

The @samp{gameDidStart(_:)} method also accesses the @samp{dice} property of the
passed @samp{game} parameter. Because @samp{game} is known to conform to the
@samp{DiceGame} protocol, it's guaranteed to have a @samp{dice} property, and so
the @samp{gameDidStart(_:)} method is able to access and print the dice's
@samp{sides} property, regardless of what kind of game is being played.

Here's how @samp{DiceGameTracker} looks in action:

@example
let tracker = DiceGameTracker()
let game = SnakesAndLadders()
game.delegate = tracker
game.play()
// Started a new game of Snakes and Ladders
// The game is using a 6-sided dice
// Rolled a 3
// Rolled a 5
// Rolled a 4
// Rolled a 5
// The game lasted for 4 turns
@end example

@node Adding Protocol Conformance with an Extension
@section Adding Protocol Conformance with an Extension

You can extend an existing type to adopt and conform to a new protocol,
even if you don't have access to the source code for the existing type.
Extensions can add new properties, methods, and subscripts to an
existing type, and are therefore able to add any requirements that a
protocol may demand. For more about extensions, see
@ref{Extensions}.

Note

Existing instances of a type automatically adopt and conform to a
protocol when that conformance is added to the instance's type in an
extension.

For example, this protocol, called @samp{TextRepresentable}, can be
implemented by any type that has a way to be represented as text. This
might be a description of itself, or a text version of its current
state:

@example
protocol TextRepresentable @{
    var textualDescription: String @{ get @}
@}
@end example

The @samp{Dice} class from above can be extended to adopt and conform to
@samp{TextRepresentable}:

@example
extension Dice: TextRepresentable @{
    var textualDescription: String @{
        return "A \(sides)-sided dice"
    @}
@}
@end example

This extension adopts the new protocol in exactly the same way as if
@samp{Dice} had provided it in its original implementation. The protocol name
is provided after the type name, separated by a colon, and an
implementation of all requirements of the protocol is provided within
the extension's curly braces.

Any @samp{Dice} instance can now be treated as @samp{TextRepresentable}:

@example
let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())
print(d12.textualDescription)
// Prints "A 12-sided dice"
@end example

Similarly, the @samp{SnakesAndLadders} game class can be extended to adopt
and conform to the @samp{TextRepresentable} protocol:

@example
extension SnakesAndLadders: TextRepresentable @{
    var textualDescription: String @{
        return "A game of Snakes and Ladders with \(finalSquare) squares"
    @}
@}
print(game.textualDescription)
// Prints "A game of Snakes and Ladders with 25 squares"
@end example

@menu
* Conditionally Conforming to a Protocol::
* Declaring Protocol Adoption with an Extension::
@end menu

@node Conditionally Conforming to a Protocol
@subsection Conditionally Conforming to a Protocol

A generic type may be able to satisfy the requirements of a protocol
only under certain conditions, such as when the type's generic parameter
conforms to the protocol. You can make a generic type conditionally
conform to a protocol by listing constraints when extending the type.
Write these constraints after the name of the protocol you're adopting
by writing a generic @samp{where} clause. For more about generic @samp{where}
clauses, see @ref{Generic Where Clauses}.

The following extension makes @samp{Array} instances conform to the
@samp{TextRepresentable} protocol whenever they store elements of a type that
conforms to @samp{TextRepresentable}.

@example
extension Array: TextRepresentable where Element: TextRepresentable @{
    var textualDescription: String @{
        let itemsAsText = self.map @{ $0.textualDescription @}
        return "[" + itemsAsText.joined(separator: ", ") + "]"
    @}
@}
let myDice = [d6, d12]
print(myDice.textualDescription)
// Prints "[A 6-sided dice, A 12-sided dice]"
@end example

@node Declaring Protocol Adoption with an Extension
@subsection Declaring Protocol Adoption with an Extension

If a type already conforms to all of the requirements of a protocol, but
has not yet stated that it adopts that protocol, you can make it adopt
the protocol with an empty extension:

@example
struct Hamster @{
    var name: String
    var textualDescription: String @{
        return "A hamster named \(name)"
    @}
@}
extension Hamster: TextRepresentable @{@}
@end example

Instances of @samp{Hamster} can now be used wherever @samp{TextRepresentable} is
the required type:

@example
let simonTheHamster = Hamster(name: "Simon")
let somethingTextRepresentable: TextRepresentable = simonTheHamster
print(somethingTextRepresentable.textualDescription)
// Prints "A hamster named Simon"
@end example

Note

Types don't automatically adopt a protocol just by satisfying its
requirements. They must always explicitly declare their adoption of the
protocol.

@node Collections of Protocol Types
@section Collections of Protocol Types

A protocol can be used as the type to be stored in a collection such as
an array or a dictionary, as mentioned in
@ref{Protocols as Types}. This example creates an
array of @samp{TextRepresentable} things:

@example
let things: [TextRepresentable] = [game, d12, simonTheHamster]
@end example

It's now possible to iterate over the items in the array, and print each
item's textual description:

@example
for thing in things @{
    print(thing.textualDescription)
@}
// A game of Snakes and Ladders with 25 squares
// A 12-sided dice
// A hamster named Simon
@end example

Note that the @samp{thing} constant is of type @samp{TextRepresentable}. It's not
of type @samp{Dice}, or @samp{DiceGame}, or @samp{Hamster}, even if the actual instance
behind the scenes is of one of those types. Nonetheless, because it's of
type @samp{TextRepresentable}, and anything that is @samp{TextRepresentable} is
known to have a @samp{textualDescription} property, it's safe to access
@samp{thing.textualDescription} each time through the loop.

@node Protocol Inheritance
@section Protocol Inheritance

A protocol can @emph{inherit} one or more other protocols and can add further
requirements on top of the requirements it inherits. The syntax for
protocol inheritance is similar to the syntax for class inheritance, but
with the option to list multiple inherited protocols, separated by
commas:

@example
protocol InheritingProtocol: SomeProtocol, AnotherProtocol @{
    // protocol definition goes here
@}
@end example

Here's an example of a protocol that inherits the @samp{TextRepresentable}
protocol from above:

@example
protocol PrettyTextRepresentable: TextRepresentable @{
    var prettyTextualDescription: String @{ get @}
@}
@end example

This example defines a new protocol, @samp{PrettyTextRepresentable}, which
inherits from @samp{TextRepresentable}. Anything that adopts
@samp{PrettyTextRepresentable} must satisfy all of the requirements enforced
by @samp{TextRepresentable}, @emph{plus} the additional requirements enforced by
@samp{PrettyTextRepresentable}. In this example, @samp{PrettyTextRepresentable}
adds a single requirement to provide a gettable property called
@samp{prettyTextualDescription} that returns a @samp{String}.

The @samp{SnakesAndLadders} class can be extended to adopt and conform to
@samp{PrettyTextRepresentable}:

@example
extension SnakesAndLadders: PrettyTextRepresentable @{
    var prettyTextualDescription: String @{
        var output = textualDescription + ":\n"
        for index in 1...finalSquare @{
            switch board[index] @{
            case let ladder where ladder > 0:
                output += "▲ "
            case let snake where snake < 0:
                output += "▼ "
            default:
                output += "○ "
            @}
        @}
        return output
    @}
@}
@end example

This extension states that it adopts the @samp{PrettyTextRepresentable}
protocol and provides an implementation of the
@samp{prettyTextualDescription} property for the @samp{SnakesAndLadders} type.
Anything that is @samp{PrettyTextRepresentable} must also be
@samp{TextRepresentable}, and so the implementation of
@samp{prettyTextualDescription} starts by accessing the @samp{textualDescription}
property from the @samp{TextRepresentable} protocol to begin an output
string. It appends a colon and a line break, and uses this as the start
of its pretty text representation. It then iterates through the array of
board squares, and appends a geometric shape to represent the contents
of each square:

@itemize
@item
If the square's value is greater than @samp{0}, it's the base of a ladder,
and is represented by @samp{▲}.

@item
If the square's value is less than @samp{0}, it's the head of a snake, and
is represented by @samp{▼}.

@item
Otherwise, the square's value is @samp{0}, and it's a “free” square,
represented by @samp{○}.
@end itemize

The @samp{prettyTextualDescription} property can now be used to print a
pretty text description of any @samp{SnakesAndLadders} instance:

@example
print(game.prettyTextualDescription)
// A game of Snakes and Ladders with 25 squares:
// ○ ○ ▲ ○ ○ ▲ ○ ○ ▲ ▲ ○ ○ ○ ▼ ○ ○ ○ ○ ▼ ○ ○ ▼ ○ ▼ ○
@end example

@node Class-Only Protocols
@section Class-Only Protocols

You can limit protocol adoption to class types (and not structures or
enumerations) by adding the @samp{AnyObject} protocol to a protocol's
inheritance list.

@example
protocol SomeClassOnlyProtocol: AnyObject, SomeInheritedProtocol @{
    // class-only protocol definition goes here
@}
@end example

In the example above, @samp{SomeClassOnlyProtocol} can only be adopted by
class types. It's a compile-time error to write a structure or
enumeration definition that tries to adopt @samp{SomeClassOnlyProtocol}.

Note

Use a class-only protocol when the behavior defined by that protocol's
requirements assumes or requires that a conforming type has reference
semantics rather than value semantics. For more about reference and
value semantics, see @ref{Structures and Enumerations Are Value Types, , Structures and
Enumerations Are Value Types} and
@ref{Classes Are Reference Types}.

@node Protocol Composition
@section Protocol Composition

It can be useful to require a type to conform to multiple protocols at
the same time. You can combine multiple protocols into a single
requirement with a @emph{protocol composition}. Protocol compositions behave
as if you defined a temporary local protocol that has the combined
requirements of all protocols in the composition. Protocol compositions
don't define any new protocol types.

Protocol compositions have the form @samp{SomeProtocol & AnotherProtocol}.
You can list as many protocols as you need, separating them with
ampersands (@samp{&}). In addition to its list of protocols, a protocol
composition can also contain one class type, which you can use to
specify a required superclass.

Here's an example that combines two protocols called @samp{Named} and @samp{Aged}
into a single protocol composition requirement on a function parameter:

@example
protocol Named @{
    var name: String @{ get @}
@}
protocol Aged @{
    var age: Int @{ get @}
@}
struct Person: Named, Aged @{
    var name: String
    var age: Int
@}
func wishHappyBirthday(to celebrator: Named & Aged) @{
    print("Happy birthday, \(celebrator.name), you're \(celebrator.age)!")
@}
let birthdayPerson = Person(name: "Malcolm", age: 21)
wishHappyBirthday(to: birthdayPerson)
// Prints "Happy birthday, Malcolm, you're 21!"
@end example

In this example, the @samp{Named} protocol has a single requirement for a
gettable @samp{String} property called @samp{name}. The @samp{Aged} protocol has a
single requirement for a gettable @samp{Int} property called @samp{age}. Both
protocols are adopted by a structure called @samp{Person}.

The example also defines a @samp{wishHappyBirthday(to:)} function. The type
of the @samp{celebrator} parameter is @samp{Named & Aged}, which means “any type
that conforms to both the @samp{Named} and @samp{Aged} protocols.” It doesn't
matter which specific type is passed to the function, as long as it
conforms to both of the required protocols.

The example then creates a new @samp{Person} instance called @samp{birthdayPerson}
and passes this new instance to the @samp{wishHappyBirthday(to:)} function.
Because @samp{Person} conforms to both protocols, this call is valid, and the
@samp{wishHappyBirthday(to:)} function can print its birthday greeting.

Here's an example that combines the @samp{Named} protocol from the previous
example with a @samp{Location} class:

@example
class Location @{
    var latitude: Double
    var longitude: Double
    init(latitude: Double, longitude: Double) @{
        self.latitude = latitude
        self.longitude = longitude
    @}
@}
class City: Location, Named @{
    var name: String
    init(name: String, latitude: Double, longitude: Double) @{
        self.name = name
        super.init(latitude: latitude, longitude: longitude)
    @}
@}
func beginConcert(in location: Location & Named) @{
    print("Hello, \(location.name)!")
@}

let seattle = City(name: "Seattle", latitude: 47.6, longitude: -122.3)
beginConcert(in: seattle)
// Prints "Hello, Seattle!"
@end example

The @samp{beginConcert(in:)} function takes a parameter of type
@samp{Location & Named}, which means “any type that's a subclass of
@samp{Location} and that conforms to the @samp{Named} protocol.” In this case,
@samp{City} satisfies both requirements.

Passing @samp{birthdayPerson} to the @samp{beginConcert(in:)} function is invalid
because @samp{Person} isn't a subclass of @samp{Location}. Likewise, if you made a
subclass of @samp{Location} that didn't conform to the @samp{Named} protocol,
calling @samp{beginConcert(in:)} with an instance of that type is also
invalid.

@node Checking for Protocol Conformance
@section Checking for Protocol Conformance

You can use the @samp{is} and @samp{as} operators described in
@ref{Type Casting} to check for protocol conformance,
and to cast to a specific protocol. Checking for and casting to a
protocol follows exactly the same syntax as checking for and casting to
a type:

@itemize
@item
The @samp{is} operator returns @samp{true} if an instance conforms to a protocol
and returns @samp{false} if it doesn't.

@item
The @samp{as?} version of the downcast operator returns an optional value
of the protocol's type, and this value is @samp{nil} if the instance
doesn't conform to that protocol.

@item
The @samp{as!} version of the downcast operator forces the downcast to the
protocol type and triggers a runtime error if the downcast doesn't
succeed.
@end itemize

This example defines a protocol called @samp{HasArea}, with a single property
requirement of a gettable @samp{Double} property called @samp{area}:

@example
protocol HasArea @{
    var area: Double @{ get @}
@}
@end example

Here are two classes, @samp{Circle} and @samp{Country}, both of which conform to
the @samp{HasArea} protocol:

@example
class Circle: HasArea @{
    let pi = 3.1415927
    var radius: Double
    var area: Double @{ return pi * radius * radius @}
    init(radius: Double) @{ self.radius = radius @}
@}
class Country: HasArea @{
    var area: Double
    init(area: Double) @{ self.area = area @}
@}
@end example

The @samp{Circle} class implements the @samp{area} property requirement as a
computed property, based on a stored @samp{radius} property. The @samp{Country}
class implements the @samp{area} requirement directly as a stored property.
Both classes correctly conform to the @samp{HasArea} protocol.

Here's a class called @samp{Animal}, which doesn't conform to the @samp{HasArea}
protocol:

@example
class Animal @{
    var legs: Int
    init(legs: Int) @{ self.legs = legs @}
@}
@end example

The @samp{Circle}, @samp{Country} and @samp{Animal} classes don't have a shared base
class. Nonetheless, they're all classes, and so instances of all three
types can be used to initialize an array that stores values of type
@samp{AnyObject}:

@example
let objects: [AnyObject] = [
  Circle(radius: 2.0),
  Country(area: 243_610),
  Animal(legs: 4)
]
@end example

The @samp{objects} array is initialized with an array literal containing a
@samp{Circle} instance with a radius of 2 units; a @samp{Country} instance
initialized with the surface area of the United Kingdom in square
kilometers; and an @samp{Animal} instance with four legs.

The @samp{objects} array can now be iterated, and each object in the array
can be checked to see if it conforms to the @samp{HasArea} protocol:

@example
for object in objects @{
    if let objectWithArea = object as? HasArea @{
        print("Area is \(objectWithArea.area)")
    @} else @{
        print("Something that doesn't have an area")
    @}
@}
// Area is 12.5663708
// Area is 243610.0
// Something that doesn't have an area
@end example

Whenever an object in the array conforms to the @samp{HasArea} protocol, the
optional value returned by the @samp{as?} operator is unwrapped with optional
binding into a constant called @samp{objectWithArea}. The @samp{objectWithArea}
constant is known to be of type @samp{HasArea}, and so its @samp{area} property
can be accessed and printed in a type-safe way.

Note that the underlying objects aren't changed by the casting process.
They continue to be a @samp{Circle}, a @samp{Country} and an @samp{Animal}. However, at
the point that they're stored in the @samp{objectWithArea} constant, they're
only known to be of type @samp{HasArea}, and so only their @samp{area} property
can be accessed.

@node Optional Protocol Requirements
@section Optional Protocol Requirements

You can define @emph{optional requirements} for protocols, These requirements
don't have to be implemented by types that conform to the protocol.
Optional requirements are prefixed by the @samp{optional} modifier as part of
the protocol's definition. Optional requirements are available so that
you can write code that interoperates with Objective-C. Both the
protocol and the optional requirement must be marked with the @samp{@@objc}
attribute. Note that @samp{@@objc} protocols can be adopted only by classes
that inherit from Objective-C classes or other @samp{@@objc} classes. They
can't be adopted by structures or enumerations.

When you use a method or property in an optional requirement, its type
automatically becomes an optional. For example, a method of type
@samp{(Int) -> String} becomes @samp{((Int) -> String)?}. Note that the entire
function type is wrapped in the optional, not the method's return value.

An optional protocol requirement can be called with optional chaining,
to account for the possibility that the requirement was not implemented
by a type that conforms to the protocol. You check for an implementation
of an optional method by writing a question mark after the name of the
method when it's called, such as @samp{someOptionalMethod?(someArgument)}.
For information on optional chaining, see
@ref{Optional Chaining}.

The following example defines an integer-counting class called
@samp{Counter}, which uses an external data source to provide its increment
amount. This data source is defined by the @samp{CounterDataSource} protocol,
which has two optional requirements:

@example
@@objc protocol CounterDataSource @{
    @@objc optional func increment(forCount count: Int) -> Int
    @@objc optional var fixedIncrement: Int @{ get @}
@}
@end example

The @samp{CounterDataSource} protocol defines an optional method requirement
called @samp{increment(forCount:)} and an optional property requirement
called @samp{fixedIncrement}. These requirements define two different ways
for data sources to provide an appropriate increment amount for a
@samp{Counter} instance.

Note

Strictly speaking, you can write a custom class that conforms to
@samp{CounterDataSource} without implementing @emph{either} protocol requirement.
They're both optional, after all. Although technically allowed, this
wouldn't make for a very good data source.

The @samp{Counter} class, defined below, has an optional @samp{dataSource}
property of type @samp{CounterDataSource?}:

@example
class Counter @{
    var count = 0
    var dataSource: CounterDataSource?
    func increment() @{
        if let amount = dataSource?.increment?(forCount: count) @{
            count += amount
        @} else if let amount = dataSource?.fixedIncrement @{
            count += amount
        @}
    @}
@}
@end example

The @samp{Counter} class stores its current value in a variable property
called @samp{count}. The @samp{Counter} class also defines a method called
@samp{increment}, which increments the @samp{count} property every time the method
is called.

The @samp{increment()} method first tries to retrieve an increment amount by
looking for an implementation of the @samp{increment(forCount:)} method on
its data source. The @samp{increment()} method uses optional chaining to try
to call @samp{increment(forCount:)}, and passes the current @samp{count} value as
the method's single argument.

Note that @emph{two} levels of optional chaining are at play here. First,
it's possible that @samp{dataSource} may be @samp{nil}, and so @samp{dataSource} has a
question mark after its name to indicate that @samp{increment(forCount:)}
should be called only if @samp{dataSource} isn't @samp{nil}. Second, even if
@samp{dataSource} @emph{does} exist, there's no guarantee that it implements
@samp{increment(forCount:)}, because it's an optional requirement. Here, the
possibility that @samp{increment(forCount:)} might not be implemented is also
handled by optional chaining. The call to @samp{increment(forCount:)} happens
only if @samp{increment(forCount:)} exists---that is, if it isn't @samp{nil}. This
is why @samp{increment(forCount:)} is also written with a question mark after
its name.

Because the call to @samp{increment(forCount:)} can fail for either of these
two reasons, the call returns an @emph{optional} @samp{Int} value. This is true
even though @samp{increment(forCount:)} is defined as returning a
non-optional @samp{Int} value in the definition of @samp{CounterDataSource}. Even
though there are two optional chaining operations, one after another,
the result is still wrapped in a single optional. For more information
about using multiple optional chaining operations, see
@ref{Linking Multiple Levels of Chaining}.

After calling @samp{increment(forCount:)}, the optional @samp{Int} that it returns
is unwrapped into a constant called @samp{amount}, using optional binding. If
the optional @samp{Int} does contain a value---that is, if the delegate and
method both exist, and the method returned a value---the unwrapped
@samp{amount} is added onto the stored @samp{count} property, and incrementation
is complete.

If it's @emph{not} possible to retrieve a value from the
@samp{increment(forCount:)} method---either because @samp{dataSource} is nil, or
because the data source doesn't implement @samp{increment(forCount:)}---then
the @samp{increment()} method tries to retrieve a value from the data
source's @samp{fixedIncrement} property instead. The @samp{fixedIncrement}
property is also an optional requirement, so its value is an optional
@samp{Int} value, even though @samp{fixedIncrement} is defined as a non-optional
@samp{Int} property as part of the @samp{CounterDataSource} protocol definition.

Here's a simple @samp{CounterDataSource} implementation where the data source
returns a constant value of @samp{3} every time it's queried. It does this by
implementing the optional @samp{fixedIncrement} property requirement:

@example
class ThreeSource: NSObject, CounterDataSource @{
    let fixedIncrement = 3
@}
@end example

You can use an instance of @samp{ThreeSource} as the data source for a new
@samp{Counter} instance:

@example
var counter = Counter()
counter.dataSource = ThreeSource()
for _ in 1...4 @{
    counter.increment()
    print(counter.count)
@}
// 3
// 6
// 9
// 12
@end example

The code above creates a new @samp{Counter} instance; sets its data source to
be a new @samp{ThreeSource} instance; and calls the counter's @samp{increment()}
method four times. As expected, the counter's @samp{count} property increases
by three each time @samp{increment()} is called.

Here's a more complex data source called @samp{TowardsZeroSource}, which
makes a @samp{Counter} instance count up or down towards zero from its
current @samp{count} value:

@example
class TowardsZeroSource: NSObject, CounterDataSource @{
    func increment(forCount count: Int) -> Int @{
        if count == 0 @{
            return 0
        @} else if count < 0 @{
            return 1
        @} else @{
            return -1
        @}
    @}
@}
@end example

The @samp{TowardsZeroSource} class implements the optional
@samp{increment(forCount:)} method from the @samp{CounterDataSource} protocol and
uses the @samp{count} argument value to work out which direction to count in.
If @samp{count} is already zero, the method returns @samp{0} to indicate that no
further counting should take place.

You can use an instance of @samp{TowardsZeroSource} with the existing
@samp{Counter} instance to count from @samp{-4} to zero. Once the counter reaches
zero, no more counting takes place:

@example
counter.count = -4
counter.dataSource = TowardsZeroSource()
for _ in 1...5 @{
    counter.increment()
    print(counter.count)
@}
// -3
// -2
// -1
// 0
// 0
@end example

@node Protocol Extensions
@section Protocol Extensions

Protocols can be extended to provide method, initializer, subscript, and
computed property implementations to conforming types. This allows you
to define behavior on protocols themselves, rather than in each type's
individual conformance or in a global function.

For example, the @samp{RandomNumberGenerator} protocol can be extended to
provide a @samp{randomBool()} method, which uses the result of the required
@samp{random()} method to return a random @samp{Bool} value:

@example
extension RandomNumberGenerator @{
    func randomBool() -> Bool @{
        return random() > 0.5
    @}
@}
@end example

By creating an extension on the protocol, all conforming types
automatically gain this method implementation without any additional
modification.

@example
let generator = LinearCongruentialGenerator()
print("Here's a random number: \(generator.random())")
// Prints "Here's a random number: 0.3746499199817101"
print("And here's a random Boolean: \(generator.randomBool())")
// Prints "And here's a random Boolean: true"
@end example

Protocol extensions can add implementations to conforming types but
can't make a protocol extend or inherit from another protocol. Protocol
inheritance is always specified in the protocol declaration itself.

@menu
* Providing Default Implementations::
* Adding Constraints to Protocol Extensions::
@end menu

@node Providing Default Implementations
@subsection Providing Default Implementations

You can use protocol extensions to provide a default implementation to
any method or computed property requirement of that protocol. If a
conforming type provides its own implementation of a required method or
property, that implementation will be used instead of the one provided
by the extension.

Note

Protocol requirements with default implementations provided by
extensions are distinct from optional protocol requirements. Although
conforming types don't have to provide their own implementation of
either, requirements with default implementations can be called without
optional chaining.

For example, the @samp{PrettyTextRepresentable} protocol, which inherits the
@samp{TextRepresentable} protocol can provide a default implementation of its
required @samp{prettyTextualDescription} property to simply return the result
of accessing the @samp{textualDescription} property:

@example
extension PrettyTextRepresentable @{
    var prettyTextualDescription: String @{
        return textualDescription
    @}
@}
@end example

@node Adding Constraints to Protocol Extensions
@subsection Adding Constraints to Protocol Extensions

When you define a protocol extension, you can specify constraints that
conforming types must satisfy before the methods and properties of the
extension are available. You write these constraints after the name of
the protocol you're extending by writing a generic @samp{where} clause. For
more about generic @samp{where} clauses, see @ref{Generic Where Clauses, , Generic
Where Clauses}.

For example, you can define an extension to the @samp{Collection} protocol
that applies to any collection whose elements conform to the @samp{Equatable}
protocol. By constraining a collection's elements to the @samp{Equatable}
protocol, a part of the standard library, you can use the @samp{==} and @samp{!=}
operators to check for equality and inequality between two elements.

@example
extension Collection where Element: Equatable @{
    func allEqual() -> Bool @{
        for element in self @{
            if element != self.first @{
                return false
            @}
        @}
        return true
    @}
@}
@end example

The @samp{allEqual()} method returns @samp{true} only if all the elements in the
collection are equal.

Consider two arrays of integers, one where all the elements are the
same, and one where they aren't:

@example
let equalNumbers = [100, 100, 100, 100, 100]
let differentNumbers = [100, 100, 200, 100, 200]
@end example

Because arrays conform to @samp{Collection} and integers conform to
@samp{Equatable}, @samp{equalNumbers} and @samp{differentNumbers} can use the
@samp{allEqual()} method:

@example
print(equalNumbers.allEqual())
// Prints "true"
print(differentNumbers.allEqual())
// Prints "false"
@end example

Note

If a conforming type satisfies the requirements for multiple constrained
extensions that provide implementations for the same method or property,
Swift uses the implementation corresponding to the most specialized
constraints.

@node Generics 1
@chapter Generics

@emph{Generic code} enables you to write flexible, reusable functions and
types that can work with any type, subject to requirements that you
define. You can write code that avoids duplication and expresses its
intent in a clear, abstracted manner.

Generics are one of the most powerful features of Swift, and much of the
Swift standard library is built with generic code. In fact, you've been
using generics throughout the @emph{Language Guide}, even if you didn't
realize it. For example, Swift's @samp{Array} and @samp{Dictionary} types are both
generic collections. You can create an array that holds @samp{Int} values, or
an array that holds @samp{String} values, or indeed an array for any other
type that can be created in Swift. Similarly, you can create a
dictionary to store values of any specified type, and there are no
limitations on what that type can be.

@menu
* The Problem That Generics Solve::
* Generic Functions::
* Type Parameters::
* Naming Type Parameters::
* Generic Types::
* Extending a Generic Type::
* Type Constraints::
* Associated Types::
* Generic Where Clauses::
* Extensions with a Generic Where Clause::
* Associated Types with a Generic Where Clause::
* Generic Subscripts::
@end menu

@node The Problem That Generics Solve
@section The Problem That Generics Solve

Here's a standard, nongeneric function called @samp{swapTwoInts(_:_:)}, which
swaps two @samp{Int} values:

@example
func swapTwoInts(_ a: inout Int, _ b: inout Int) @{
    let temporaryA = a
    a = b
    b = temporaryA
@}
@end example

This function makes use of in-out parameters to swap the values of @samp{a}
and @samp{b}, as described in @ref{In-Out Parameters}.

The @samp{swapTwoInts(_:_:)} function swaps the original value of @samp{b} into
@samp{a}, and the original value of @samp{a} into @samp{b}. You can call this function
to swap the values in two @samp{Int} variables:

@example
var someInt = 3
var anotherInt = 107
swapTwoInts(&someInt, &anotherInt)
print("someInt is now \(someInt), and anotherInt is now \(anotherInt)")
// Prints "someInt is now 107, and anotherInt is now 3"
@end example

The @samp{swapTwoInts(_:_:)} function is useful, but it can only be used with
@samp{Int} values. If you want to swap two @samp{String} values, or two @samp{Double}
values, you have to write more functions, such as the
@samp{swapTwoStrings(_:_:)} and @samp{swapTwoDoubles(_:_:)} functions shown below:

@example
func swapTwoStrings(_ a: inout String, _ b: inout String) @{
    let temporaryA = a
    a = b
    b = temporaryA
@}

func swapTwoDoubles(_ a: inout Double, _ b: inout Double) @{
    let temporaryA = a
    a = b
    b = temporaryA
@}
@end example

You may have noticed that the bodies of the @samp{swapTwoInts(_:_:)},
@samp{swapTwoStrings(_:_:)}, and @samp{swapTwoDoubles(_:_:)} functions are
identical. The only difference is the type of the values that they
accept (@samp{Int}, @samp{String}, and @samp{Double}).

It's more useful, and considerably more flexible, to write a single
function that swaps two values of @emph{any} type. Generic code enables you
to write such a function. (A generic version of these functions is
defined below.)

Note

In all three functions, the types of @samp{a} and @samp{b} must be the same. If
@samp{a} and @samp{b} aren't of the same type, it isn't possible to swap their
values. Swift is a type-safe language, and doesn't allow (for example) a
variable of type @samp{String} and a variable of type @samp{Double} to swap values
with each other. Attempting to do so results in a compile-time error.

@node Generic Functions
@section Generic Functions

@emph{Generic functions} can work with any type. Here's a generic version of
the @samp{swapTwoInts(_:_:)} function from above, called
@samp{swapTwoValues(_:_:)}:

@example
func swapTwoValues<T>(_ a: inout T, _ b: inout T) @{
    let temporaryA = a
    a = b
    b = temporaryA
@}
@end example

The body of the @samp{swapTwoValues(_:_:)} function is identical to the body
of the @samp{swapTwoInts(_:_:)} function. However, the first line of
@samp{swapTwoValues(_:_:)} is slightly different from @samp{swapTwoInts(_:_:)}.
Here's how the first lines compare:

@example
func swapTwoInts(_ a: inout Int, _ b: inout Int)
func swapTwoValues<T>(_ a: inout T, _ b: inout T)
@end example

The generic version of the function uses a @emph{placeholder} type name
(called @samp{T}, in this case) instead of an @emph{actual} type name (such as
@samp{Int}, @samp{String}, or @samp{Double}). The placeholder type name doesn't say
anything about what @samp{T} must be, but it @emph{does} say that both @samp{a} and @samp{b}
must be of the same type @samp{T}, whatever @samp{T} represents. The actual type
to use in place of @samp{T} is determined each time the @samp{swapTwoValues(_:_:)}
function is called.

The other difference between a generic function and a nongeneric
function is that the generic function's name (@samp{swapTwoValues(_:_:)}) is
followed by the placeholder type name (@samp{T}) inside angle brackets
(@samp{<T>}). The brackets tell Swift that @samp{T} is a placeholder type name
within the @samp{swapTwoValues(_:_:)} function definition. Because @samp{T} is a
placeholder, Swift doesn't look for an actual type called @samp{T}.

The @samp{swapTwoValues(_:_:)} function can now be called in the same way as
@samp{swapTwoInts}, except that it can be passed two values of @emph{any} type, as
long as both of those values are of the same type as each other. Each
time @samp{swapTwoValues(_:_:)} is called, the type to use for @samp{T} is
inferred from the types of values passed to the function.

In the two examples below, @samp{T} is inferred to be @samp{Int} and @samp{String}
respectively:

@example
'var someInt = 3
var anotherInt = 107
swapTwoValues(&someInt, &anotherInt)
// someInt is now 107, and anotherInt is now 3

var someString = "hello"
var anotherString = "world"
swapTwoValues(&someString, &anotherString)
// someString is now "world", and anotherString is now "hello"
@end example

Note

The @samp{swapTwoValues(_:_:)} function defined above is inspired by a
generic function called @samp{swap}, which is part of the Swift standard
library, and is automatically made available for you to use in your
apps. If you need the behavior of the @samp{swapTwoValues(_:_:)} function in
your own code, you can use Swift's existing @samp{swap(_:_:)} function rather
than providing your own implementation.

@node Type Parameters
@section Type Parameters

In the @samp{swapTwoValues(_:_:)} example above, the placeholder type @samp{T} is
an example of a @emph{type parameter}. Type parameters specify and name a
placeholder type, and are written immediately after the function's name,
between a pair of matching angle brackets (such as @samp{<T>}).

Once you specify a type parameter, you can use it to define the type of
a function's parameters (such as the @samp{a} and @samp{b} parameters of the
@samp{swapTwoValues(_:_:)} function), or as the function's return type, or as
a type annotation within the body of the function. In each case, the
type parameter is replaced with an @emph{actual} type whenever the function
is called. (In the @samp{swapTwoValues(_:_:)} example above, @samp{T} was replaced
with @samp{Int} the first time the function was called, and was replaced with
@samp{String} the second time it was called.)

You can provide more than one type parameter by writing multiple type
parameter names within the angle brackets, separated by commas.

@node Naming Type Parameters
@section Naming Type Parameters

In most cases, type parameters have descriptive names, such as @samp{Key} and
@samp{Value} in @samp{Dictionary<Key, Value>} and @samp{Element} in @samp{Array<Element>},
which tells the reader about the relationship between the type parameter
and the generic type or function it's used in. However, when there isn't
a meaningful relationship between them, it's traditional to name them
using single letters such as @samp{T}, @samp{U}, and @samp{V}, such as @samp{T} in the
@samp{swapTwoValues(_:_:)} function above.

Note

Always give type parameters upper camel case names (such as @samp{T} and
@samp{MyTypeParameter}) to indicate that they're a placeholder for a @emph{type},
not a value.

@node Generic Types
@section Generic Types

In addition to generic functions, Swift enables you to define your own
@emph{generic types}. These are custom classes, structures, and enumerations
that can work with @emph{any} type, in a similar way to @samp{Array} and
@samp{Dictionary}.

This section shows you how to write a generic collection type called
@samp{Stack}. A stack is an ordered set of values, similar to an array, but
with a more restricted set of operations than Swift's @samp{Array} type. An
array allows new items to be inserted and removed at any location in the
array. A stack, however, allows new items to be appended only to the end
of the collection (known as @emph{pushing} a new value on to the stack).
Similarly, a stack allows items to be removed only from the end of the
collection (known as @emph{popping} a value off the stack).

Note

The concept of a stack is used by the @samp{UINavigationController} class to
model the view controllers in its navigation hierarchy. You call the
@samp{UINavigationController} class @samp{pushViewController(_:animated:)} method
to add (or push) a view controller on to the navigation stack, and its
@samp{popViewControllerAnimated(_:)} method to remove (or pop) a view
controller from the navigation stack. A stack is a useful collection
model whenever you need a strict “last in, first out” approach to
managing a collection.

The illustration below shows the push and pop behavior for a stack:

@image{_images/stackPushPop_2x,,,,png}

@enumerate
@item
There are currently three values on the stack.

@item
A fourth value is pushed onto the top of the stack.

@item
The stack now holds four values, with the most recent one at the top.

@item
The top item in the stack is popped.

@item
After popping a value, the stack once again holds three values.
@end enumerate

Here's how to write a nongeneric version of a stack, in this case for a
stack of @samp{Int} values:

@example
struct IntStack @{
    var items = [Int]()
    mutating func push(_ item: Int) @{
        items.append(item)
    @}
    mutating func pop() -> Int @{
        return items.removeLast()
    @}
@}
@end example

This structure uses an @samp{Array} property called @samp{items} to store the
values in the stack. @samp{Stack} provides two methods, @samp{push} and @samp{pop}, to
push and pop values on and off the stack. These methods are marked as
@samp{mutating}, because they need to modify (or @emph{mutate}) the structure's
@samp{items} array.

The @samp{IntStack} type shown above can only be used with @samp{Int} values,
however. It would be much more useful to define a @emph{generic} @samp{Stack}
class, that can manage a stack of @emph{any} type of value.

Here's a generic version of the same code:

@example
struct Stack<Element> @{
    var items = [Element]()
    mutating func push(_ item: Element) @{
        items.append(item)
    @}
    mutating func pop() -> Element @{
        return items.removeLast()
    @}
@}
@end example

Note how the generic version of @samp{Stack} is essentially the same as the
nongeneric version, but with a type parameter called @samp{Element} instead
of an actual type of @samp{Int}. This type parameter is written within a pair
of angle brackets (@samp{<Element>}) immediately after the structure's name.

@samp{Element} defines a placeholder name for a type to be provided later.
This future type can be referred to as @samp{Element} anywhere within the
structure's definition. In this case, @samp{Element} is used as a placeholder
in three places:

@itemize
@item
To create a property called @samp{items}, which is initialized with an
empty array of values of type @samp{Element}

@item
To specify that the @samp{push(_:)} method has a single parameter called
@samp{item}, which must be of type @samp{Element}

@item
To specify that the value returned by the @samp{pop()} method will be a
value of type @samp{Element}
@end itemize

Because it's a generic type, @samp{Stack} can be used to create a stack of
@emph{any} valid type in Swift, in a similar manner to @samp{Array} and
@samp{Dictionary}.

You create a new @samp{Stack} instance by writing the type to be stored in
the stack within angle brackets. For example, to create a new stack of
strings, you write @samp{Stack<String>()}:

@example
var stackOfStrings = Stack<String>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stackOfStrings.push("tres")
stackOfStrings.push("cuatro")
// the stack now contains 4 strings
@end example

Here's how @samp{stackOfStrings} looks after pushing these four values on to
the stack:

@image{_images/stackPushedFourStrings_2x,,,,png}
Popping a value from the stack removes and returns the top value,
@samp{"cuatro"}:

@example
let fromTheTop = stackOfStrings.pop()
// fromTheTop is equal to "cuatro", and the stack now contains 3 strings
@end example

Here's how the stack looks after popping its top value:

@image{_images/stackPoppedOneString_2x,,,,png}

@node Extending a Generic Type
@section Extending a Generic Type

When you extend a generic type, you don't provide a type parameter list
as part of the extension's definition. Instead, the type parameter list
from the @emph{original} type definition is available within the body of the
extension, and the original type parameter names are used to refer to
the type parameters from the original definition.

The following example extends the generic @samp{Stack} type to add a
read-only computed property called @samp{topItem}, which returns the top item
on the stack without popping it from the stack:

@example
extension Stack @{
    var topItem: Element? @{
        return items.isEmpty ? nil : items[items.count - 1]
    @}
@}
@end example

The @samp{topItem} property returns an optional value of type @samp{Element}. If
the stack is empty, @samp{topItem} returns @samp{nil}; if the stack isn't empty,
@samp{topItem} returns the final item in the @samp{items} array.

Note that this extension doesn't define a type parameter list. Instead,
the @samp{Stack} type's existing type parameter name, @samp{Element}, is used
within the extension to indicate the optional type of the @samp{topItem}
computed property.

The @samp{topItem} computed property can now be used with any @samp{Stack}
instance to access and query its top item without removing it.

@example
if let topItem = stackOfStrings.topItem @{
    print("The top item on the stack is \(topItem).")
@}
// Prints "The top item on the stack is tres."
@end example

Extensions of a generic type can also include requirements that
instances of the extended type must satisfy in order to gain the new
functionality, as discussed in @ref{Extensions with a Generic Where Clause, , Extensions with
a Generic Where Clause} below.

@node Type Constraints
@section Type Constraints

The @samp{swapTwoValues(_:_:)} function and the @samp{Stack} type can work with
any type. However, it's sometimes useful to enforce certain @emph{type
constraints} on the types that can be used with generic functions and
generic types. Type constraints specify that a type parameter must
inherit from a specific class, or conform to a particular protocol or
protocol composition.

For example, Swift's @samp{Dictionary} type places a limitation on the types
that can be used as keys for a dictionary. As described in
@ref{Dictionaries}, the type of a
dictionary's keys must be @emph{hashable}. That is, it must provide a way to
make itself uniquely representable. @samp{Dictionary} needs its keys to be
hashable so that it can check whether it already contains a value for a
particular key. Without this requirement, @samp{Dictionary} could not tell
whether it should insert or replace a value for a particular key, nor
would it be able to find a value for a given key that is already in the
dictionary.

This requirement is enforced by a type constraint on the key type for
@samp{Dictionary}, which specifies that the key type must conform to the
@samp{Hashable} protocol, a special protocol defined in the Swift standard
library. All of Swift's basic types (such as @samp{String}, @samp{Int}, @samp{Double},
and @samp{Bool}) are hashable by default.

You can define your own type constraints when creating custom generic
types, and these constraints provide much of the power of generic
programming. Abstract concepts like @samp{Hashable} characterize types in
terms of their conceptual characteristics, rather than their concrete
type.

@menu
* Type Constraint Syntax::
* Type Constraints in Action::
@end menu

@node Type Constraint Syntax
@subsection Type Constraint Syntax

You write type constraints by placing a single class or protocol
constraint after a type parameter's name, separated by a colon, as part
of the type parameter list. The basic syntax for type constraints on a
generic function is shown below (although the syntax is the same for
generic types):

@example
func someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) @{
    // function body goes here
@}
@end example

The hypothetical function above has two type parameters. The first type
parameter, @samp{T}, has a type constraint that requires @samp{T} to be a subclass
of @samp{SomeClass}. The second type parameter, @samp{U}, has a type constraint
that requires @samp{U} to conform to the protocol @samp{SomeProtocol}.

@node Type Constraints in Action
@subsection Type Constraints in Action

Here's a nongeneric function called @samp{findIndex(ofString:in:)}, which is
given a @samp{String} value to find and an array of @samp{String} values within
which to find it. The @samp{findIndex(ofString:in:)} function returns an
optional @samp{Int} value, which will be the index of the first matching
string in the array if it's found, or @samp{nil} if the string can't be
found:

@example
func findIndex(ofString valueToFind: String, in array: [String]) -> Int? @{
    for (index, value) in array.enumerated() @{
        if value == valueToFind @{
            return index
        @}
    @}
    return nil
@}
@end example

The @samp{findIndex(ofString:in:)} function can be used to find a string
value in an array of strings:

@example
let strings = ["cat", "dog", "llama", "parakeet", "terrapin"]
if let foundIndex = findIndex(ofString: "llama", in: strings) @{
    print("The index of llama is \(foundIndex)")
@}
// Prints "The index of llama is 2"
@end example

The principle of finding the index of a value in an array isn't useful
only for strings, however. You can write the same functionality as a
generic function by replacing any mention of strings with values of some
type @samp{T} instead.

Here's how you might expect a generic version of
@samp{findIndex(ofString:in:)}, called @samp{findIndex(of:in:)}, to be written.
Note that the return type of this function is still @samp{Int?}, because the
function returns an optional index number, not an optional value from
the array. Be warned, though---this function doesn't compile, for
reasons explained after the example:

@example
func findIndex<T>(of valueToFind: T, in array:[T]) -> Int? @{
    for (index, value) in array.enumerated() @{
        if value == valueToFind @{
            return index
        @}
    @}
    return nil
@}
@end example

This function doesn't compile as written above. The problem lies with
the equality check, “=if value @samp{= valueToFind=”. Not every type in Swift
can be compared with the equal to operator (===}). If you create your
own class or structure to represent a complex data model, for example,
then the meaning of “equal to” for that class or structure isn't
something that Swift can guess for you. Because of this, it isn't
possible to guarantee that this code will work for @emph{every} possible type
@samp{T}, and an appropriate error is reported when you try to compile the
code.

All is not lost, however. The Swift standard library defines a protocol
called @samp{Equatable}, which requires any conforming type to implement the
equal to operator (@samp{==}) and the not equal to operator (@samp{!=}) to compare
any two values of that type. All of Swift's standard types automatically
support the @samp{Equatable} protocol.

Any type that is @samp{Equatable} can be used safely with the
@samp{findIndex(of:in:)} function, because it's guaranteed to support the
equal to operator. To express this fact, you write a type constraint of
@samp{Equatable} as part of the type parameter's definition when you define
the function:

@example
func findIndex<T: Equatable>(of valueToFind: T, in array:[T]) -> Int? @{
    for (index, value) in array.enumerated() @{
        if value == valueToFind @{
            return index
        @}
    @}
    return nil
@}
@end example

The single type parameter for @samp{findIndex(of:in:)} is written as
@samp{T: Equatable}, which means “any type @samp{T} that conforms to the
@samp{Equatable} protocol.”

The @samp{findIndex(of:in:)} function now compiles successfully and can be
used with any type that is @samp{Equatable}, such as @samp{Double} or @samp{String}:

@example
let doubleIndex = findIndex(of: 9.3, in: [3.14159, 0.1, 0.25])
// doubleIndex is an optional Int with no value, because 9.3 isn't in the array
let stringIndex = findIndex(of: "Andrea", in: ["Mike", "Malcolm", "Andrea"])
// stringIndex is an optional Int containing a value of 2
@end example

@node Associated Types
@section Associated Types

@findex associatedtype

When defining a protocol, it's sometimes useful to declare one or more
associated types as part of the protocol's definition. An @samp{associated
type} gives a placeholder name to a type that is used as part of the
protocol. The actual type to use for that associated type isn't
specified until the protocol is adopted. Associated types are specified
with the @samp{associatedtype} keyword.

@menu
* Associated Types in Action::
* Extending an Existing Type to Specify an Associated Type::
* Adding Constraints to an Associated Type::
* Using a Protocol in Its Associated Type's Constraints::
@end menu

@node Associated Types in Action
@subsection Associated Types in Action

Here's an example of a protocol called @samp{Container}, which declares an
associated type called @samp{Item}:

@example
protocol Container @{
    associatedtype Item
    mutating func append(_ item: Item)
    var count: Int @{ get @}
    subscript(i: Int) -> Item @{ get @}
@}
@end example

The @samp{Container} protocol defines three required capabilities that any
container must provide:

@itemize
@item
It must be possible to add a new item to the container with an
@samp{append(_:)} method.

@item
It must be possible to access a count of the items in the container
through a @samp{count} property that returns an @samp{Int} value.

@item
It must be possible to retrieve each item in the container with a
subscript that takes an @samp{Int} index value.
@end itemize

This protocol doesn't specify how the items in the container should be
stored or what type they're allowed to be. The protocol only specifies
the three bits of functionality that any type must provide in order to
be considered a @samp{Container}. A conforming type can provide additional
functionality, as long as it satisfies these three requirements.

Any type that conforms to the @samp{Container} protocol must be able to
specify the type of values it stores. Specifically, it must ensure that
only items of the right type are added to the container, and it must be
clear about the type of the items returned by its subscript.

To define these requirements, the @samp{Container} protocol needs a way to
refer to the type of the elements that a container will hold, without
knowing what that type is for a specific container. The @samp{Container}
protocol needs to specify that any value passed to the @samp{append(_:)}
method must have the same type as the container's element type, and that
the value returned by the container's subscript will be of the same type
as the container's element type.

To achieve this, the @samp{Container} protocol declares an associated type
called @samp{Item}, written as @samp{associatedtype Item}. The protocol doesn't
define what @samp{Item} is---that information is left for any conforming type
to provide. Nonetheless, the @samp{Item} alias provides a way to refer to the
type of the items in a @samp{Container}, and to define a type for use with
the @samp{append(_:)} method and subscript, to ensure that the expected
behavior of any @samp{Container} is enforced.

Here's a version of the nongeneric @samp{IntStack} type from
@ref{Generic Types} above, adapted to conform to
the @samp{Container} protocol:

@example
struct IntStack: Container @{
    // original IntStack implementation
    var items = [Int]()
    mutating func push(_ item: Int) @{
        items.append(item)
    @}
    mutating func pop() -> Int @{
        return items.removeLast()
    @}
    // conformance to the Container protocol
    typealias Item = Int
    mutating func append(_ item: Int) @{
        self.push(item)
    @}
    var count: Int @{
        return items.count
    @}
    subscript(i: Int) -> Int @{
        return items[i]
    @}
@}
@end example

The @samp{IntStack} type implements all three of the @samp{Container} protocol's
requirements, and in each case wraps part of the @samp{IntStack} type's
existing functionality to satisfy these requirements.

Moreover, @samp{IntStack} specifies that for this implementation of
@samp{Container}, the appropriate @samp{Item} to use is a type of @samp{Int}. The
definition of @samp{typealias Item = Int} turns the abstract type of @samp{Item}
into a concrete type of @samp{Int} for this implementation of the @samp{Container}
protocol.

Thanks to Swift's type inference, you don't actually need to declare a
concrete @samp{Item} of @samp{Int} as part of the definition of @samp{IntStack}.
Because @samp{IntStack} conforms to all of the requirements of the
@samp{Container} protocol, Swift can infer the appropriate @samp{Item} to use,
simply by looking at the type of the @samp{append(_:)} method's @samp{item}
parameter and the return type of the subscript. Indeed, if you delete
the @samp{typealias Item = Int} line from the code above, everything still
works, because it's clear what type should be used for @samp{Item}.

You can also make the generic @samp{Stack} type conform to the @samp{Container}
protocol:

@example
struct Stack<Element>: Container @{
    // original Stack<Element> implementation
    var items = [Element]()
    mutating func push(_ item: Element) @{
        items.append(item)
    @}
    mutating func pop() -> Element @{
        return items.removeLast()
    @}
    // conformance to the Container protocol
    mutating func append(_ item: Element) @{
        self.push(item)
    @}
    var count: Int @{
        return items.count
    @}
    subscript(i: Int) -> Element @{
        return items[i]
    @}
@}
@end example

This time, the type parameter @samp{Element} is used as the type of the
@samp{append(_:)} method's @samp{item} parameter and the return type of the
subscript. Swift can therefore infer that @samp{Element} is the appropriate
type to use as the @samp{Item} for this particular container.

@node Extending an Existing Type to Specify an Associated Type
@subsection Extending an Existing Type to Specify an Associated Type

You can extend an existing type to add conformance to a protocol, as
described in @ref{Adding Protocol Conformance with an Extension, , Adding Protocol Conformance with
an Extension}. This includes a protocol with an associated type.

Swift's @samp{Array} type already provides an @samp{append(_:)} method, a @samp{count}
property, and a subscript with an @samp{Int} index to retrieve its elements.
These three capabilities match the requirements of the @samp{Container}
protocol. This means that you can extend @samp{Array} to conform to the
@samp{Container} protocol simply by declaring that @samp{Array} adopts the
protocol. You do this with an empty extension, as described in
@ref{Declaring Protocol Adoption with an Extension, , Declaring Protocol Adoption with an
Extension}:

@example
extension Array: Container @{@}
@end example

Array's existing @samp{append(_:)} method and subscript enable Swift to infer
the appropriate type to use for @samp{Item}, just as for the generic @samp{Stack}
type above. After defining this extension, you can use any @samp{Array} as a
@samp{Container}.

@node Adding Constraints to an Associated Type
@subsection Adding Constraints to an Associated Type

You can add type constraints to an associated type in a protocol to
require that conforming types satisfy those constraints. For example,
the following code defines a version of @samp{Container} that requires the
items in the container to be equatable.

@example
protocol Container @{
    associatedtype Item: Equatable
    mutating func append(_ item: Item)
    var count: Int @{ get @}
    subscript(i: Int) -> Item @{ get @}
@}
@end example

To conform to this version of @samp{Container}, the container's @samp{Item} type
has to conform to the @samp{Equatable} protocol.

@node Using a Protocol in Its Associated Type's Constraints
@subsection Using a Protocol in Its Associated Type's Constraints

A protocol can appear as part of its own requirements. For example,
here's a protocol that refines the @samp{Container} protocol, adding the
requirement of a @samp{suffix(_:)} method. The @samp{suffix(_:)} method returns a
given number of elements from the end of the container, storing them in
an instance of the @samp{Suffix} type.

@example
protocol SuffixableContainer: Container @{
    associatedtype Suffix: SuffixableContainer where Suffix.Item == Item
    func suffix(_ size: Int) -> Suffix
@}
@end example

In this protocol, @samp{Suffix} is an associated type, like the @samp{Item} type
in the @samp{Container} example above. @samp{Suffix} has two constraints: It must
conform to the @samp{SuffixableContainer} protocol (the protocol currently
being defined), and its @samp{Item} type must be the same as the container's
@samp{Item} type. The constraint on @samp{Item} is a generic @samp{where} clause, which
is discussed in @ref{Associated Types with a Generic Where Clause, , Associated Types with a Generic
Where Clause} below.

Here's an extension of the @samp{Stack} type from
@ref{Strong Reference Cycles for Closures, , Strong Reference Cycles for
Closures} above that adds conformance to the @samp{SuffixableContainer}
protocol:

@example
extension Stack: SuffixableContainer @{
    func suffix(_ size: Int) -> Stack @{
        var result = Stack()
        for index in (count-size)..<count @{
            result.append(self[index])
        @}
        return result
    @}
    // Inferred that Suffix is Stack.
@}
var stackOfInts = Stack<Int>()
stackOfInts.append(10)
stackOfInts.append(20)
stackOfInts.append(30)
let suffix = stackOfInts.suffix(2)
// suffix contains 20 and 30
@end example

In the example above, the @samp{Suffix} associated type for @samp{Stack} is also
@samp{Stack}, so the suffix operation on @samp{Stack} returns another @samp{Stack}.
Alternatively, a type that conforms to @samp{SuffixableContainer} can have a
@samp{Suffix} type that's different from itself---meaning the suffix
operation can return a different type. For example, here's an extension
to the nongeneric @samp{IntStack} type that adds @samp{SuffixableContainer}
conformance, using @samp{Stack<Int>} as its suffix type instead of
@samp{IntStack}:

@example
extension IntStack: SuffixableContainer @{
    func suffix(_ size: Int) -> Stack<Int> @{
        var result = Stack<Int>()
        for index in (count-size)..<count @{
            result.append(self[index])
        @}
        return result
    @}
    // Inferred that Suffix is Stack<Int>.
@}
@end example

@node Generic Where Clauses
@section Generic Where Clauses

Type constraints, as described in @ref{Type Constraints, , Type
Constraints}, enable you to define requirements on the type parameters
associated with a generic function, subscript, or type.

It can also be useful to define requirements for associated types. You
do this by defining a @emph{generic where clause}. A generic @samp{where} clause
enables you to require that an associated type must conform to a certain
protocol, or that certain type parameters and associated types must be
the same. A generic @samp{where} clause starts with the @samp{where} keyword,
followed by constraints for associated types or equality relationships
between types and associated types. You write a generic @samp{where} clause
right before the opening curly brace of a type or function's body.

The example below defines a generic function called @samp{allItemsMatch},
which checks to see if two @samp{Container} instances contain the same items
in the same order. The function returns a Boolean value of @samp{true} if all
items match and a value of @samp{false} if they don't.

The two containers to be checked don't have to be the same type of
container (although they can be), but they do have to hold the same type
of items. This requirement is expressed through a combination of type
constraints and a generic @samp{where} clause:

@example
func allItemsMatch<C1: Container, C2: Container>
  (_ someContainer: C1, _ anotherContainer: C2) -> Bool
  where C1.Item == C2.Item, C1.Item: Equatable @{

    // Check that both containers contain the same number of items.
    if someContainer.count != anotherContainer.count @{
        return false
    @}

    // Check each pair of items to see if they're equivalent.
    for i in 0..<someContainer.count @{
        if someContainer[i] != anotherContainer[i] @{
            return false
        @}
    @}

    // All items match, so return true.
    return true
@}
@end example

This function takes two arguments called @samp{someContainer} and
@samp{anotherContainer}. The @samp{someContainer} argument is of type @samp{C1}, and
the @samp{anotherContainer} argument is of type @samp{C2}. Both @samp{C1} and @samp{C2} are
type parameters for two container types to be determined when the
function is called.

The following requirements are placed on the function's two type
parameters:

@itemize
@item
@samp{C1} must conform to the @samp{Container} protocol (written as
@samp{C1: Container}).

@item
@samp{C2} must also conform to the @samp{Container} protocol (written as
@samp{C2: Container}).

@item
The @samp{Item} for @samp{C1} must be the same as the @samp{Item} for @samp{C2} (written
as @samp{C1.Item =} C2.Item=).

@item
The @samp{Item} for @samp{C1} must conform to the @samp{Equatable} protocol (written
as @samp{C1.Item: Equatable}).
@end itemize

The first and second requirements are defined in the function's type
parameter list, and the third and fourth requirements are defined in the
function's generic @samp{where} clause.

These requirements mean:

@itemize
@item
@samp{someContainer} is a container of type @samp{C1}.

@item
@samp{anotherContainer} is a container of type @samp{C2}.

@item
@samp{someContainer} and @samp{anotherContainer} contain the same type of items.

@item
The items in @samp{someContainer} can be checked with the not equal
operator (@samp{!=}) to see if they're different from each other.
@end itemize

The third and fourth requirements combine to mean that the items in
@samp{anotherContainer} can @emph{also} be checked with the @samp{!=} operator, because
they're exactly the same type as the items in @samp{someContainer}.

These requirements enable the @samp{allItemsMatch(_:_:)} function to compare
the two containers, even if they're of a different container type.

The @samp{allItemsMatch(_:_:)} function starts by checking that both
containers contain the same number of items. If they contain a different
number of items, there's no way that they can match, and the function
returns @samp{false}.

After making this check, the function iterates over all of the items in
@samp{someContainer} with a @samp{for}-@samp{in} loop and the half-open range operator
(@samp{..<}). For each item, the function checks whether the item from
@samp{someContainer} isn't equal to the corresponding item in
@samp{anotherContainer}. If the two items aren't equal, then the two
containers don't match, and the function returns @samp{false}.

If the loop finishes without finding a mismatch, the two containers
match, and the function returns @samp{true}.

Here's how the @samp{allItemsMatch(_:_:)} function looks in action:

@example
var stackOfStrings = Stack<String>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stackOfStrings.push("tres")

var arrayOfStrings = ["uno", "dos", "tres"]

if allItemsMatch(stackOfStrings, arrayOfStrings) @{
    print("All items match.")
@} else @{
    print("Not all items match.")
@}
// Prints "All items match."
@end example

The example above creates a @samp{Stack} instance to store @samp{String} values,
and pushes three strings onto the stack. The example also creates an
@samp{Array} instance initialized with an array literal containing the same
three strings as the stack. Even though the stack and the array are of a
different type, they both conform to the @samp{Container} protocol, and both
contain the same type of values. You can therefore call the
@samp{allItemsMatch(_:_:)} function with these two containers as its
arguments. In the example above, the @samp{allItemsMatch(_:_:)} function
correctly reports that all of the items in the two containers match.

@node Extensions with a Generic Where Clause
@section Extensions with a Generic Where Clause

You can also use a generic @samp{where} clause as part of an extension. The
example below extends the generic @samp{Stack} structure from the previous
examples to add an @samp{isTop(_:)} method.

@example
extension Stack where Element: Equatable @{
    func isTop(_ item: Element) -> Bool @{
        guard let topItem = items.last else @{
            return false
        @}
        return topItem == item
    @}
@}
@end example

This new @samp{isTop(_:)} method first checks that the stack isn't empty, and
then compares the given item against the stack's topmost item. If you
tried to do this without a generic @samp{where} clause, you would have a
problem: The implementation of @samp{isTop(_:)} uses the @samp{==} operator, but
the definition of @samp{Stack} doesn't require its items to be equatable, so
using the @samp{==} operator results in a compile-time error. Using a generic
@samp{where} clause lets you add a new requirement to the extension, so that
the extension adds the @samp{isTop(_:)} method only when the items in the
stack are equatable.

Here's how the @samp{isTop(_:)} method looks in action:

@example
if stackOfStrings.isTop("tres") @{
    print("Top element is tres.")
@} else @{
    print("Top element is something else.")
@}
// Prints "Top element is tres."
@end example

If you try to call the @samp{isTop(_:)} method on a stack whose elements
aren't equatable, you'll get a compile-time error.

@example
struct NotEquatable @{ @}
var notEquatableStack = Stack<NotEquatable>()
let notEquatableValue = NotEquatable()
notEquatableStack.push(notEquatableValue)
notEquatableStack.isTop(notEquatableValue) // Error
@end example

You can use a generic @samp{where} clause with extensions to a protocol. The
example below extends the @samp{Container} protocol from the previous
examples to add a @samp{startsWith(_:)} method.

@example
extension Container where Item: Equatable @{
    func startsWith(_ item: Item) -> Bool @{
        return count >= 1 && self[0] == item
    @}
@}
@end example

The @samp{startsWith(_:)} method first makes sure that the container has at
least one item, and then it checks whether the first item in the
container matches the given item. This new @samp{startsWith(_:)} method can
be used with any type that conforms to the @samp{Container} protocol,
including the stacks and arrays used above, as long as the container's
items are equatable.

@example
if [9, 9, 9].startsWith(42) @{
    print("Starts with 42.")
@} else @{
    print("Starts with something else.")
@}
// Prints "Starts with something else."
@end example

The generic @samp{where} clause in the example above requires @samp{Item} to
conform to a protocol, but you can also write a generic @samp{where} clauses
that require @samp{Item} to be a specific type. For example:

@example
extension Container where Item == Double @{
    func average() -> Double @{
        var sum = 0.0
        for index in 0..<count @{
            sum += self[index]
        @}
        return sum / Double(count)
    @}
@}
print([1260.0, 1200.0, 98.6, 37.0].average())
// Prints "648.9"
@end example

This example adds an @samp{average()} method to containers whose @samp{Item} type
is @samp{Double}. It iterates over the items in the container to add them up,
and divides by the container's count to compute the average. It
explicitly converts the count from @samp{Int} to @samp{Double} to be able to do
floating-point division.

You can include multiple requirements in a generic @samp{where} clause that
is part of an extension, just like you can for a generic @samp{where} clause
that you write elsewhere. Separate each requirement in the list with a
comma.

@node Associated Types with a Generic Where Clause
@section Associated Types with a Generic Where Clause

You can include a generic @samp{where} clause on an associated type. For
example, suppose you want to make a version of @samp{Container} that includes
an iterator, like what the @samp{Sequence} protocol uses in the standard
library. Here's how you write that:

@example
protocol Container @{
    associatedtype Item
    mutating func append(_ item: Item)
    var count: Int @{ get @}
    subscript(i: Int) -> Item @{ get @}

    associatedtype Iterator: IteratorProtocol where Iterator.Element == Item
    func makeIterator() -> Iterator
@}
@end example

The generic @samp{where} clause on @samp{Iterator} requires that the iterator must
traverse over elements of the same item type as the container's items,
regardless of the iterator's type. The @samp{makeIterator()} function
provides access to a container's iterator.

For a protocol that inherits from another protocol, you add a constraint
to an inherited associated type by including the generic @samp{where} clause
in the protocol declaration. For example, the following code declares a
@samp{ComparableContainer} protocol that requires @samp{Item} to conform to
@samp{Comparable}:

@example
protocol ComparableContainer: Container where Item: Comparable @{ @}
@end example

@node Generic Subscripts
@section Generic Subscripts

Subscripts can be generic, and they can include generic @samp{where} clauses.
You write the placeholder type name inside angle brackets after
@samp{subscript}, and you write a generic @samp{where} clause right before the
opening curly brace of the subscript's body. For example:

@example
extension Container @{
    subscript<Indices: Sequence>(indices: Indices) -> [Item]
      where Indices.Iterator.Element == Int @{
        var result = [Item]()
        for index in indices @{
            result.append(self[index])
        @}
        return result
    @}
@}
@end example

This extension to the @samp{Container} protocol adds a subscript that takes a
sequence of indices and returns an array containing the items at each
given index. This generic subscript is constrained as follows:

@itemize
@item
The generic parameter @samp{Indices} in angle brackets has to be a type
that conforms to the @samp{Sequence} protocol from the standard library.

@item
The subscript takes a single parameter, @samp{indices}, which is an
instance of that @samp{Indices} type.

@item
The generic @samp{where} clause requires that the iterator for the sequence
must traverse over elements of type @samp{Int}. This ensures that the
indices in the sequence are the same type as the indices used for a
container.
@end itemize

Taken together, these constraints mean that the value passed for the
@samp{indices} parameter is a sequence of integers.

@node Automatic Reference Counting
@chapter Automatic Reference Counting

Swift uses @emph{Automatic Reference Counting} (ARC) to track and manage your
app's memory usage. In most cases, this means that memory management
“just works” in Swift, and you do not need to think about memory
management yourself. ARC automatically frees up the memory used by class
instances when those instances are no longer needed.

However, in a few cases ARC requires more information about the
relationships between parts of your code in order to manage memory for
you. This chapter describes those situations and shows how you enable
ARC to manage all of your app's memory. Using ARC in Swift is very
similar to the approach described in
@uref{https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html, Transitioning
to ARC Release Notes}
[@uref{https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html}]
for using ARC with Objective-C.

Reference counting applies only to instances of classes. Structures and
enumerations are value types, not reference types, and are not stored
and passed by reference.

@menu
* How ARC Works::
* ARC in Action::
* Strong Reference Cycles Between Class Instances::
* Resolving Strong Reference Cycles Between Class Instances::
* Strong Reference Cycles for Closures::
* Resolving Strong Reference Cycles for Closures::
@end menu

@node How ARC Works
@section How ARC Works

Every time you create a new instance of a class, ARC allocates a chunk
of memory to store information about that instance. This memory holds
information about the type of the instance, together with the values of
any stored properties associated with that instance.

Additionally, when an instance is no longer needed, ARC frees up the
memory used by that instance so that the memory can be used for other
purposes instead. This ensures that class instances do not take up space
in memory when they are no longer needed.

However, if ARC were to deallocate an instance that was still in use, it
would no longer be possible to access that instance's properties, or
call that instance's methods. Indeed, if you tried to access the
instance, your app would most likely crash.

To make sure that instances don't disappear while they are still needed,
ARC tracks how many properties, constants, and variables are currently
referring to each class instance. ARC will not deallocate an instance as
long as at least one active reference to that instance still exists.

To make this possible, whenever you assign a class instance to a
property, constant, or variable, that property, constant, or variable
makes a @emph{strong reference} to the instance. The reference is called a
“strong” reference because it keeps a firm hold on that instance, and
does not allow it to be deallocated for as long as that strong reference
remains.

@node ARC in Action
@section ARC in Action

Here's an example of how Automatic Reference Counting works. This
example starts with a simple class called @samp{Person}, which defines a
stored constant property called @samp{name}:

@example
class Person @{
    let name: String
    init(name: String) @{
        self.name = name
        print("\(name) is being initialized")
    @}
    deinit @{
        print("\(name) is being deinitialized")
    @}
@}
@end example

The @samp{Person} class has an initializer that sets the instance's @samp{name}
property and prints a message to indicate that initialization is
underway. The @samp{Person} class also has a deinitializer that prints a
message when an instance of the class is deallocated.

The next code snippet defines three variables of type @samp{Person?}, which
are used to set up multiple references to a new @samp{Person} instance in
subsequent code snippets. Because these variables are of an optional
type (@samp{Person?}, not @samp{Person}), they are automatically initialized with
a value of @samp{nil}, and do not currently reference a @samp{Person} instance.

@example
var reference1: Person?
var reference2: Person?
var reference3: Person?
@end example

You can now create a new @samp{Person} instance and assign it to one of these
three variables:

@example
reference1 = Person(name: "John Appleseed")
// Prints "John Appleseed is being initialized"
@end example

Note that the message @samp{"John Appleseed is being initialized"} is printed
at the point that you call the @samp{Person} class's initializer. This
confirms that initialization has taken place.

Because the new @samp{Person} instance has been assigned to the @samp{reference1}
variable, there is now a strong reference from @samp{reference1} to the new
@samp{Person} instance. Because there is at least one strong reference, ARC
makes sure that this @samp{Person} is kept in memory and is not deallocated.

If you assign the same @samp{Person} instance to two more variables, two more
strong references to that instance are established:

@example
reference2 = reference1
reference3 = reference1
@end example

There are now @emph{three} strong references to this single @samp{Person}
instance.

If you break two of these strong references (including the original
reference) by assigning @samp{nil} to two of the variables, a single strong
reference remains, and the @samp{Person} instance is not deallocated:

@example
reference1 = nil
reference2 = nil
@end example

ARC does not deallocate the @samp{Person} instance until the third and final
strong reference is broken, at which point it's clear that you are no
longer using the @samp{Person} instance:

@example
reference3 = nil
// Prints "John Appleseed is being deinitialized"
@end example

@node Strong Reference Cycles Between Class Instances
@section Strong Reference Cycles Between Class Instances

In the examples above, ARC is able to track the number of references to
the new @samp{Person} instance you create and to deallocate that @samp{Person}
instance when it's no longer needed.

However, it's possible to write code in which an instance of a class
@emph{never} gets to a point where it has zero strong references. This can
happen if two class instances hold a strong reference to each other,
such that each instance keeps the other alive. This is known as a
@emph{strong reference cycle}.

You resolve strong reference cycles by defining some of the
relationships between classes as weak or unowned references instead of
as strong references. This process is described in
@ref{Resolving Strong Reference Cycles Between Class Instances, , Resolving Strong Reference
Cycles Between Class Instances}. However, before you learn how to
resolve a strong reference cycle, it's useful to understand how such a
cycle is caused.

Here's an example of how a strong reference cycle can be created by
accident. This example defines two classes called @samp{Person} and
@samp{Apartment}, which model a block of apartments and its residents:

@example
class Person @{
    let name: String
    init(name: String) @{ self.name = name @}
    var apartment: Apartment?
    deinit @{ print("\(name) is being deinitialized") @}
@}

class Apartment @{
    let unit: String
    init(unit: String) @{ self.unit = unit @}
    var tenant: Person?
    deinit @{ print("Apartment \(unit) is being deinitialized") @}
@}
@end example

Every @samp{Person} instance has a @samp{name} property of type @samp{String} and an
optional @samp{apartment} property that is initially @samp{nil}. The @samp{apartment}
property is optional, because a person may not always have an apartment.

Similarly, every @samp{Apartment} instance has a @samp{unit} property of type
@samp{String} and has an optional @samp{tenant} property that is initially @samp{nil}.
The tenant property is optional because an apartment may not always have
a tenant.

Both of these classes also define a deinitializer, which prints the fact
that an instance of that class is being deinitialized. This enables you
to see whether instances of @samp{Person} and @samp{Apartment} are being
deallocated as expected.

This next code snippet defines two variables of optional type called
@samp{john} and @samp{unit4A}, which will be set to a specific @samp{Apartment} and
@samp{Person} instance below. Both of these variables have an initial value
of @samp{nil}, by virtue of being optional:

@example
var john: Person?
var unit4A: Apartment?
@end example

You can now create a specific @samp{Person} instance and @samp{Apartment} instance
and assign these new instances to the @samp{john} and @samp{unit4A} variables:

@example
john = Person(name: "John Appleseed")
unit4A = Apartment(unit: "4A")
@end example

Here's how the strong references look after creating and assigning these
two instances. The @samp{john} variable now has a strong reference to the new
@samp{Person} instance, and the @samp{unit4A} variable has a strong reference to
the new @samp{Apartment} instance:

@image{_images/referenceCycle01_2x,,,,png}
You can now link the two instances together so that the person has an
apartment, and the apartment has a tenant. Note that an exclamation mark
(@samp{!}) is used to unwrap and access the instances stored inside the
@samp{john} and @samp{unit4A} optional variables, so that the properties of those
instances can be set:

@example
john!.apartment = unit4A
unit4A!.tenant = john
@end example

Here's how the strong references look after you link the two instances
together:

@image{_images/referenceCycle02_2x,,,,png}
Unfortunately, linking these two instances creates a strong reference
cycle between them. The @samp{Person} instance now has a strong reference to
the @samp{Apartment} instance, and the @samp{Apartment} instance has a strong
reference to the @samp{Person} instance. Therefore, when you break the strong
references held by the @samp{john} and @samp{unit4A} variables, the reference
counts do not drop to zero, and the instances are not deallocated by
ARC:

@example
john = nil
unit4A = nil
@end example

Note that neither deinitializer was called when you set these two
variables to @samp{nil}. The strong reference cycle prevents the @samp{Person} and
@samp{Apartment} instances from ever being deallocated, causing a memory leak
in your app.

Here's how the strong references look after you set the @samp{john} and
@samp{unit4A} variables to @samp{nil}:

@image{_images/referenceCycle03_2x,,,,png}
The strong references between the @samp{Person} instance and the @samp{Apartment}
instance remain and cannot be broken.

@node Resolving Strong Reference Cycles Between Class Instances
@section Resolving Strong Reference Cycles Between Class Instances

Swift provides two ways to resolve strong reference cycles when you work
with properties of class type: weak references and unowned references.

Weak and unowned references enable one instance in a reference cycle to
refer to the other instance @emph{without} keeping a strong hold on it. The
instances can then refer to each other without creating a strong
reference cycle.

Use a weak reference when the other instance has a shorter
lifetime---that is, when the other instance can be deallocated first. In
the @samp{Apartment} example above, it's appropriate for an apartment to be
able to have no tenant at some point in its lifetime, and so a weak
reference is an appropriate way to break the reference cycle in this
case. In contrast, use an unowned reference when the other instance has
the same lifetime or a longer lifetime.

@menu
* Weak References::
* Unowned References::
* Unowned References and Implicitly Unwrapped Optional Properties::
@end menu

@node Weak References
@subsection Weak References

A @emph{weak reference} is a reference that does not keep a strong hold on
the instance it refers to, and so does not stop ARC from disposing of
the referenced instance. This behavior prevents the reference from
becoming part of a strong reference cycle. You indicate a weak reference
by placing the @samp{weak} keyword before a property or variable declaration.

Because a weak reference does not keep a strong hold on the instance it
refers to, it's possible for that instance to be deallocated while the
weak reference is still referring to it. Therefore, ARC automatically
sets a weak reference to @samp{nil} when the instance that it refers to is
deallocated. And, because weak references need to allow their value to
be changed to @samp{nil} at runtime, they are always declared as variables,
rather than constants, of an optional type.

You can check for the existence of a value in the weak reference, just
like any other optional value, and you will never end up with a
reference to an invalid instance that no longer exists.

Note

Property observers aren't called when ARC sets a weak reference to
@samp{nil}.

The example below is identical to the @samp{Person} and @samp{Apartment} example
from above, with one important difference. This time around, the
@samp{Apartment} type's @samp{tenant} property is declared as a weak reference:

@example
class Person @{
    let name: String
    init(name: String) @{ self.name = name @}
    var apartment: Apartment?
    deinit @{ print("\(name) is being deinitialized") @}
@}

class Apartment @{
    let unit: String
    init(unit: String) @{ self.unit = unit @}
    weak var tenant: Person?
    deinit @{ print("Apartment \(unit) is being deinitialized") @}
@}
@end example

The strong references from the two variables (@samp{john} and @samp{unit4A}) and
the links between the two instances are created as before:

@example
var john: Person?
var unit4A: Apartment?

john = Person(name: "John Appleseed")
unit4A = Apartment(unit: "4A")

john!.apartment = unit4A
unit4A!.tenant = john
@end example

Here's how the references look now that you've linked the two instances
together:

@image{_images/weakReference01_2x,,,,png}
The @samp{Person} instance still has a strong reference to the @samp{Apartment}
instance, but the @samp{Apartment} instance now has a @emph{weak} reference to the
@samp{Person} instance. This means that when you break the strong reference
held by the @samp{john} variable by setting it to @samp{nil}, there are no more
strong references to the @samp{Person} instance:

@example
john = nil
// Prints "John Appleseed is being deinitialized"
@end example

Because there are no more strong references to the @samp{Person} instance,
it's deallocated and the @samp{tenant} property is set to @samp{nil}:

@image{_images/weakReference02_2x,,,,png}
The only remaining strong reference to the @samp{Apartment} instance is from
the @samp{unit4A} variable. If you break @emph{that} strong reference, there are
no more strong references to the @samp{Apartment} instance:

@example
unit4A = nil
// Prints "Apartment 4A is being deinitialized"
@end example

Because there are no more strong references to the @samp{Apartment} instance,
it too is deallocated:

@image{_images/weakReference03_2x,,,,png}

Note

In systems that use garbage collection, weak pointers are sometimes used
to implement a simple caching mechanism because objects with no strong
references are deallocated only when memory pressure triggers garbage
collection. However, with ARC, values are deallocated as soon as their
last strong reference is removed, making weak references unsuitable for
such a purpose.

@node Unowned References
@subsection Unowned References

Like a weak reference, an @emph{unowned reference} does not keep a strong
hold on the instance it refers to. Unlike a weak reference, however, an
unowned reference is used when the other instance has the same lifetime
or a longer lifetime. You indicate an unowned reference by placing the
@samp{unowned} keyword before a property or variable declaration.

An unowned reference is expected to always have a value. As a result,
ARC never sets an unowned reference's value to @samp{nil}, which means that
unowned references are defined using non-optional types.

Important

Use an unowned reference only when you are sure that the reference
@emph{always} refers to an instance that has not been deallocated.

If you try to access the value of an unowned reference after that
instance has been deallocated, you'll get a runtime error.

The following example defines two classes, @samp{Customer} and @samp{CreditCard},
which model a bank customer and a possible credit card for that
customer. These two classes each store an instance of the other class as
a property. This relationship has the potential to create a strong
reference cycle.

The relationship between @samp{Customer} and @samp{CreditCard} is slightly
different from the relationship between @samp{Apartment} and @samp{Person} seen in
the weak reference example above. In this data model, a customer may or
may not have a credit card, but a credit card will @emph{always} be
associated with a customer. A @samp{CreditCard} instance never outlives the
@samp{Customer} that it refers to. To represent this, the @samp{Customer} class
has an optional @samp{card} property, but the @samp{CreditCard} class has an
unowned (and non-optional) @samp{customer} property.

Furthermore, a new @samp{CreditCard} instance can @emph{only} be created by
passing a @samp{number} value and a @samp{customer} instance to a custom
@samp{CreditCard} initializer. This ensures that a @samp{CreditCard} instance
always has a @samp{customer} instance associated with it when the
@samp{CreditCard} instance is created.

Because a credit card will always have a customer, you define its
@samp{customer} property as an unowned reference, to avoid a strong reference
cycle:

@example
class Customer @{
    let name: String
    var card: CreditCard?
    init(name: String) @{
        self.name = name
    @}
    deinit @{ print("\(name) is being deinitialized") @}
@}

class CreditCard @{
    let number: UInt64
    unowned let customer: Customer
    init(number: UInt64, customer: Customer) @{
        self.number = number
        self.customer = customer
    @}
    deinit @{ print("Card #\(number) is being deinitialized") @}
@}
@end example

Note

The @samp{number} property of the @samp{CreditCard} class is defined with a type
of @samp{UInt64} rather than @samp{Int}, to ensure that the @samp{number} property's
capacity is large enough to store a 16-digit card number on both 32-bit
and 64-bit systems.

This next code snippet defines an optional @samp{Customer} variable called
@samp{john}, which will be used to store a reference to a specific customer.
This variable has an initial value of nil, by virtue of being optional:

@enumerate
@item
var john: Customer?
@end enumerate

You can now create a @samp{Customer} instance, and use it to initialize and
assign a new @samp{CreditCard} instance as that customer's @samp{card} property:

@enumerate
@item
john = Customer(name: "John Appleseed")
@item
john!.card = CreditCard(number: 1234@math{_5678}@math{_9012}@math{_3456}, customer: john!)
@end enumerate

Here's how the references look, now that you've linked the two
instances:

@image{_images/unownedReference01_2x,,,,png}
The @samp{Customer} instance now has a strong reference to the @samp{CreditCard}
instance, and the @samp{CreditCard} instance has an unowned reference to the
@samp{Customer} instance.

Because of the unowned @samp{customer} reference, when you break the strong
reference held by the @samp{john} variable, there are no more strong
references to the @samp{Customer} instance:

@image{_images/unownedReference02_2x,,,,png}
Because there are no more strong references to the @samp{Customer} instance,
it's deallocated. After this happens, there are no more strong
references to the @samp{CreditCard} instance, and it too is deallocated:

@example
john = nil
// Prints "John Appleseed is being deinitialized"
// Prints "Card #1234567890123456 is being deinitialized"
@end example

The final code snippet above shows that the deinitializers for the
@samp{Customer} instance and @samp{CreditCard} instance both print their
“deinitialized” messages after the @samp{john} variable is set to @samp{nil}.

Note

The examples above show how to use @emph{safe} unowned references. Swift also
provides @emph{unsafe} unowned references for cases where you need to disable
runtime safety checks---for example, for performance reasons. As with
all unsafe operations, you take on the responsibility for checking that
code for safety.

You indicate an unsafe unowned reference by writing @samp{unowned(unsafe)}.
If you try to access an unsafe unowned reference after the instance that
it refers to is deallocated, your program will try to access the memory
location where the instance used to be, which is an unsafe operation.

@node Unowned References and Implicitly Unwrapped Optional Properties
@subsection Unowned References and Implicitly Unwrapped Optional Properties

The examples for weak and unowned references above cover two of the more
common scenarios in which it's necessary to break a strong reference
cycle.

The @samp{Person} and @samp{Apartment} example shows a situation where two
properties, both of which are allowed to be @samp{nil}, have the potential to
cause a strong reference cycle. This scenario is best resolved with a
weak reference.

The @samp{Customer} and @samp{CreditCard} example shows a situation where one
property that is allowed to be @samp{nil} and another property that cannot be
@samp{nil} have the potential to cause a strong reference cycle. This
scenario is best resolved with an unowned reference.

However, there is a third scenario, in which @emph{both} properties should
always have a value, and neither property should ever be @samp{nil} once
initialization is complete. In this scenario, it's useful to combine an
unowned property on one class with an implicitly unwrapped optional
property on the other class.

This enables both properties to be accessed directly (without optional
unwrapping) once initialization is complete, while still avoiding a
reference cycle. This section shows you how to set up such a
relationship.

The example below defines two classes, @samp{Country} and @samp{City}, each of
which stores an instance of the other class as a property. In this data
model, every country must always have a capital city, and every city
must always belong to a country. To represent this, the @samp{Country} class
has a @samp{capitalCity} property, and the @samp{City} class has a @samp{country}
property:

@example
class Country @{
    let name: String
    var capitalCity: City!
    init(name: String, capitalName: String) @{
        self.name = name
        self.capitalCity = City(name: capitalName, country: self)
    @}
@}

class City @{
    let name: String
    unowned let country: Country
    init(name: String, country: Country) @{
        self.name = name
        self.country = country
    @}
@}
@end example

To set up the interdependency between the two classes, the initializer
for @samp{City} takes a @samp{Country} instance, and stores this instance in its
@samp{country} property.

The initializer for @samp{City} is called from within the initializer for
@samp{Country}. However, the initializer for @samp{Country} cannot pass @samp{self} to
the @samp{City} initializer until a new @samp{Country} instance is fully
initialized, as described in @ref{Two-Phase Initialization, , Two-Phase
Initialization}.

To cope with this requirement, you declare the @samp{capitalCity} property of
@samp{Country} as an implicitly unwrapped optional property, indicated by the
exclamation mark at the end of its type annotation (@samp{City!}). This means
that the @samp{capitalCity} property has a default value of @samp{nil}, like any
other optional, but can be accessed without the need to unwrap its value
as described in @ref{Implicitly Unwrapped Optionals, , Implicitly Unwrapped
Optionals}.

Because @samp{capitalCity} has a default @samp{nil} value, a new @samp{Country}
instance is considered fully initialized as soon as the @samp{Country}
instance sets its @samp{name} property within its initializer. This means
that the @samp{Country} initializer can start to reference and pass around
the implicit @samp{self} property as soon as the @samp{name} property is set. The
@samp{Country} initializer can therefore pass @samp{self} as one of the parameters
for the @samp{City} initializer when the @samp{Country} initializer is setting its
own @samp{capitalCity} property.

All of this means that you can create the @samp{Country} and @samp{City} instances
in a single statement, without creating a strong reference cycle, and
the @samp{capitalCity} property can be accessed directly, without needing to
use an exclamation mark to unwrap its optional value:

@example
var country = Country(name: "Canada", capitalName: "Ottawa")
print("\(country.name)'s capital city is called \(country.capitalCity.name)")
// Prints "Canada's capital city is called Ottawa"
@end example

In the example above, the use of an implicitly unwrapped optional means
that all of the two-phase class initializer requirements are satisfied.
The @samp{capitalCity} property can be used and accessed like a non-optional
value once initialization is complete, while still avoiding a strong
reference cycle.

@node Strong Reference Cycles for Closures
@section Strong Reference Cycles for Closures

You saw above how a strong reference cycle can be created when two class
instance properties hold a strong reference to each other. You also saw
how to use weak and unowned references to break these strong reference
cycles.

A strong reference cycle can also occur if you assign a closure to a
property of a class instance, and the body of that closure captures the
instance. This capture might occur because the closure's body accesses a
property of the instance, such as @samp{self.someProperty}, or because the
closure calls a method on the instance, such as @samp{self.someMethod()}. In
either case, these accesses cause the closure to “capture” @samp{self},
creating a strong reference cycle.

This strong reference cycle occurs because closures, like classes, are
@emph{reference types}. When you assign a closure to a property, you are
assigning a @emph{reference} to that closure. In essence, it's the same
problem as above---two strong references are keeping each other alive.
However, rather than two class instances, this time it's a class
instance and a closure that are keeping each other alive.

Swift provides an elegant solution to this problem, known as a @emph{closure
capture list}. However, before you learn how to break a strong reference
cycle with a closure capture list, it's useful to understand how such a
cycle can be caused.

The example below shows how you can create a strong reference cycle when
using a closure that references @samp{self}. This example defines a class
called @samp{HTMLElement}, which provides a simple model for an individual
element within an HTML document:

@example
class HTMLElement @{

    let name: String
    let text: String?

    lazy var asHTML: () -> String = @{
        if let text = self.text @{
            return "<\(self.name)>\(text)</\(self.name)>"
        @} else @{
            return "<\(self.name) />"
        @}
    @}

    init(name: String, text: String? = nil) @{
        self.name = name
        self.text = text
    @}

    deinit @{
        print("\(name) is being deinitialized")
    @}

@}
@end example

The @samp{HTMLElement} class defines a @samp{name} property, which indicates the
name of the element, such as @samp{"h1"} for a heading element, @samp{"p"} for a
paragraph element, or @samp{"br"} for a line break element. @samp{HTMLElement}
also defines an optional @samp{text} property, which you can set to a string
that represents the text to be rendered within that HTML element.

In addition to these two simple properties, the @samp{HTMLElement} class
defines a lazy property called @samp{asHTML}. This property references a
closure that combines @samp{name} and @samp{text} into an HTML string fragment.
The @samp{asHTML} property is of type @samp{() -> String}, or “a function that
takes no parameters, and returns a @samp{String} value”.

By default, the @samp{asHTML} property is assigned a closure that returns a
string representation of an HTML tag. This tag contains the optional
@samp{text} value if it exists, or no text content if @samp{text} does not exist.
For a paragraph element, the closure would return @samp{"<p>some text</p>"}
or @samp{"<p />"}, depending on whether the @samp{text} property equals
@samp{"some text"} or @samp{nil}.

The @samp{asHTML} property is named and used somewhat like an instance
method. However, because @samp{asHTML} is a closure property rather than an
instance method, you can replace the default value of the @samp{asHTML}
property with a custom closure, if you want to change the HTML rendering
for a particular HTML element.

For example, the @samp{asHTML} property could be set to a closure that
defaults to some text if the @samp{text} property is @samp{nil}, in order to
prevent the representation from returning an empty HTML tag:

@example
let heading = HTMLElement(name: "h1")
let defaultText = "some default text"
heading.asHTML = @{
    return "<\(heading.name)>\(heading.text ?? defaultText)</\(heading.name)>"
@}
print(heading.asHTML())
// Prints "<h1>some default text</h1>"
@end example

Note

The @samp{asHTML} property is declared as a lazy property, because it's only
needed if and when the element actually needs to be rendered as a string
value for some HTML output target. The fact that @samp{asHTML} is a lazy
property means that you can refer to @samp{self} within the default closure,
because the lazy property will not be accessed until after
initialization has been completed and @samp{self} is known to exist.

The @samp{HTMLElement} class provides a single initializer, which takes a
@samp{name} argument and (if desired) a @samp{text} argument to initialize a new
element. The class also defines a deinitializer, which prints a message
to show when an @samp{HTMLElement} instance is deallocated.

Here's how you use the @samp{HTMLElement} class to create and print a new
instance:

@example
var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
print(paragraph!.asHTML())
// Prints "<p>hello, world</p>"
@end example

Note

The @samp{paragraph} variable above is defined as an @emph{optional}
@samp{HTMLElement}, so that it can be set to @samp{nil} below to demonstrate the
presence of a strong reference cycle.

Unfortunately, the @samp{HTMLElement} class, as written above, creates a
strong reference cycle between an @samp{HTMLElement} instance and the closure
used for its default @samp{asHTML} value. Here's how the cycle looks:

@image{_images/closureReferenceCycle01_2x,,,,png}
The instance's @samp{asHTML} property holds a strong reference to its
closure. However, because the closure refers to @samp{self} within its body
(as a way to reference @samp{self.name} and @samp{self.text}), the closure
@emph{captures} self, which means that it holds a strong reference back to
the @samp{HTMLElement} instance. A strong reference cycle is created between
the two. (For more information about capturing values in a closure, see
@ref{Capturing Values}.)

Note

Even though the closure refers to @samp{self} multiple times, it only
captures one strong reference to the @samp{HTMLElement} instance.

If you set the @samp{paragraph} variable to @samp{nil} and break its strong
reference to the @samp{HTMLElement} instance, neither the @samp{HTMLElement}
instance nor its closure are deallocated, because of the strong
reference cycle:

@example
paragraph = nil
@end example

Note that the message in the @samp{HTMLElement} deinitializer is not printed,
which shows that the @samp{HTMLElement} instance is not deallocated.

@node Resolving Strong Reference Cycles for Closures
@section Resolving Strong Reference Cycles for Closures

You resolve a strong reference cycle between a closure and a class
instance by defining a @emph{capture list} as part of the closure's
definition. A capture list defines the rules to use when capturing one
or more reference types within the closure's body. As with strong
reference cycles between two class instances, you declare each captured
reference to be a weak or unowned reference rather than a strong
reference. The appropriate choice of weak or unowned depends on the
relationships between the different parts of your code.

Note

Swift requires you to write @samp{self.someProperty} or @samp{self.someMethod()}
(rather than just @samp{someProperty} or @samp{someMethod()}) whenever you refer
to a member of @samp{self} within a closure. This helps you remember that
it's possible to capture @samp{self} by accident.

@menu
* Defining a Capture List::
* Weak and Unowned References::
@end menu

@node Defining a Capture List
@subsection Defining a Capture List

Each item in a capture list is a pairing of the @samp{weak} or @samp{unowned}
keyword with a reference to a class instance (such as @samp{self}) or a
variable initialized with some value (such as
@samp{delegate = self.delegate!}). These pairings are written within a pair
of square braces, separated by commas.

Place the capture list before a closure's parameter list and return type
if they are provided:

@example
lazy var someClosure: (Int, String) -> String = @{
    [unowned self, weak delegate = self.delegate!] (index: Int,
                                                    stringToProcess: String) -> String in
    // closure body goes here
@}
@end example

If a closure does not specify a parameter list or return type because
they can be inferred from context, place the capture list at the very
start of the closure, followed by the @samp{in} keyword:

@example
lazy var someClosure: () -> String = @{
    [unowned self, weak delegate = self.delegate!] in
    // closure body goes here
@}
@end example

@node Weak and Unowned References
@subsection Weak and Unowned References

Define a capture in a closure as an unowned reference when the closure
and the instance it captures will always refer to each other, and will
always be deallocated at the same time.

Conversely, define a capture as a weak reference when the captured
reference may become @samp{nil} at some point in the future. Weak references
are always of an optional type, and automatically become @samp{nil} when the
instance they reference is deallocated. This enables you to check for
their existence within the closure's body.

Note

If the captured reference will never become @samp{nil}, it should always be
captured as an unowned reference, rather than a weak reference.

An unowned reference is the appropriate capture method to use to resolve
the strong reference cycle in the @samp{HTMLElement} example from
@ref{Strong Reference Cycles for Closures, , Strong Reference Cycles for
Closures} above. Here's how you write the @samp{HTMLElement} class to avoid
the cycle:

@example
class HTMLElement @{

    let name: String
    let text: String?

    lazy var asHTML: () -> String = @{
        [unowned self] in
        if let text = self.text @{
            return "<\(self.name)>\(text)</\(self.name)>"
        @} else @{
            return "<\(self.name) />"
        @}
    @}

    init(name: String, text: String? = nil) @{
        self.name = name
        self.text = text
    @}

    deinit @{
        print("\(name) is being deinitialized")
    @}

@}
@end example

This implementation of @samp{HTMLElement} is identical to the previous
implementation, apart from the addition of a capture list within the
@samp{asHTML} closure. In this case, the capture list is @samp{[unowned self]},
which means “capture self as an unowned reference rather than a strong
reference”.

You can create and print an @samp{HTMLElement} instance as before:

@example
var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
print(paragraph!.asHTML())
// Prints "<p>hello, world</p>"
@end example

Here's how the references look with the capture list in place:

@image{_images/closureReferenceCycle02_2x,,,,png}
This time, the capture of @samp{self} by the closure is an unowned reference,
and does not keep a strong hold on the @samp{HTMLElement} instance it has
captured. If you set the strong reference from the @samp{paragraph} variable
to @samp{nil}, the @samp{HTMLElement} instance is deallocated, as can be seen from
the printing of its deinitializer message in the example below:

@example
paragraph = nil
// Prints "p is being deinitialized"
@end example

For more information about capture lists, see Capture Lists.

@node Memory Safety
@chapter Memory Safety

By default, Swift prevents unsafe behavior from happening in your code.
For example, Swift ensures that variables are initialized before they're
used, memory isn't accessed after it's been deallocated, and array
indices are checked for out-of-bounds errors.

Swift also makes sure that multiple accesses to the same area of memory
don't conflict, by requiring code that modifies a location in memory to
have exclusive access to that memory. Because Swift manages memory
automatically, most of the time you don't have to think about accessing
memory at all. However, it's important to understand where potential
conflicts can occur, so you can avoid writing code that has conflicting
access to memory. If your code does contain conflicts, you'll get a
compile-time or runtime error.

@menu
* Understanding Conflicting Access to Memory::
* Conflicting Access to In-Out Parameters::
* Conflicting Access to self in Methods::
* Conflicting Access to Properties::
@end menu

@node Understanding Conflicting Access to Memory
@section Understanding Conflicting Access to Memory

Access to memory happens in your code when you do things like set the
value of a variable or pass an argument to a function. For example, the
following code contains both a read access and a write access:

@example
// A write access to the memory where one is stored.
var one = 1

// A read access from the memory where one is stored.
print("We're number \(one)!")
@end example

A conflicting access to memory can occur when different parts of your
code are trying to access the same location in memory at the same time.
Multiple accesses to a location in memory at the same time can produce
unpredictable or inconsistent behavior. In Swift, there are ways to
modify a value that span several lines of code, making it possible to
attempt to access a value in the middle of its own modification.

You can see a similar problem by thinking about how you update a budget
that's written on a piece of paper. Updating the budget is a two-step
process: First you add the items' names and prices, and then you change
the total amount to reflect the items currently on the list. Before and
after the update, you can read any information from the budget and get a
correct answer, as shown in the figure below.

@image{_images/memory_shopping_2x,,,,png}
While you're adding items to the budget, it's in a temporary, invalid
state because the total amount hasn't been updated to reflect the newly
added items. Reading the total amount during the process of adding an
item gives you incorrect information.

This example also demonstrates a challenge you may encounter when fixing
conflicting access to memory: There are sometimes multiple ways to fix
the conflict that produce different answers, and it's not always obvious
which answer is correct. In this example, depending on whether you
wanted the original total amount or the updated total amount, either $5
or $320 could be the correct answer. Before you can fix the conflicting
access, you have to determine what it was intended to do.

Note

If you've written concurrent or multithreaded code, conflicting access
to memory might be a familiar problem. However, the conflicting access
discussed here can happen on a single thread and @emph{doesn't} involve
concurrent or multithreaded code.

If you have conflicting access to memory from within a single thread,
Swift guarantees that you'll get an error at either compile time or
runtime. For multithreaded code, use
@uref{https://developer.apple.com/documentation/code_diagnostics/thread_sanitizer, Thread
Sanitizer}
[@uref{https://developer.apple.com/documentation/code_diagnostics/thread_sanitizer}]
to help detect conflicting access across threads.

@menu
* Characteristics of Memory Access::
@end menu

@node Characteristics of Memory Access
@subsection Characteristics of Memory Access

There are three characteristics of memory access to consider in the
context of conflicting access: whether the access is a read or a write,
the duration of the access, and the location in memory being accessed.
Specifically, a conflict occurs if you have two accesses that meet all
of the following conditions:

@itemize
@item
At least one is a write access.

@item
They access the same location in memory.

@item
Their durations overlap.
@end itemize

The difference between a read and write access is usually obvious: a
write access changes the location in memory, but a read access doesn't.
The location in memory refers to what is being accessed---for example, a
variable, constant, or property. The duration of a memory access is
either instantaneous or long-term.

An access is @emph{instantaneous} if it's not possible for other code to run
after that access starts but before it ends. By their nature, two
instantaneous accesses can't happen at the same time. Most memory access
is instantaneous. For example, all the read and write accesses in the
code listing below are instantaneous:

@example
func oneMore(than number: Int) -> Int @{
    return number + 1
@}

var myNumber = 1
myNumber = oneMore(than: myNumber)
print(myNumber)
// Prints "2"
@end example

However, there are several ways to access memory, called @emph{long-term}
accesses, that span the execution of other code. The difference between
instantaneous access and long-term access is that it's possible for
other code to run after a long-term access starts but before it ends,
which is called @emph{overlap}. A long-term access can overlap with other
long-term accesses and instantaneous accesses.

Overlapping accesses appear primarily in code that uses in-out
parameters in functions and methods or mutating methods of a structure.
The specific kinds of Swift code that use long-term accesses are
discussed in the sections below.

@node Conflicting Access to In-Out Parameters
@section Conflicting Access to In-Out Parameters

A function has long-term write access to all of its in-out parameters.
The write access for an in-out parameter starts after all of the
non-in-out parameters have been evaluated and lasts for the entire
duration of that function call. If there are multiple in-out parameters,
the write accesses start in the same order as the parameters appear.

One consequence of this long-term write access is that you can't access
the original variable that was passed as in-out, even if scoping rules
and access control would otherwise permit it---any access to the
original creates a conflict. For example:

@example
var stepSize = 1

func increment(_ number: inout Int) @{
    number += stepSize
@}

increment(&stepSize)
// Error: conflicting accesses to stepSize
@end example

In the code above, @samp{stepSize} is a global variable, and it is normally
accessible from within @samp{increment(_:)}. However, the read access to
@samp{stepSize} overlaps with the write access to @samp{number}. As shown in the
figure below, both @samp{number} and @samp{stepSize} refer to the same location in
memory. The read and write accesses refer to the same memory and they
overlap, producing a conflict.

@image{_images/memory_increment_2x,,,,png}
One way to solve this conflict is to make an explicit copy of
@samp{stepSize}:

@example
// Make an explicit copy.
var copyOfStepSize = stepSize
increment(&copyOfStepSize)

// Update the original.
stepSize = copyOfStepSize
// stepSize is now 2
@end example

When you make a copy of @samp{stepSize} before calling @samp{increment(_:)}, it's
clear that the value of @samp{copyOfStepSize} is incremented by the current
step size. The read access ends before the write access starts, so there
isn't a conflict.

Another consequence of long-term write access to in-out parameters is
that passing a single variable as the argument for multiple in-out
parameters of the same function produces a conflict. For example:

@example
func balance(_ x: inout Int, _ y: inout Int) @{
    let sum = x + y
    x = sum / 2
    y = sum - x
@}
var playerOneScore = 42
var playerTwoScore = 30
balance(&playerOneScore, &playerTwoScore) // OK
balance(&playerOneScore, &playerOneScore)
// Error: conflicting accesses to playerOneScore
@end example

The @samp{balance(_:_:)} function above modifies its two parameters to divide
the total value evenly between them. Calling it with @samp{playerOneScore}
and @samp{playerTwoScore} as arguments doesn't produce a conflict---there are
two write accesses that overlap in time, but they access different
locations in memory. In contrast, passing @samp{playerOneScore} as the value
for both parameters produces a conflict because it tries to perform two
write accesses to the same location in memory at the same time.

Note

Because operators are functions, they can also have long-term accesses
to their in-out parameters. For example, if @samp{balance(_:_:)} was an
operator function named @samp{<^>}, writing
@samp{playerOneScore <^> playerOneScore} would result in the same conflict as
@samp{balance(&playerOneScore, &playerOneScore)}.

@node Conflicting Access to self in Methods
@section Conflicting Access to self in Methods

A mutating method on a structure has write access to @samp{self} for the
duration of the method call. For example, consider a game where each
player has a health amount, which decreases when taking damage, and an
energy amount, which decreases when using special abilities.

@example
struct Player @{
    var name: String
    var health: Int
    var energy: Int

    static let maxHealth = 10
    mutating func restoreHealth() @{
        health = Player.maxHealth
    @}
@}
@end example

In the @samp{restoreHealth()} method above, a write access to @samp{self} starts
at the beginning of the method and lasts until the method returns. In
this case, there's no other code inside @samp{restoreHealth()} that could
have an overlapping access to the properties of a @samp{Player} instance. The
@samp{shareHealth(with:)} method below takes another @samp{Player} instance as an
in-out parameter, creating the possibility of overlapping accesses.

@example
extension Player @{
    mutating func shareHealth(with teammate: inout Player) @{
        balance(&teammate.health, &health)
    @}
@}

var oscar = Player(name: "Oscar", health: 10, energy: 10)
var maria = Player(name: "Maria", health: 5, energy: 10)
oscar.shareHealth(with: &maria) // OK
@end example

In the example above, calling the @samp{shareHealth(with:)} method for
Oscar's player to share health with Maria's player doesn't cause a
conflict. There's a write access to @samp{oscar} during the method call
because @samp{oscar} is the value of @samp{self} in a mutating method, and there's
a write access to @samp{maria} for the same duration because @samp{maria} was
passed as an in-out parameter. As shown in the figure below, they access
different locations in memory. Even though the two write accesses
overlap in time, they don't conflict.

@image{_images/memory_share_health_maria_2x,,,,png}
However, if you pass @samp{oscar} as the argument to @samp{shareHealth(with:)},
there's a conflict:

@example
oscar.shareHealth(with: &oscar)
// Error: conflicting accesses to oscar
@end example

The mutating method needs write access to @samp{self} for the duration of the
method, and the in-out parameter needs write access to @samp{teammate} for
the same duration. Within the method, both @samp{self} and @samp{teammate} refer
to the same location in memory---as shown in the figure below. The two
write accesses refer to the same memory and they overlap, producing a
conflict.

@image{_images/memory_share_health_oscar_2x,,,,png}

@node Conflicting Access to Properties
@section Conflicting Access to Properties

Types like structures, tuples, and enumerations are made up of
individual constituent values, such as the properties of a structure or
the elements of a tuple. Because these are value types, mutating any
piece of the value mutates the whole value, meaning read or write access
to one of the properties requires read or write access to the whole
value. For example, overlapping write accesses to the elements of a
tuple produces a conflict:

@example
var playerInformation = (health: 10, energy: 20)
balance(&playerInformation.health, &playerInformation.energy)
// Error: conflicting access to properties of playerInformation
@end example

In the example above, calling @samp{balance(_:_:)} on the elements of a tuple
produces a conflict because there are overlapping write accesses to
@samp{playerInformation}. Both @samp{playerInformation.health} and
@samp{playerInformation.energy} are passed as in-out parameters, which means
@samp{balance(_:_:)} needs write access to them for the duration of the
function call. In both cases, a write access to the tuple element
requires a write access to the entire tuple. This means there are two
write accesses to @samp{playerInformation} with durations that overlap,
causing a conflict.

The code below shows that the same error appears for overlapping write
accesses to the properties of a structure that's stored in a global
variable.

@example
var holly = Player(name: "Holly", health: 10, energy: 10)
balance(&holly.health, &holly.energy) // Error
@end example

In practice, most access to the properties of a structure can overlap
safely. For example, if the variable @samp{holly} in the example above is
changed to a local variable instead of a global variable, the compiler
can prove that overlapping access to stored properties of the structure
is safe:

@example
func someFunction() @{
    var oscar = Player(name: "Oscar", health: 10, energy: 10)
    balance(&oscar.health, &oscar.energy) // OK
@}
@end example

In the example above, Oscar's health and energy are passed as the two
in-out parameters to @samp{balance(_:_:)}. The compiler can prove that memory
safety is preserved because the two stored properties don't interact in
any way.

The restriction against overlapping access to properties of a structure
isn't always necessary to preserve memory safety. Memory safety is the
desired guarantee, but exclusive access is a stricter requirement than
memory safety---which means some code preserves memory safety, even
though it violates exclusive access to memory. Swift allows this
memory-safe code if the compiler can prove that the nonexclusive access
to memory is still safe. Specifically, it can prove that overlapping
access to properties of a structure is safe if the following conditions
apply:

@itemize
@item
You're accessing only stored properties of an instance, not computed
properties or class properties.

@item
The structure is the value of a local variable, not a global variable.

@item
The structure is either not captured by any closures, or it's captured
only by nonescaping closures.
@end itemize

If the compiler can't prove the access is safe, it doesn't allow the
access.

@node Access Control
@chapter Access Control

@emph{Access control} restricts access to parts of your code from code in
other source files and modules. This feature enables you to hide the
implementation details of your code, and to specify a preferred
interface through which that code can be accessed and used.

You can assign specific access levels to individual types (classes,
structures, and enumerations), as well as to properties, methods,
initializers, and subscripts belonging to those types. Protocols can be
restricted to a certain context, as can global constants, variables, and
functions.

In addition to offering various levels of access control, Swift reduces
the need to specify explicit access control levels by providing default
access levels for typical scenarios. Indeed, if you are writing a
single-target app, you may not need to specify explicit access control
levels at all.

Note

The various aspects of your code that can have access control applied to
them (properties, types, functions, and so on) are referred to as
“entities” in the sections below, for brevity.

@menu
* Modules and Source Files::
* Access Levels::
* Access Control Syntax::
* Custom Types::
* Subclassing: Subclassing 1.
* Constants, Variables, Properties, and Subscripts: Constants Variables Properties and Subscripts.
* Initializers: Initializers 2.
* Protocols: Protocols 1.
* Extensions: Extensions 1.
* Generics: Generics 2.
* Type Aliases: Type Aliases 1.
@end menu

@node Modules and Source Files
@section Modules and Source Files

Swift's access control model is based on the concept of modules and
source files.

@findex import
A @emph{module} is a single unit of code distribution---a framework or
application that is built and shipped as a single unit and that can be
imported by another module with Swift's @samp{import} keyword.

Each build target (such as an app bundle or framework) in Xcode is
treated as a separate module in Swift. If you group together aspects of
your app's code as a stand-alone framework---perhaps to encapsulate and
reuse that code across multiple applications---then everything you
define within that framework will be part of a separate module when it's
imported and used within an app, or when it's used within another
framework.

A @emph{source file} is a single Swift source code file within a module (in
effect, a single file within an app or framework). Although it's common
to define individual types in separate source files, a single source
file can contain definitions for multiple types, functions, and so on.

@node Access Levels
@section Access Levels

Swift provides five different @emph{access levels} for entities within your
code. These access levels are relative to the source file in which an
entity is defined, and also relative to the module that source file
belongs to.

@itemize
@item
@emph{Open access} and @emph{public access} enable entities to be used within
any source file from their defining module, and also in a source file
from another module that imports the defining module. You typically
use open or public access when specifying the public interface to a
framework. The difference between open and public access is described
below.

@item
@emph{Internal access} enables entities to be used within any source file
from their defining module, but not in any source file outside of that
module. You typically use internal access when defining an app's or a
framework's internal structure.

@item
@emph{File-private access} restricts the use of an entity to its own
defining source file. Use file-private access to hide the
implementation details of a specific piece of functionality when those
details are used within an entire file.

@item
@emph{Private access} restricts the use of an entity to the enclosing
declaration, and to extensions of that declaration that are in the
same file. Use private access to hide the implementation details of a
specific piece of functionality when those details are used only
within a single declaration.
@end itemize

Open access is the highest (least restrictive) access level and private
access is the lowest (most restrictive) access level.

Open access applies only to classes and class members, and it differs
from public access as follows:

@itemize
@item
Classes with public access, or any more restrictive access level, can
be subclassed only within the module where they're defined.

@item
Class members with public access, or any more restrictive access
level, can be overridden by subclasses only within the module where
they're defined.

@item
Open classes can be subclassed within the module where they're
defined, and within any module that imports the module where they're
defined.

@item
Open class members can be overridden by subclasses within the module
where they're defined, and within any module that imports the module
where they're defined.
@end itemize

Marking a class as open explicitly indicates that you've considered the
impact of code from other modules using that class as a superclass, and
that you've designed your class's code accordingly.

@menu
* Guiding Principle of Access Levels::
* Default Access Levels::
* Access Levels for Single-Target Apps::
* Access Levels for Frameworks::
* Access Levels for Unit Test Targets::
@end menu

@node Guiding Principle of Access Levels
@subsection Guiding Principle of Access Levels

Access levels in Swift follow an overall guiding principle: /No entity
can be defined in terms of another entity that has a lower (more
restrictive) access level./

For example:

@itemize
@item
A public variable can't be defined as having an internal,
file-private, or private type, because the type might not be available
everywhere that the public variable is used.

@item
A function can't have a higher access level than its parameter types
and return type, because the function could be used in situations
where its constituent types are unavailable to the surrounding code.
@end itemize

The specific implications of this guiding principle for different
aspects of the language are covered in detail below.

@node Default Access Levels
@subsection Default Access Levels

All entities in your code (with a few specific exceptions, as described
later in this chapter) have a default access level of internal if you
don't specify an explicit access level yourself. As a result, in many
cases you don't need to specify an explicit access level in your code.

@node Access Levels for Single-Target Apps
@subsection Access Levels for Single-Target Apps

When you write a simple single-target app, the code in your app is
typically self-contained within the app and doesn't need to be made
available outside of the app's module. The default access level of
internal already matches this requirement. Therefore, you don't need to
specify a custom access level. You may, however, want to mark some parts
of your code as file private or private in order to hide their
implementation details from other code within the app's module.

@node Access Levels for Frameworks
@subsection Access Levels for Frameworks

When you develop a framework, mark the public-facing interface to that
framework as open or public so that it can be viewed and accessed by
other modules, such as an app that imports the framework. This
public-facing interface is the application programming interface (or
API) for the framework.

Note

Any internal implementation details of your framework can still use the
default access level of internal, or can be marked as private or file
private if you want to hide them from other parts of the framework's
internal code. You need to mark an entity as open or public only if you
want it to become part of your framework's API.

@node Access Levels for Unit Test Targets
@subsection Access Levels for Unit Test Targets

When you write an app with a unit test target, the code in your app
needs to be made available to that module in order to be tested. By
default, only entities marked as open or public are accessible to other
modules. However, a unit test target can access any internal entity, if
you mark the import declaration for a product module with the
@samp{@@testable} attribute and compile that product module with testing
enabled.

@node Access Control Syntax
@section Access Control Syntax

@findex public
@findex internal
@findex fileprivate
@findex private

Define the access level for an entity by placing one of the @samp{open},
@samp{public}, @samp{internal}, @samp{fileprivate}, or @samp{private} modifiers before the
entity's introducer:

@example
public class SomePublicClass @{@}
internal class SomeInternalClass @{@}
fileprivate class SomeFilePrivateClass @{@}
private class SomePrivateClass @{@}

public var somePublicVariable = 0
internal let someInternalConstant = 0
fileprivate func someFilePrivateFunction() @{@}
private func somePrivateFunction() @{@}
@end example

Unless otherwise specified, the default access level is internal, as
described in @ref{Default Access Levels}. This
means that @samp{SomeInternalClass} and @samp{someInternalConstant} can be written
without an explicit access-level modifier, and will still have an access
level of internal:

@example
class SomeInternalClass @{@} // implicitly internal
let someInternalConstant = 0 // implicitly internal
@end example

@node Custom Types
@section Custom Types

If you want to specify an explicit access level for a custom type, do so
at the point that you define the type. The new type can then be used
wherever its access level permits. For example, if you define a
file-private class, that class can only be used as the type of a
property, or as a function parameter or return type, in the source file
in which the file-private class is defined.

The access control level of a type also affects the default access level
of that type's @emph{members} (its properties, methods, initializers, and
subscripts). If you define a type's access level as private or file
private, the default access level of its members will also be private or
file private. If you define a type's access level as internal or public
(or use the default access level of internal without specifying an
access level explicitly), the default access level of the type's members
will be internal.

Important

A public type defaults to having internal members, not public members.
If you want a type member to be public, you must explicitly mark it as
such. This requirement ensures that the public-facing API for a type is
something you opt in to publishing, and avoids presenting the internal
workings of a type as public API by mistake.

@example
public class SomePublicClass @{ // explicitly public class
    public var somePublicProperty = 0 // explicitly public class member
    var someInternalProperty = 0 // implicitly internal class member
    fileprivate func someFilePrivateMethod() @{@} // explicitly
    file-private class member
    private func somePrivateMethod() @{@} // explicitly private class
    member
@}

class SomeInternalClass @{ // implicitly internal class
    var someInternalProperty = 0 // implicitly internal class member
    fileprivate func someFilePrivateMethod() @{@} // explicitly
    file-private class member
    private func somePrivateMethod() @{@} // explicitly private class
    member
@}

fileprivate class SomeFilePrivateClass @{ // explicitly file-private
    class
      func someFilePrivateMethod() @{@} // implicitly file-private class
    member
    private func somePrivateMethod() @{@} // explicitly private class
    member
@}

private class SomePrivateClass @{ // explicitly private class
    func somePrivateMethod() @{@} // implicitly private class member
@}
@end example

@menu
* Tuple Types::
* Function Types: Function Types 1.
* Enumeration Types::
* Nested Types: Nested Types 2.
@end menu

@node Tuple Types
@subsection Tuple Types

The access level for a tuple type is the most restrictive access level
of all types used in that tuple. For example, if you compose a tuple
from two different types, one with internal access and one with private
access, the access level for that compound tuple type will be private.

Note

Tuple types don't have a standalone definition in the way that classes,
structures, enumerations, and functions do. A tuple type's access level
is deduced automatically when the tuple type is used, and can't be
specified explicitly.

@node Function Types 1
@subsection Function Types

The access level for a function type is calculated as the most
restrictive access level of the function's parameter types and return
type. You must specify the access level explicitly as part of the
function's definition if the function's calculated access level doesn't
match the contextual default.

The example below defines a global function called @samp{someFunction()},
without providing a specific access-level modifier for the function
itself. You might expect this function to have the default access level
of “internal”, but this isn't the case. In fact, @samp{someFunction()} won't
compile as written below:

@example
func someFunction() -> (SomeInternalClass, SomePrivateClass) @{
    // function implementation goes here
@}
@end example

The function's return type is a tuple type composed from two of the
custom classes defined above in @ref{Custom Types, , Custom
Types}. One of these classes is defined as internal, and the other is
defined as private. Therefore, the overall access level of the compound
tuple type is private (the minimum access level of the tuple's
constituent types).

Because the function's return type is private, you must mark the
function's overall access level with the @samp{private} modifier for the
function declaration to be valid:

@example
private func someFunction() -> (SomeInternalClass, SomePrivateClass) @{
    // function implementation goes here
@}
@end example

It's not valid to mark the definition of @samp{someFunction()} with the
@samp{public} or @samp{internal} modifiers, or to use the default setting of
internal, because public or internal users of the function might not
have appropriate access to the private class used in the function's
return type.

@node Enumeration Types
@subsection Enumeration Types

The individual cases of an enumeration automatically receive the same
access level as the enumeration they belong to. You can't specify a
different access level for individual enumeration cases.

In the example below, the @samp{CompassPoint} enumeration has an explicit
access level of public. The enumeration cases @samp{north}, @samp{south}, @samp{east},
and @samp{west} therefore also have an access level of public:

@example
public enum CompassPoint @{
    case north
    case south
    case east
    case west
@}
@end example

@enumerate
@item
Raw Values and Associated Values


The types used for any raw values or associated values in an enumeration
definition must have an access level at least as high as the
enumeration's access level. You can't use a private type as the
raw-value type of an enumeration with an internal access level, for
example.
@end enumerate

@node Nested Types 2
@subsection Nested Types

Nested types defined within a private type have an automatic access
level of private. Nested types defined within a file-private type have
an automatic access level of file private. Nested types defined within a
public type or an internal type have an automatic access level of
internal. If you want a nested type within a public type to be publicly
available, you must explicitly declare the nested type as public.

@node Subclassing 1
@section Subclassing

You can subclass any class that can be accessed in the current access
context. A subclass can't have a higher access level than its
superclass---for example, you can't write a public subclass of an
internal superclass.

In addition, you can override any class member (method, property,
initializer, or subscript) that is visible in a certain access context.

An override can make an inherited class member more accessible than its
superclass version. In the example below, class @samp{A} is a public class
with a file-private method called @samp{someMethod()}. Class @samp{B} is a
subclass of @samp{A}, with a reduced access level of “internal”. Nonetheless,
class @samp{B} provides an override of @samp{someMethod()} with an access level of
“internal”, which is @emph{higher} than the original implementation of
@samp{someMethod()}:

@example
public class A @{
    fileprivate func someMethod() @{@}
@}

internal class B: A @{
    override internal func someMethod() @{@}
@}
@end example

It's even valid for a subclass member to call a superclass member that
has lower access permissions than the subclass member, as long as the
call to the superclass's member takes place within an allowed access
level context (that is, within the same source file as the superclass
for a file-private member call, or within the same module as the
superclass for an internal member call):

@example
public class A @{
    fileprivate func someMethod() @{@}
@}

internal class B: A @{
    override internal func someMethod() @{
        super.someMethod()
    @}
@}
@end example

Because superclass @samp{A} and subclass @samp{B} are defined in the same source
file, it's valid for the @samp{B} implementation of @samp{someMethod()} to call
@samp{super.someMethod()}.

@node Constants Variables Properties and Subscripts
@section Constants, Variables, Properties, and Subscripts

A constant, variable, or property can't be more public than its type.
It's not valid to write a public property with a private type, for
example. Similarly, a subscript can't be more public than either its
index type or return type.

If a constant, variable, property, or subscript makes use of a private
type, the constant, variable, property, or subscript must also be marked
as @samp{private}:

@example
private var privateInstance = SomePrivateClass()
@end example

@menu
* Getters and Setters::
@end menu

@node Getters and Setters
@subsection Getters and Setters

Getters and setters for constants, variables, properties, and subscripts
automatically receive the same access level as the constant, variable,
property, or subscript they belong to.

You can give a setter a @emph{lower} access level than its corresponding
getter, to restrict the read-write scope of that variable, property, or
subscript. You assign a lower access level by writing
@samp{fileprivate(set)}, @samp{private(set)}, or @samp{internal(set)} before the @samp{var}
or @samp{subscript} introducer.

Note

This rule applies to stored properties as well as computed properties.
Even though you don't write an explicit getter and setter for a stored
property, Swift still synthesizes an implicit getter and setter for you
to provide access to the stored property's backing storage. Use
@samp{fileprivate(set)}, @samp{private(set)}, and @samp{internal(set)} to change the
access level of this synthesized setter in exactly the same way as for
an explicit setter in a computed property.

The example below defines a structure called @samp{TrackedString}, which
keeps track of the number of times a string property is modified:

@example
struct TrackedString @{
    private(set) var numberOfEdits = 0
    var value: String = "" @{
        didSet @{
            numberOfEdits += 1
        @}
    @}
@}
@end example

The @samp{TrackedString} structure defines a stored string property called
@samp{value}, with an initial value of @samp{""} (an empty string). The structure
also defines a stored integer property called @samp{numberOfEdits}, which is
used to track the number of times that @samp{value} is modified. This
modification tracking is implemented with a @samp{didSet} property observer
on the @samp{value} property, which increments @samp{numberOfEdits} every time the
@samp{value} property is set to a new value.

The @samp{TrackedString} structure and the @samp{value} property don't provide an
explicit access-level modifier, and so they both receive the default
access level of internal. However, the access level for the
@samp{numberOfEdits} property is marked with a @samp{private(set)} modifier to
indicate that the property's getter still has the default access level
of internal, but the property is settable only from within code that's
part of the @samp{TrackedString} structure. This enables @samp{TrackedString} to
modify the @samp{numberOfEdits} property internally, but to present the
property as a read-only property when it's used outside the structure's
definition.

If you create a @samp{TrackedString} instance and modify its string value a
few times, you can see the @samp{numberOfEdits} property value update to
match the number of modifications:

@example
var stringToEdit = TrackedString()
stringToEdit.value = "This string will be tracked."
stringToEdit.value += " This edit will increment numberOfEdits."
stringToEdit.value += " So will this one."
print("The number of edits is \(stringToEdit.numberOfEdits)")
// Prints "The number of edits is 3"
@end example

Although you can query the current value of the @samp{numberOfEdits} property
from within another source file, you can't @emph{modify} the property from
another source file. This restriction protects the implementation
details of the @samp{TrackedString} edit-tracking functionality, while still
providing convenient access to an aspect of that functionality.

Note that you can assign an explicit access level for both a getter and
a setter if required. The example below shows a version of the
@samp{TrackedString} structure in which the structure is defined with an
explicit access level of public. The structure's members (including the
@samp{numberOfEdits} property) therefore have an internal access level by
default. You can make the structure's @samp{numberOfEdits} property getter
public, and its property setter private, by combining the @samp{public} and
@samp{private(set)} access-level modifiers:

@example
public struct TrackedString @{
    public private(set) var numberOfEdits = 0
    public var value: String = "" @{
        didSet @{
            numberOfEdits += 1
        @}
    @}
    public init() @{@}
@}
@end example

@node Initializers 2
@section Initializers

Custom initializers can be assigned an access level less than or equal
to the type that they initialize. The only exception is for required
initializers (as defined in @ref{Required Initializers, , Required
Initializers}). A required initializer must have the same access level
as the class it belongs to.

As with function and method parameters, the types of an initializer's
parameters can't be more private than the initializer's own access
level.

@menu
* Default Initializers: Default Initializers 1.
* Default Memberwise Initializers for Structure Types::
@end menu

@node Default Initializers 1
@subsection Default Initializers

As described in @ref{Default Initializers},
Swift automatically provides a @emph{default initializer} without any
arguments for any structure or base class that provides default values
for all of its properties and doesn't provide at least one initializer
itself.

A default initializer has the same access level as the type it
initializes, unless that type is defined as @samp{public}. For a type that is
defined as @samp{public}, the default initializer is considered internal. If
you want a public type to be initializable with a no-argument
initializer when used in another module, you must explicitly provide a
public no-argument initializer yourself as part of the type's
definition.

@node Default Memberwise Initializers for Structure Types
@subsection Default Memberwise Initializers for Structure Types

The default memberwise initializer for a structure type is considered
private if any of the structure's stored properties are private.
Likewise, if any of the structure's stored properties are file private,
the initializer is file private. Otherwise, the initializer has an
access level of internal.

As with the default initializer above, if you want a public structure
type to be initializable with a memberwise initializer when used in
another module, you must provide a public memberwise initializer
yourself as part of the type's definition.

@node Protocols 1
@section Protocols

If you want to assign an explicit access level to a protocol type, do so
at the point that you define the protocol. This enables you to create
protocols that can only be adopted within a certain access context.

The access level of each requirement within a protocol definition is
automatically set to the same access level as the protocol. You can't
set a protocol requirement to a different access level than the protocol
it supports. This ensures that all of the protocol's requirements will
be visible on any type that adopts the protocol.

Note

If you define a public protocol, the protocol's requirements require a
public access level for those requirements when they're implemented.
This behavior is different from other types, where a public type
definition implies an access level of internal for the type's members.

@menu
* Protocol Inheritance: Protocol Inheritance 1.
* Protocol Conformance::
@end menu

@node Protocol Inheritance 1
@subsection Protocol Inheritance

If you define a new protocol that inherits from an existing protocol,
the new protocol can have at most the same access level as the protocol
it inherits from. You can't write a public protocol that inherits from
an internal protocol, for example.

@node Protocol Conformance
@subsection Protocol Conformance

A type can conform to a protocol with a lower access level than the type
itself. For example, you can define a public type that can be used in
other modules, but whose conformance to an internal protocol can only be
used within the internal protocol's defining module.

The context in which a type conforms to a particular protocol is the
minimum of the type's access level and the protocol's access level. If a
type is public, but a protocol it conforms to is internal, the type's
conformance to that protocol is also internal.

When you write or extend a type to conform to a protocol, you must
ensure that the type's implementation of each protocol requirement has
at least the same access level as the type's conformance to that
protocol. For example, if a public type conforms to an internal
protocol, the type's implementation of each protocol requirement must be
at least “internal”.

Note

In Swift, as in Objective-C, protocol conformance is global---it isn't
possible for a type to conform to a protocol in two different ways
within the same program.

@node Extensions 1
@section Extensions

You can extend a class, structure, or enumeration in any access context
in which the class, structure, or enumeration is available. Any type
members added in an extension have the same default access level as type
members declared in the original type being extended. If you extend a
public or internal type, any new type members you add have a default
access level of internal. If you extend a file-private type, any new
type members you add have a default access level of file private. If you
extend a private type, any new type members you add have a default
access level of private.

Alternatively, you can mark an extension with an explicit access-level
modifier (for example, @samp{private extension}) to set a new default access
level for all members defined within the extension. This new default can
still be overridden within the extension for individual type members.

You can't provide an explicit access-level modifier for an extension if
you're using that extension to add protocol conformance. Instead, the
protocol's own access level is used to provide the default access level
for each protocol requirement implementation within the extension.

@menu
* Private Members in Extensions::
@end menu

@node Private Members in Extensions
@subsection Private Members in Extensions

Extensions that are in the same file as the class, structure, or
enumeration that they extend behave as if the code in the extension had
been written as part of the original type's declaration. As a result,
you can:

@itemize
@item
Declare a private member in the original declaration, and access that
member from extensions in the same file.

@item
Declare a private member in one extension, and access that member from
another extension in the same file.

@item
Declare a private member in an extension, and access that member from
the original declaration in the same file.
@end itemize

This behavior means you can use extensions in the same way to organize
your code, whether or not your types have private entities. For example,
given the following simple protocol:

@example
protocol SomeProtocol @{
    func doSomething()
@}
@end example

You can use an extension to add protocol conformance, like this:

@example
struct SomeStruct @{
    private var privateVariable = 12
@}

extension SomeStruct: SomeProtocol @{
    func doSomething() @{
        print(privateVariable)
    @}
@}
@end example

@node Generics 2
@section Generics

The access level for a generic type or generic function is the minimum
of the access level of the generic type or function itself and the
access level of any type constraints on its type parameters.

@node Type Aliases 1
@section Type Aliases

Any type aliases you define are treated as distinct types for the
purposes of access control. A type alias can have an access level less
than or equal to the access level of the type it aliases. For example, a
private type alias can alias a private, file-private, internal, public,
or open type, but a public type alias can't alias an internal,
file-private, or private type.

Note

This rule also applies to type aliases for associated types used to
satisfy protocol conformances.

@node Advanced Operators
@chapter Advanced Operators

In addition to the operators described in @ref{Basic Operators, , Basic
Operators}, Swift provides several advanced operators that perform more
complex value manipulation. These include all of the bitwise and bit
shifting operators you will be familiar with from C and Objective-C.

Unlike arithmetic operators in C, arithmetic operators in Swift do not
overflow by default. Overflow behavior is trapped and reported as an
error. To opt in to overflow behavior, use Swift's second set of
arithmetic operators that overflow by default, such as the overflow
addition operator (@samp{&+}). All of these overflow operators begin with an
ampersand (@samp{&}).

When you define your own structures, classes, and enumerations, it can
be useful to provide your own implementations of the standard Swift
operators for these custom types. Swift makes it easy to provide
tailored implementations of these operators and to determine exactly
what their behavior should be for each type you create.

You're not limited to the predefined operators. Swift gives you the
freedom to define your own custom infix, prefix, postfix, and assignment
operators, with custom precedence and associativity values. These
operators can be used and adopted in your code like any of the
predefined operators, and you can even extend existing types to support
the custom operators you define.

@menu
* Bitwise Operators::
* Overflow Operators::
* Precedence and Associativity::
* Operator Methods: Operator Methods 1.
* Custom Operators::
@end menu

@node Bitwise Operators
@section Bitwise Operators

@emph{Bitwise operators} enable you to manipulate the individual raw data
bits within a data structure. They are often used in low-level
programming, such as graphics programming and device driver creation.
Bitwise operators can also be useful when you work with raw data from
external sources, such as encoding and decoding data for communication
over a custom protocol.

Swift supports all of the bitwise operators found in C, as described
below.

@menu
* Bitwise NOT Operator::
* Bitwise AND Operator::
* Bitwise OR Operator::
* Bitwise XOR Operator::
* Bitwise Left and Right Shift Operators::
@end menu

@node Bitwise NOT Operator
@subsection Bitwise NOT Operator

The @emph{bitwise NOT operator} (@samp{~}) inverts all bits in a number:

@image{_images/bitwiseNOT_2x,,,,png}
The bitwise NOT operator is a prefix operator, and appears immediately
before the value it operates on, without any white space:

@enumerate
@item
let initialBits: UInt8 = 0b00001111
@item
let invertedBits = ~initialBits // equals 11110000
@end enumerate

@samp{UInt8} integers have eight bits and can store any value between @samp{0} and
@samp{255}. This example initializes a @samp{UInt8} integer with the binary value
@samp{00001111}, which has its first four bits set to @samp{0}, and its second
four bits set to @samp{1}. This is equivalent to a decimal value of @samp{15}.

The bitwise NOT operator is then used to create a new constant called
@samp{invertedBits}, which is equal to @samp{initialBits}, but with all of the
bits inverted. Zeros become ones, and ones become zeros. The value of
@samp{invertedBits} is @samp{11110000}, which is equal to an unsigned decimal
value of @samp{240}.

@node Bitwise AND Operator
@subsection Bitwise AND Operator

The @emph{bitwise AND operator} (@samp{&}) combines the bits of two numbers. It
returns a new number whose bits are set to @samp{1} only if the bits were
equal to @samp{1} in @emph{both} input numbers:

@image{_images/bitwiseAND_2x,,,,png}
In the example below, the values of @samp{firstSixBits} and @samp{lastSixBits}
both have four middle bits equal to @samp{1}. The bitwise AND operator
combines them to make the number @samp{00111100}, which is equal to an
unsigned decimal value of @samp{60}:

@example
let firstSixBits: UInt8 = 0b11111100
let lastSixBits: UInt8 = 0b00111111
let middleFourBits = firstSixBits & lastSixBits // equals 00111100
@end example

@node Bitwise OR Operator
@subsection Bitwise OR Operator

The @emph{bitwise OR operator} (@samp{|}) compares the bits of two numbers. The
operator returns a new number whose bits are set to @samp{1} if the bits are
equal to @samp{1} in @emph{either} input number:

@image{_images/bitwiseOR_2x,,,,png}
In the example below, the values of @samp{someBits} and @samp{moreBits} have
different bits set to @samp{1}. The bitwise OR operator combines them to make
the number @samp{11111110}, which equals an unsigned decimal of @samp{254}:

@example
let someBits: UInt8 = 0b10110010
let moreBits: UInt8 = 0b01011110
let combinedbits = someBits | moreBits // equals 11111110
@end example

@node Bitwise XOR Operator
@subsection Bitwise XOR Operator

The @emph{bitwise XOR operator}, or “exclusive OR operator” (@samp{^}), compares
the bits of two numbers. The operator returns a new number whose bits
are set to @samp{1} where the input bits are different and are set to @samp{0}
where the input bits are the same:

@image{_images/bitwiseXOR_2x,,,,png}
In the example below, the values of @samp{firstBits} and @samp{otherBits} each
have a bit set to @samp{1} in a location that the other does not. The bitwise
XOR operator sets both of these bits to @samp{1} in its output value. All of
the other bits in @samp{firstBits} and @samp{otherBits} match and are set to @samp{0}
in the output value:

@example
let firstBits: UInt8 = 0b00010100
let otherBits: UInt8 = 0b00000101
let outputBits = firstBits ^ otherBits // equals 00010001
@end example

@node Bitwise Left and Right Shift Operators
@subsection Bitwise Left and Right Shift Operators

The @emph{bitwise left shift operator} (@samp{<<}) and @emph{bitwise right shift
operator} (@samp{>>}) move all bits in a number to the left or the right by a
certain number of places, according to the rules defined below.

Bitwise left and right shifts have the effect of multiplying or dividing
an integer by a factor of two. Shifting an integer's bits to the left by
one position doubles its value, whereas shifting it to the right by one
position halves its value.

@enumerate
@item
Shifting Behavior for Unsigned Integers


The bit-shifting behavior for unsigned integers is as follows:

@enumerate
@item
Existing bits are moved to the left or right by the requested number
of places.

@item
Any bits that are moved beyond the bounds of the integer's storage
are discarded.

@item
Zeros are inserted in the spaces left behind after the original bits
are moved to the left or right.
@end enumerate

This approach is known as a @emph{logical shift}.

The illustration below shows the results of @samp{11111111 << 1} (which is
@samp{11111111} shifted to the left by @samp{1} place), and @samp{11111111 >> 1} (which
is @samp{11111111} shifted to the right by @samp{1} place). Blue numbers are
shifted, gray numbers are discarded, and orange zeros are inserted:

@image{_images/bitshiftUnsigned_2x,,,,png}
Here's how bit shifting looks in Swift code:

@example
let shiftBits: UInt8 = 4 // 00000100 in binary
shiftBits << 1 // 00001000
shiftBits << 2 // 00010000
shiftBits << 5 // 10000000
shiftBits << 6 // 00000000
shiftBits >> 2 // 00000001
@end example

You can use bit shifting to encode and decode values within other data
types:

@example
let pink: UInt32 = 0xCC6699
let redComponent = (pink & 0xFF0000) >> 16 // redComponent is 0xCC, or 204
let greenComponent = (pink & 0x00FF00) >> 8 // greenComponent is 0x66, or 102
let blueComponent = pink & 0x0000FF // blueComponent is 0x99, or 153
@end example

This example uses a @samp{UInt32} constant called @samp{pink} to store a Cascading
Style Sheets color value for the color pink. The CSS color value
@samp{#CC6699} is written as @samp{0xCC6699} in Swift's hexadecimal number
representation. This color is then decomposed into its red (@samp{CC}), green
(@samp{66}), and blue (@samp{99}) components by the bitwise AND operator (@samp{&}) and
the bitwise right shift operator (@samp{>>}).

The red component is obtained by performing a bitwise AND between the
numbers @samp{0xCC6699} and @samp{0xFF0000}. The zeros in @samp{0xFF0000} effectively
“mask” the second and third bytes of @samp{0xCC6699}, causing the @samp{6699} to
be ignored and leaving @samp{0xCC0000} as the result.

This number is then shifted 16 places to the right (@samp{>> 16}). Each pair
of characters in a hexadecimal number uses 8 bits, so a move 16 places
to the right will convert @samp{0xCC0000} into @samp{0x0000CC}. This is the same
as @samp{0xCC}, which has a decimal value of @samp{204}.

Similarly, the green component is obtained by performing a bitwise AND
between the numbers @samp{0xCC6699} and @samp{0x00FF00}, which gives an output
value of @samp{0x006600}. This output value is then shifted eight places to
the right, giving a value of @samp{0x66}, which has a decimal value of @samp{102}.

Finally, the blue component is obtained by performing a bitwise AND
between the numbers @samp{0xCC6699} and @samp{0x0000FF}, which gives an output
value of @samp{0x000099}. There's no need to shift this to the right, as
@samp{0x000099} already equals @samp{0x99}, which has a decimal value of @samp{153}.

@item
Shifting Behavior for Signed Integers


The shifting behavior is more complex for signed integers than for
unsigned integers, because of the way signed integers are represented in
binary. (The examples below are based on 8-bit signed integers for
simplicity, but the same principles apply for signed integers of any
size.)

Signed integers use their first bit (known as the @emph{sign bit}) to
indicate whether the integer is positive or negative. A sign bit of @samp{0}
means positive, and a sign bit of @samp{1} means negative.

The remaining bits (known as the @emph{value bits}) store the actual value.
Positive numbers are stored in exactly the same way as for unsigned
integers, counting upwards from @samp{0}. Here's how the bits inside an
@samp{Int8} look for the number @samp{4}:

@image{_images/bitshiftSignedFour_2x,,,,png}
The sign bit is @samp{0} (meaning “positive”), and the seven value bits are
just the number @samp{4}, written in binary notation.

Negative numbers, however, are stored differently. They are stored by
subtracting their absolute value from @samp{2} to the power of @samp{n}, where @samp{n}
is the number of value bits. An eight-bit number has seven value bits,
so this means @samp{2} to the power of @samp{7}, or @samp{128}.

Here's how the bits inside an @samp{Int8} look for the number @samp{-4}:

@image{_images/bitshiftSignedMinusFour_2x,,,,png}
This time, the sign bit is @samp{1} (meaning “negative”), and the seven value
bits have a binary value of @samp{124} (which is @samp{128 - 4}):

@image{_images/bitshiftSignedMinusFourValue_2x,,,,png}
This encoding for negative numbers is known as a @emph{two's complement}
representation. It may seem an unusual way to represent negative
numbers, but it has several advantages.

First, you can add @samp{-1} to @samp{-4}, simply by performing a standard binary
addition of all eight bits (including the sign bit), and discarding
anything that doesn't fit in the eight bits once you're done:

@image{_images/bitshiftSignedAddition_2x,,,,png}
Second, the two's complement representation also lets you shift the bits
of negative numbers to the left and right like positive numbers, and
still end up doubling them for every shift you make to the left, or
halving them for every shift you make to the right. To achieve this, an
extra rule is used when signed integers are shifted to the right: When
you shift signed integers to the right, apply the same rules as for
unsigned integers, but fill any empty bits on the left with the @emph{sign
bit}, rather than with a zero.

@image{_images/bitshiftSigned_2x,,,,png}
This action ensures that signed integers have the same sign after they
are shifted to the right, and is known as an @emph{arithmetic shift}.

Because of the special way that positive and negative numbers are
stored, shifting either of them to the right moves them closer to zero.
Keeping the sign bit the same during this shift means that negative
integers remain negative as their value moves closer to zero.
@end enumerate

@node Overflow Operators
@section Overflow Operators

If you try to insert a number into an integer constant or variable that
cannot hold that value, by default Swift reports an error rather than
allowing an invalid value to be created. This behavior gives extra
safety when you work with numbers that are too large or too small.

For example, the @samp{Int16} integer type can hold any signed integer
between @samp{-32768} and @samp{32767}. Trying to set an @samp{Int16} constant or
variable to a number outside of this range causes an error:

@example
var potentialOverflow = Int16.max
// potentialOverflow equals 32767, which is the maximum value an Int16 can hold
potentialOverflow += 1
// this causes an error
@end example

Providing error handling when values get too large or too small gives
you much more flexibility when coding for boundary value conditions.

However, when you specifically want an overflow condition to truncate
the number of available bits, you can opt in to this behavior rather
than triggering an error. Swift provides three arithmetic @emph{overflow
operators} that opt in to the overflow behavior for integer
calculations. These operators all begin with an ampersand (@samp{&}):

@itemize
@item
Overflow addition (@samp{&+})

@item
Overflow subtraction (@samp{&-})

@item
Overflow multiplication (@samp{&*})
@end itemize

@menu
* Value Overflow::
@end menu

@node Value Overflow
@subsection Value Overflow

Numbers can overflow in both the positive and negative direction.

Here's an example of what happens when an unsigned integer is allowed to
overflow in the positive direction, using the overflow addition operator
(@samp{&+}):

@example
var unsignedOverflow = UInt8.max
// unsignedOverflow equals 255, which is the maximum value a UInt8 can hold
unsignedOverflow = unsignedOverflow &+ 1
// unsignedOverflow is now equal to 0
@end example

The variable @samp{unsignedOverflow} is initialized with the maximum value a
@samp{UInt8} can hold (@samp{255}, or @samp{11111111} in binary). It is then
incremented by @samp{1} using the overflow addition operator (@samp{&+}). This
pushes its binary representation just over the size that a @samp{UInt8} can
hold, causing it to overflow beyond its bounds, as shown in the diagram
below. The value that remains within the bounds of the @samp{UInt8} after the
overflow addition is @samp{00000000}, or zero.

@image{_images/overflowAddition_2x,,,,png}
Something similar happens when an unsigned integer is allowed to
overflow in the negative direction. Here's an example using the overflow
subtraction operator (@samp{&-}):

@example
var unsignedOverflow = UInt8.min
// unsignedOverflow equals 0, which is the minimum value a UInt8 can hold
unsignedOverflow = unsignedOverflow &- 1
// unsignedOverflow is now equal to 255
@end example

The minimum value that a @samp{UInt8} can hold is zero, or @samp{00000000} in
binary. If you subtract @samp{1} from @samp{00000000} using the overflow
subtraction operator (@samp{&-}), the number will overflow and wrap around to
@samp{11111111}, or @samp{255} in decimal.

@image{_images/overflowUnsignedSubtraction_2x,,,,png}
Overflow also occurs for signed integers. All addition and subtraction
for signed integers is performed in bitwise fashion, with the sign bit
included as part of the numbers being added or subtracted, as described
in @ref{Bitwise Left and Right Shift Operators, , Bitwise Left and Right Shift
Operators}.

@example
var signedOverflow = Int8.min
// signedOverflow equals -128, which is the minimum value an Int8 can hold
signedOverflow = signedOverflow &- 1
// signedOverflow is now equal to 127
@end example

The minimum value that an @samp{Int8} can hold is @samp{-128}, or @samp{10000000} in
binary. Subtracting @samp{1} from this binary number with the overflow
operator gives a binary value of @samp{01111111}, which toggles the sign bit
and gives positive @samp{127}, the maximum positive value that an @samp{Int8} can
hold.

@image{_images/overflowSignedSubtraction_2x,,,,png}
For both signed and unsigned integers, overflow in the positive
direction wraps around from the maximum valid integer value back to the
minimum, and overflow in the negative direction wraps around from the
minimum value to the maximum.

@node Precedence and Associativity
@section Precedence and Associativity

Operator @emph{precedence} gives some operators higher priority than others;
these operators are applied first.

Operator @emph{associativity} defines how operators of the same precedence
are grouped together---either grouped from the left, or grouped from the
right. Think of it as meaning “they associate with the expression to
their left,” or “they associate with the expression to their right.”

It is important to consider each operator's precedence and associativity
when working out the order in which a compound expression will be
calculated. For example, operator precedence explains why the following
expression equals @samp{17}.

@example
2 + 3 % 4 * 5
// this equals 17
@end example

If you read strictly from left to right, you might expect the expression
to be calculated as follows:

@itemize
@item
@samp{2} plus @samp{3} equals @samp{5}

@item
@samp{5} remainder @samp{4} equals @samp{1}

@item
@samp{1} times @samp{5} equals @samp{5}
@end itemize

However, the actual answer is @samp{17}, not @samp{5}. Higher-precedence operators
are evaluated before lower-precedence ones. In Swift, as in C, the
remainder operator (@samp{%}) and the multiplication operator (@samp{*}) have a
higher precedence than the addition operator (@samp{+}). As a result, they
are both evaluated before the addition is considered.

However, remainder and multiplication have the @emph{same} precedence as each
other. To work out the exact evaluation order to use, you also need to
consider their associativity. Remainder and multiplication both
associate with the expression to their left. Think of this as adding
implicit parentheses around these parts of the expression, starting from
their left:

@example
2 + ((3 % 4) * 5)
@end example

@samp{(3 % 4)} is @samp{3}, so this is equivalent to:

@example
2 + (3 * 5)
@end example

@samp{(3 * 5)} is @samp{15}, so this is equivalent to:

@example
2 + 15
@end example

This calculation yields the final answer of @samp{17}.

For information about the operators provided by the Swift standard
library, including a complete list of the operator precedence groups and
associativity settings, see
@uref{https://developer.apple.com/documentation/swift/operator_declarations, Operator
Declarations}
[@uref{https://developer.apple.com/documentation/swift/operator_declarations}].

Note

Swift's operator precedences and associativity rules are simpler and
more predictable than those found in C and Objective-C. However, this
means that they are not exactly the same as in C-based languages. Be
careful to ensure that operator interactions still behave in the way you
intend when porting existing code to Swift.

@node Operator Methods 1
@section Operator Methods

Classes and structures can provide their own implementations of existing
operators. This is known as @emph{overloading} the existing operators.

The example below shows how to implement the arithmetic addition
operator (@samp{+}) for a custom structure. The arithmetic addition operator
is a @emph{binary operator} because it operates on two targets and is said to
be @emph{infix} because it appears in between those two targets.

The example defines a @samp{Vector2D} structure for a two-dimensional
position vector @samp{(x, y)}, followed by a definition of an @emph{operator
method} to add together instances of the @samp{Vector2D} structure:

@example
struct Vector2D @{
    var x = 0.0, y = 0.0
@}

extension Vector2D @{
    static func + (left: Vector2D, right: Vector2D) -> Vector2D @{
        return Vector2D(x: left.x + right.x, y: left.y + right.y)
    @}
@}
@end example

The operator method is defined as a type method on @samp{Vector2D}, with a
method name that matches the operator to be overloaded (@samp{+}). Because
addition isn't part of the essential behavior for a vector, the type
method is defined in an extension of @samp{Vector2D} rather than in the main
structure declaration of @samp{Vector2D}. Because the arithmetic addition
operator is a binary operator, this operator method takes two input
parameters of type @samp{Vector2D} and returns a single output value, also of
type @samp{Vector2D}.

In this implementation, the input parameters are named @samp{left} and
@samp{right} to represent the @samp{Vector2D} instances that will be on the left
side and right side of the @samp{+} operator. The method returns a new
@samp{Vector2D} instance, whose @samp{x} and @samp{y} properties are initialized with
the sum of the @samp{x} and @samp{y} properties from the two @samp{Vector2D} instances
that are added together.

The type method can be used as an infix operator between existing
@samp{Vector2D} instances:

@example
let vector = Vector2D(x: 3.0, y: 1.0)
let anotherVector = Vector2D(x: 2.0, y: 4.0)
let combinedVector = vector + anotherVector
// combinedVector is a Vector2D instance with values of (5.0, 5.0)
@end example

This example adds together the vectors @samp{(3.0, 1.0)} and @samp{(2.0, 4.0)} to
make the vector @samp{(5.0, 5.0)}, as illustrated below.

@image{_images/vectorAddition_2x,,,,png}

@menu
* Prefix and Postfix Operators::
* Compound Assignment Operators: Compound Assignment Operators 1.
* Equivalence Operators::
@end menu

@node Prefix and Postfix Operators
@subsection Prefix and Postfix Operators

The example shown above demonstrates a custom implementation of a binary
infix operator. Classes and structures can also provide implementations
of the standard @emph{unary operators}. Unary operators operate on a single
target. They are @emph{prefix} if they precede their target (such as @samp{-a})
and @emph{postfix} operators if they follow their target (such as @samp{b!}).

You implement a prefix or postfix unary operator by writing the @samp{prefix}
or @samp{postfix} modifier before the @samp{func} keyword when declaring the
operator method:

@example
extension Vector2D @{
    static prefix func - (vector: Vector2D) -> Vector2D @{
        return Vector2D(x: -vector.x, y: -vector.y)
    @}
@}
@end example

The example above implements the unary minus operator (@samp{-a}) for
@samp{Vector2D} instances. The unary minus operator is a prefix operator, and
so this method has to be qualified with the @samp{prefix} modifier.

For simple numeric values, the unary minus operator converts positive
numbers into their negative equivalent and vice versa. The corresponding
implementation for @samp{Vector2D} instances performs this operation on both
the @samp{x} and @samp{y} properties:

@example
let positive = Vector2D(x: 3.0, y: 4.0)
let negative = -positive
// negative is a Vector2D instance with values of (-3.0, -4.0)
let alsoPositive = -negative
// alsoPositive is a Vector2D instance with values of (3.0, 4.0)
@end example

@node Compound Assignment Operators 1
@subsection Compound Assignment Operators

@emph{Compound assignment operators} combine assignment (@samp{=}) with another
operation. For example, the addition assignment operator (@samp{+=}) combines
addition and assignment into a single operation. You mark a compound
assignment operator's left input parameter type as @samp{inout}, because the
parameter's value will be modified directly from within the operator
method.

The example below implements an addition assignment operator method for
@samp{Vector2D} instances:

@example
extension Vector2D @{
    static func += (left: inout Vector2D, right: Vector2D) @{
        left = left + right
    @}
@}
@end example

Because an addition operator was defined earlier, you don't need to
reimplement the addition process here. Instead, the addition assignment
operator method takes advantage of the existing addition operator
method, and uses it to set the left value to be the left value plus the
right value:

@example
var original = Vector2D(x: 1.0, y: 2.0)
let vectorToAdd = Vector2D(x: 3.0, y: 4.0)
original += vectorToAdd
// original now has values of (4.0, 6.0)
@end example

Note

It isn't possible to overload the default assignment operator (@samp{=}).
Only the compound assignment operators can be overloaded. Similarly, the
ternary conditional operator (@samp{a ? b : c}) can't be overloaded.

@node Equivalence Operators
@subsection Equivalence Operators

By default, custom classes and structures don't have an implementation
of the @emph{equivalence operators}, known as the @emph{equal to} operator (@samp{==})
and @emph{not equal to} operator (@samp{!=}). You usually implement the @samp{==}
operator, and use the standard library's default implementation of the
@samp{!=} operator that negates the result of the @samp{==} operator. There are
two ways to implement the @samp{==} operator: You can implement it yourself,
or for many types, you can ask Swift to synthesize an implementation for
you. In both cases, you add conformance to the standard library's
@samp{Equatable} protocol.

You provide an implementation of the @samp{==} operator in the same way as
you implement other infix operators:

@example
extension Vector2D: Equatable @{
    static func == (left: Vector2D, right: Vector2D) -> Bool @{
        return (left.x == right.x) && (left.y == right.y)
    @}
@}
@end example

The example above implements an @samp{==} operator to check whether two
@samp{Vector2D} instances have equivalent values. In the context of
@samp{Vector2D}, it makes sense to consider “equal” as meaning “both
instances have the same @samp{x} values and @samp{y} values”, and so this is the
logic used by the operator implementation.

You can now use this operator to check whether two @samp{Vector2D} instances
are equivalent:

@example
let twoThree = Vector2D(x: 2.0, y: 3.0)
let anotherTwoThree = Vector2D(x: 2.0, y: 3.0)
if twoThree == anotherTwoThree @{
    print("These two vectors are equivalent.")
@}
// Prints "These two vectors are equivalent."
@end example

In many simple cases, you can ask Swift to provide synthesized
implementations of the equivalence operators for you. Swift provides
synthesized implementations for the following kinds of custom types:

@itemize
@item
Structures that have only stored properties that conform to the
@samp{Equatable} protocol

@item
Enumerations that have only associated types that conform to the
@samp{Equatable} protocol

@item
Enumerations that have no associated types
@end itemize

To receive a synthesized implementation of @samp{==}, declare @samp{Equatable}
conformance in the file that contains the original declaration, without
implementing an @samp{==} operator yourself.

The example below defines a @samp{Vector3D} structure for a three-dimensional
position vector @samp{(x, y, z)}, similar to the @samp{Vector2D} structure.
Because the @samp{x}, @samp{y}, and @samp{z} properties are all of an @samp{Equatable} type,
@samp{Vector3D} receives synthesized implementations of the equivalence
operators.

@example
struct Vector3D: Equatable @{
    var x = 0.0, y = 0.0, z = 0.0
@}

let twoThreeFour = Vector3D(x: 2.0, y: 3.0, z: 4.0)
let anotherTwoThreeFour = Vector3D(x: 2.0, y: 3.0, z: 4.0)
if twoThreeFour == anotherTwoThreeFour @{
    print("These two vectors are also equivalent.")
@}
// Prints "These two vectors are also equivalent."
@end example

@node Custom Operators
@section Custom Operators

You can declare and implement your own @emph{custom operators} in addition to
the standard operators provided by Swift. For a list of characters that
can be used to define custom operators, see Operators.

New operators are declared at a global level using the @samp{operator}
keyword, and are marked with the @samp{prefix}, @samp{infix} or @samp{postfix}
modifiers:

@enumerate
@item
prefix operator +
@end enumerate

The example above defines a new prefix operator called @samp{+++}. This
operator does not have an existing meaning in Swift, and so it is given
its own custom meaning below in the specific context of working with
@samp{Vector2D} instances. For the purposes of this example, @samp{+++} is treated
as a new “prefix doubling” operator. It doubles the @samp{x} and @samp{y} values
of a @samp{Vector2D} instance, by adding the vector to itself with the
addition assignment operator defined earlier. To implement the @samp{+++}
operator, you add a type method called @samp{+++} to @samp{Vector2D} as follows:

@example
extension Vector2D @{
    static prefix func +++ (vector: inout Vector2D) -> Vector2D @{
        vector += vector
        return vector
    @}
@}

var toBeDoubled = Vector2D(x: 1.0, y: 4.0)
let afterDoubling = +++toBeDoubled
// toBeDoubled now has values of (2.0, 8.0)
// afterDoubling also has values of (2.0, 8.0)
@end example

@menu
* Precedence for Custom Infix Operators::
@end menu

@node Precedence for Custom Infix Operators
@subsection Precedence for Custom Infix Operators

Custom infix operators each belong to a precedence group. A precedence
group specifies an operator's precedence relative to other infix
operators, as well as the operator's associativity. See
@ref{Precedence and Associativity} for an
explanation of how these characteristics affect an infix operator's
interaction with other infix operators.

A custom infix operator that is not explicitly placed into a precedence
group is given a default precedence group with a precedence immediately
higher than the precedence of the ternary conditional operator.

The following example defines a new custom infix operator called @samp{+-},
which belongs to the precedence group @samp{AdditionPrecedence}:

@example
infix operator +-: AdditionPrecedence
extension Vector2D @{
    static func +- (left: Vector2D, right: Vector2D) -> Vector2D @{
        return Vector2D(x: left.x + right.x, y: left.y - right.y)
    @}
@}
let firstVector = Vector2D(x: 1.0, y: 2.0)
let secondVector = Vector2D(x: 3.0, y: 4.0)
let plusMinusVector = firstVector +- secondVector
// plusMinusVector is a Vector2D instance with values of (4.0, -2.0)
@end example

This operator adds together the @samp{x} values of two vectors, and subtracts
the @samp{y} value of the second vector from the first. Because it is in
essence an “additive” operator, it has been given the same precedence
group as additive infix operators such as @samp{+} and @samp{-}. For information
about the operators provided by the Swift standard library, including a
complete list of the operator precedence groups and associativity
settings, see
@uref{https://developer.apple.com/documentation/swift/operator_declarations, Operator
Declarations}
[@uref{https://developer.apple.com/documentation/swift/operator_declarations}].
For more information about precedence groups and to see the syntax for
defining your own operators and precedence groups, see Operator Declaration.

Note

You do not specify a precedence when defining a prefix or postfix
operator. However, if you apply both a prefix and a postfix operator to
the same operand, the postfix operator is applied first.

@node Index
@unnumbered Index

@printindex cp

@bye